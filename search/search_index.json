{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to pypaystack2's documentation! Pypaystack2 is a simple API wrapper for Paystack API Endpoints in python. A fork of the initial pypaystack project. Inspired by the initial project, It aims to improve on the good works of the initial project which is no longer actively maintained. I'm not sure if i knew much about python and programming in general when the original authors created it in 2016 but in my journey, the project has proved useful in several python projects that I've written over the years. The motivation for building on this package is that it's awesome, but in recent years, the package breaks my django applications when deploying to a hosting platform. So this is my attempt to provide a solution. Plus my curiosity to feel what it's like to build and maintain a package. let's get started! What's Pypaystack2 So Paystack provides restful API endpoints for developers from different platforms to integrate their services into their projects. So for python developers, to use these endpoints, you might opt for a package like requests to handle all the API calls which involves a lot of boilerplate. Pypaystack2 abstracts this process by handling all these complexities under the hood and exposing simple APIs for your python project. for example from pypaystack2.api import Miscellaneous # assumes you have installed pypaystack2 from pypaystack2.utils import Country miscellaneous_api_wrapper = Miscellaneous () # assumes that your paystack auth key is in # your enviromental variables i.e. PAYSTACK_AUTHORIZATION_KEY=your_key otherwise instatiate # the Miscellaneous API wrapper as it is done below. # miscellaneous_wrapper = Miscellaneous(auth_key=your_paystack_auth_key) response = miscellaneous_api_wrapper . get_banks ( country = Country . NIGERIA , use_cursor = False ) # Requires internet connection. print ( response ) With the code snippet above, you have successfully queried Paystack's Miscellaneous API to get a list of banks supported by paystack. A requests equivalent of the above will be like import requests # assumes you have requests installed. headers = { \"Content-Type\" : \"application/json\" , \"Authorization\" : \"Bearer <your_auth_key>\" } paystack_url = 'https://api.paystack.co/bank?perPage=50&country=ng&use_cursor=false' response = requests . get ( paystack_url , headers = headers ) # requires internet connection print ( response . json ()) While both approaches achieve the same goal, pypaystack2 uses requests under the hood and manages the headers and URL routes to endpoints, so you can focus more on the actions. with the miscellaneous_wrapper in the example above. you can call all endpoints associated with the Miscellaneous API with methods provided like .get_banks , .get_providers , .get_countries and .get_states . Pypaystack2 provides wrappers to all of Paystack APIs in its pypaystack2.api subpackage. each of the wrapper classes is named to closely match the Paystack API. so say you want to use Paystack's Invoices API, you'd import the wrapper with from pypaystack2.api import Invoice for the Invoices API. All endpoints available on the Invoices API are available as methods in the Invoice wrapper. Say you wanted to create an invoice by sending a POST request to Paystack's Invoice API endpoint /paymentrequest , you'll call Invoice wrapper's .create method. from pypaystack2.api import Invoice invoice_api_wrapper = Invoice () response = invoice_api_wrapper . create ( customer = \"CUS_xwaj0txjryg393b\" , amount = 1000 ) # Creates an invoice with a charge of \u20a6100 From here you can check out the tutorials section to get more examples and get familiar or surf the documentation for wrappers and methods you'll need for your next project. Hurray!","title":"Introduction"},{"location":"#welcome-to-pypaystack2s-documentation","text":"Pypaystack2 is a simple API wrapper for Paystack API Endpoints in python. A fork of the initial pypaystack project. Inspired by the initial project, It aims to improve on the good works of the initial project which is no longer actively maintained. I'm not sure if i knew much about python and programming in general when the original authors created it in 2016 but in my journey, the project has proved useful in several python projects that I've written over the years. The motivation for building on this package is that it's awesome, but in recent years, the package breaks my django applications when deploying to a hosting platform. So this is my attempt to provide a solution. Plus my curiosity to feel what it's like to build and maintain a package. let's get started!","title":"Welcome to pypaystack2's documentation!"},{"location":"#whats-pypaystack2","text":"So Paystack provides restful API endpoints for developers from different platforms to integrate their services into their projects. So for python developers, to use these endpoints, you might opt for a package like requests to handle all the API calls which involves a lot of boilerplate. Pypaystack2 abstracts this process by handling all these complexities under the hood and exposing simple APIs for your python project. for example from pypaystack2.api import Miscellaneous # assumes you have installed pypaystack2 from pypaystack2.utils import Country miscellaneous_api_wrapper = Miscellaneous () # assumes that your paystack auth key is in # your enviromental variables i.e. PAYSTACK_AUTHORIZATION_KEY=your_key otherwise instatiate # the Miscellaneous API wrapper as it is done below. # miscellaneous_wrapper = Miscellaneous(auth_key=your_paystack_auth_key) response = miscellaneous_api_wrapper . get_banks ( country = Country . NIGERIA , use_cursor = False ) # Requires internet connection. print ( response ) With the code snippet above, you have successfully queried Paystack's Miscellaneous API to get a list of banks supported by paystack. A requests equivalent of the above will be like import requests # assumes you have requests installed. headers = { \"Content-Type\" : \"application/json\" , \"Authorization\" : \"Bearer <your_auth_key>\" } paystack_url = 'https://api.paystack.co/bank?perPage=50&country=ng&use_cursor=false' response = requests . get ( paystack_url , headers = headers ) # requires internet connection print ( response . json ()) While both approaches achieve the same goal, pypaystack2 uses requests under the hood and manages the headers and URL routes to endpoints, so you can focus more on the actions. with the miscellaneous_wrapper in the example above. you can call all endpoints associated with the Miscellaneous API with methods provided like .get_banks , .get_providers , .get_countries and .get_states . Pypaystack2 provides wrappers to all of Paystack APIs in its pypaystack2.api subpackage. each of the wrapper classes is named to closely match the Paystack API. so say you want to use Paystack's Invoices API, you'd import the wrapper with from pypaystack2.api import Invoice for the Invoices API. All endpoints available on the Invoices API are available as methods in the Invoice wrapper. Say you wanted to create an invoice by sending a POST request to Paystack's Invoice API endpoint /paymentrequest , you'll call Invoice wrapper's .create method. from pypaystack2.api import Invoice invoice_api_wrapper = Invoice () response = invoice_api_wrapper . create ( customer = \"CUS_xwaj0txjryg393b\" , amount = 1000 ) # Creates an invoice with a charge of \u20a6100 From here you can check out the tutorials section to get more examples and get familiar or surf the documentation for wrappers and methods you'll need for your next project. Hurray!","title":"What's Pypaystack2"},{"location":"explanation/","text":"Coming soon!","title":"Explanation"},{"location":"how-to-guides/","text":"How to use the new Paystack class In previous versions of pypaystack2 , it is required to import all the various API wrappers required to achieve a goal. e.g. say you want to work with the transactions API wrapper and the customer API wrapper, the code below demonstrates how it's achieved from pypaystack2.api import Transaction , Customer Besides having to import these different wrappers, you'll also have to instantiate them which is just bad. While this kind of import will continue to be supported, I've added a new Paystack class which has all the wrappers bound to it. So now the preferred way to use pypaystack2 is demonstrated below from pypaystack2 import Paystack # This is all that is required (except cases where enums in the utils are required). Here's a comparison of how a goal is achieved using the old API and the new API Old API from pypaystack2.api import Invoice , Transaction , Customer invoice_api_wrapper = Invoice () # assumes your PAYSTACK_AUTHORIZATION_KEY is set invoice_api_response = invoice_api_wrapper . create ( customer = \"CUS_xwaj0txjryg393b\" , amount = 1000 ) # Creates an invoice with a charge of \u20a6100 transaction_api_wrapper = Transaction () transaction_api_response = transaction_api_wrapper . get_transactions () customer_api_wrapper = Customer () customer_api_response = customer_api_wrapper . get_customers () New API from pypaystack2 import Paystack paystack_api = Paystack () # assumes your PAYSTACK_AUTHORIZATION_KEY is set invoice_api_response = paystack_api . invoices . create ( customer = \"CUS_xwaj0txjryg393b\" , amount = 1000 ) # Creates an invoice with a charge of \u20a6100 transaction_api_response = paystack_api . transactions . get_transactions () customer_api_response = paystack_api . transactions . get_transactions () Bindings on the Paystack object Paystack.apple_pay maps to the ApplePay wrapper in pypaystack2.api.ApplePay Paystack.bulk_charges maps to the BulkCharge wrapper in pypaystack2.api.BulkCharge Paystack.charge maps to the Charge wrapper in pypaystack2.api.Charge Paystack.control_panel maps to the ControlPanel wrapper in pypaystack2.api.ControlPanel Paystack.customers maps to the Customer wrapper in pypaystack2.api.Customer Paystack.dedicated_accounts maps to the DedicatedAccount wrapper in pypaystack2.api.DedicatedAccount Paystack.disputes maps to the Dispute wrapper in pypaystack2.api.Dispute Paystack.invoices maps to the Invoice wrapper in pypaystack2.api.Invoice Paystack.miscellaneous maps to the Miscellaneous wrapper in pypaystack2.api.Miscellaneous Paystack.payment_pages maps to the Page wrapper in pypaystack2.api.Page Paystack.plans maps to the Plan wrapper in pypaystack2.api.Plan Paystack.products maps to the Product wrapper in pypaystack2.api.Product Paystack.refunds maps to the Refund wrapper in pypaystack2.api.Refund Paystack.settlements maps to the Settlement wrapper in pypaystack2.api.Settlement Paystack.splits maps to the Split wrapper in pypaystack2.api.Split Paystack.subaccounts maps to the SubAccount wrapper in pypaystack2.api.SubAccount Paystack.subscriptions maps to the Subscription wrapper in pypaystack2.api.Subscription Paystack.terminals maps to the Terminal wrapper in pypaystack2.api.Terminal Paystack.transactions maps to the Transaction wrapper in pypaystack2.api.Transactions Paystack.transfer_recipients maps to the TransferRecipient wrapper in pypaystack2.api.TransferRecipient Paystack.transfer maps to the Transfer wrapper in pypaystack2.api.Transfer Paystack.tranfer_control maps to the TransferControl wrapper in pypaystack2.api.TransferControl Paystack.verificaton maps to the Verification wrapper in pypaystack2.api.Verification","title":"How-To Guides"},{"location":"how-to-guides/#how-to-use-the-new-paystack-class","text":"In previous versions of pypaystack2 , it is required to import all the various API wrappers required to achieve a goal. e.g. say you want to work with the transactions API wrapper and the customer API wrapper, the code below demonstrates how it's achieved from pypaystack2.api import Transaction , Customer Besides having to import these different wrappers, you'll also have to instantiate them which is just bad. While this kind of import will continue to be supported, I've added a new Paystack class which has all the wrappers bound to it. So now the preferred way to use pypaystack2 is demonstrated below from pypaystack2 import Paystack # This is all that is required (except cases where enums in the utils are required). Here's a comparison of how a goal is achieved using the old API and the new API","title":"How to use the new Paystack class"},{"location":"how-to-guides/#old-api","text":"from pypaystack2.api import Invoice , Transaction , Customer invoice_api_wrapper = Invoice () # assumes your PAYSTACK_AUTHORIZATION_KEY is set invoice_api_response = invoice_api_wrapper . create ( customer = \"CUS_xwaj0txjryg393b\" , amount = 1000 ) # Creates an invoice with a charge of \u20a6100 transaction_api_wrapper = Transaction () transaction_api_response = transaction_api_wrapper . get_transactions () customer_api_wrapper = Customer () customer_api_response = customer_api_wrapper . get_customers ()","title":"Old API"},{"location":"how-to-guides/#new-api","text":"from pypaystack2 import Paystack paystack_api = Paystack () # assumes your PAYSTACK_AUTHORIZATION_KEY is set invoice_api_response = paystack_api . invoices . create ( customer = \"CUS_xwaj0txjryg393b\" , amount = 1000 ) # Creates an invoice with a charge of \u20a6100 transaction_api_response = paystack_api . transactions . get_transactions () customer_api_response = paystack_api . transactions . get_transactions ()","title":"New API"},{"location":"how-to-guides/#bindings-on-the-paystack-object","text":"Paystack.apple_pay maps to the ApplePay wrapper in pypaystack2.api.ApplePay Paystack.bulk_charges maps to the BulkCharge wrapper in pypaystack2.api.BulkCharge Paystack.charge maps to the Charge wrapper in pypaystack2.api.Charge Paystack.control_panel maps to the ControlPanel wrapper in pypaystack2.api.ControlPanel Paystack.customers maps to the Customer wrapper in pypaystack2.api.Customer Paystack.dedicated_accounts maps to the DedicatedAccount wrapper in pypaystack2.api.DedicatedAccount Paystack.disputes maps to the Dispute wrapper in pypaystack2.api.Dispute Paystack.invoices maps to the Invoice wrapper in pypaystack2.api.Invoice Paystack.miscellaneous maps to the Miscellaneous wrapper in pypaystack2.api.Miscellaneous Paystack.payment_pages maps to the Page wrapper in pypaystack2.api.Page Paystack.plans maps to the Plan wrapper in pypaystack2.api.Plan Paystack.products maps to the Product wrapper in pypaystack2.api.Product Paystack.refunds maps to the Refund wrapper in pypaystack2.api.Refund Paystack.settlements maps to the Settlement wrapper in pypaystack2.api.Settlement Paystack.splits maps to the Split wrapper in pypaystack2.api.Split Paystack.subaccounts maps to the SubAccount wrapper in pypaystack2.api.SubAccount Paystack.subscriptions maps to the Subscription wrapper in pypaystack2.api.Subscription Paystack.terminals maps to the Terminal wrapper in pypaystack2.api.Terminal Paystack.transactions maps to the Transaction wrapper in pypaystack2.api.Transactions Paystack.transfer_recipients maps to the TransferRecipient wrapper in pypaystack2.api.TransferRecipient Paystack.transfer maps to the Transfer wrapper in pypaystack2.api.Transfer Paystack.tranfer_control maps to the TransferControl wrapper in pypaystack2.api.TransferControl Paystack.verificaton maps to the Verification wrapper in pypaystack2.api.Verification","title":"Bindings on the Paystack object"},{"location":"reference/","text":"Pypaystack2 Package Pypaystack2 is a simple python wrapper for Paystack API. it is a fork of the original project Pypaystack Modules and packages exported by this package api : A package containing several wrappers for Paystack API, like apple pay api, bulk charges api e.t.c. utils : A module containing useful utilities and enums errors : A module containing error types for pypaystack2 pypaystack2.api A package containing several wrappers for interfacing Paystack API, like apple pay api, bulk charges api e.t.c. Modules exported by this package apple_pay : A module containing implementations for interfacing with Paystack's Apple Pay API bulk_charges : A module containing implementations for interfacing with Paystack's Bulk Charges API charge : A module containing implementations for interfacing with Paystack's Charge API control_panel : A module containing implementations for interfacing with Paystack's Control Panel API customer : A module containing implementations for interfacing with Paystack's Customer API dedicated_accounts : A module containing implementations for interfacing with Paystack's Dedicated Accounts API disputes : A module containing implementations for interfacing with Paystack's Disputes API invoices : A module containing implementations for interfacing with Paystack's Invoices API miscellaneous : A module containing implementations for interfacing with Paystack's Miscellaneous API payment_pages : A module containing implementations for interfacing with Paystack's Payment Page API plans : A module containing implementations for interfacing with Paystack's Plans API products : A module containing implementations for interfacing with Paystack's Products API refunds : A module containing implementations for interfacing with Paystack's Refunds API settlements : A module containing implementations for interfacing with Paystack's Settlements API splits : A module containing implementations for interfacing with Paystack's Splits API subaccounts : A module containing implementations for interfacing with Paystack's Sub Account API subscriptions : A module containing implementations for interfacing with Paystack's Subscriptions API transactions : A module containing implementations for interfacing with Paystack's Transactions API transfer_recipients : A module containing implementations for interfacing with Paystack's Transfer Recipients API transfers : A module containing implementations for interfacing with Paystack's Transfers API transfers_control : A module containing implementations for interfacing with Paystack's Transfers Control API verification : A module containing implementations for interfacing with Paystack's Verification API ApplePay Bases: BaseAPI Provides a wrapper for paystack Apple Pay API The Apple Pay API allows you register your application's top-level domain or subdomain. Visit paystack api doc Source code in pypaystack2/api/apple_pay.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 class ApplePay ( BaseAPI ): \"\"\"Provides a wrapper for paystack Apple Pay API The Apple Pay API allows you register your application's top-level domain or subdomain. [Visit paystack api doc](https://paystack.com/docs/api/#apple-pay) \"\"\" def register_domain ( self , domain_name : str ) -> Response : \"\"\"Register a top-level domain or subdomain for your Apple Pay integration. Note ---- This method can only be called with one domain or subdomain at a time. Parameters ---------- domain_name: str Domain name to be registered. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/apple-pay/domain\" ) payload = { \"domainName\" : domain_name , } return self . _handle_request ( \"POST\" , url , payload ) def get_domains ( self ) -> Response : \"\"\"Fetches all registered domains on your integration. Returns an empty array if no domains have been added. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/apple-pay/domain\" ) return self . _handle_request ( \"GET\" , url ) def unregister_domain ( self , domain_name : str ) -> Response : \"\"\"Unregister a top-level domain or subdomain previously used for your Apple Pay integration. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/apple-pay/domain\" ) payload = { \"domainName\" : domain_name , } return self . _handle_request ( \"DELETE\" , url , payload ) get_domains () Fetches all registered domains on your integration. Returns an empty array if no domains have been added. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/apple_pay.py 36 37 38 39 40 41 42 43 44 45 46 47 def get_domains ( self ) -> Response : \"\"\"Fetches all registered domains on your integration. Returns an empty array if no domains have been added. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/apple-pay/domain\" ) return self . _handle_request ( \"GET\" , url ) register_domain ( domain_name ) Register a top-level domain or subdomain for your Apple Pay integration. Note This method can only be called with one domain or subdomain at a time. Parameters str Domain name to be registered. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/apple_pay.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def register_domain ( self , domain_name : str ) -> Response : \"\"\"Register a top-level domain or subdomain for your Apple Pay integration. Note ---- This method can only be called with one domain or subdomain at a time. Parameters ---------- domain_name: str Domain name to be registered. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/apple-pay/domain\" ) payload = { \"domainName\" : domain_name , } return self . _handle_request ( \"POST\" , url , payload ) unregister_domain ( domain_name ) Unregister a top-level domain or subdomain previously used for your Apple Pay integration. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/apple_pay.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def unregister_domain ( self , domain_name : str ) -> Response : \"\"\"Unregister a top-level domain or subdomain previously used for your Apple Pay integration. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/apple-pay/domain\" ) payload = { \"domainName\" : domain_name , } return self . _handle_request ( \"DELETE\" , url , payload ) BulkCharge Bases: BaseAPI Provides a wrapper for paystack Bulk Charge API The Bulk Charges API allows you to create and manage multiple recurring payments from your customers. https://paystack.com/docs/api/#bulk-charge Source code in pypaystack2/api/bulk_charges.pyclass BulkCharge ( BaseAPI ): \"\"\"Provides a wrapper for paystack Bulk Charge API The Bulk Charges API allows you to create and manage multiple recurring payments from your customers. https://paystack.com/docs/api/#bulk-charge \"\"\" def initiate ( self , body : list [ dict [ str , Any ]]) -> Response : \"\"\" Send a list of dictionaries with authorization ``codes`` and ``amount`` (in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR ) so paystack can process transactions as a batch. Parameters ---------- body: list A list of dictionaries with authorization codes and amount. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/bulkcharge\" ) payload = body return self . _handle_request ( \"POST\" , url , payload ) def get_batches ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"This gets all bulk charge batches created by the integration. Parameters ---------- page:int Specify exactly what transfer you want to page. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_batch ( self , id_or_code : str ) -> Response : \"\"\" This method retrieves a specific batch code. It also returns useful information on its progress by way of the total_charges and pending_charges attributes in the Response. Parameters ---------- id_or_code:str An ID or code for the charge whose batches you want to retrieve. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) def get_charges_in_batch ( self , id_or_code : str , status : ChargeStatus , pagination = 50 , page = 1 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\" This method retrieves the charges associated with a specified batch code. Pagination parameters are available. You can also filter by status. Charge statuses can be `ChargeStatus.PENDING`, `ChargeStatus.SUCCESS` or `ChargeStatus.FAILED`. Parameters ---------- id_or_code: str An ID or code for the batch whose charges you want to retrieve. status: ChargeStatus Any of the values from the ChargeStatus enum. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what transfer you want to page. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge/ { id_or_code } /charges?perPage= { pagination } \" ) query_params = [ ( \"status\" , status ), ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def pause_batch ( self , batch_code : str ) -> Response : \"\"\"Use this method to pause processing a batch Parameters ---------- batch_code: str The batch code for the bulk charge you want to pause. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge/pause/ { batch_code } \" ) return self . _handle_request ( \"GET\" , url ) def resume_batch ( self , batch_code : str ) -> Response : \"\"\"Use this method to resume processing a batch Parameters ---------- batch_code: str The batch code for the bulk charge you want to resume. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge/resume/ { batch_code } \" ) return self . _handle_request ( \"GET\" , url ) get_batch ( id_or_code ) This method retrieves a specific batch code. It also returns useful information on its progress by way of the total_charges and pending_charges attributes in the Response. Parameters id_or_code:str An ID or code for the charge whose batches you want to retrieve. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/bulk_charges.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def get_batch ( self , id_or_code : str ) -> Response : \"\"\" This method retrieves a specific batch code. It also returns useful information on its progress by way of the total_charges and pending_charges attributes in the Response. Parameters ---------- id_or_code:str An ID or code for the charge whose batches you want to retrieve. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) get_batches ( page = 1 , pagination = 50 , start_date = None , end_date = None ) This gets all bulk charge batches created by the integration. Parameters page:int Specify exactly what transfer you want to page. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Optional[str] A timestamp from which to start listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/bulk_charges.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def get_batches ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"This gets all bulk charge batches created by the integration. Parameters ---------- page:int Specify exactly what transfer you want to page. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) get_charges_in_batch ( id_or_code , status , pagination = 50 , page = 1 , start_date = None , end_date = None ) This method retrieves the charges associated with a specified batch code. Pagination parameters are available. You can also filter by status. Charge statuses can be ChargeStatus.PENDING , ChargeStatus.SUCCESS or ChargeStatus.FAILED . Parameters str An ID or code for the batch whose charges you want to retrieve. ChargeStatus Any of the values from the ChargeStatus enum. int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. int Specify exactly what transfer you want to page. If not specify we use a default value of 1. Optional[str] A timestamp from which to start listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/bulk_charges.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 def get_charges_in_batch ( self , id_or_code : str , status : ChargeStatus , pagination = 50 , page = 1 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\" This method retrieves the charges associated with a specified batch code. Pagination parameters are available. You can also filter by status. Charge statuses can be `ChargeStatus.PENDING`, `ChargeStatus.SUCCESS` or `ChargeStatus.FAILED`. Parameters ---------- id_or_code: str An ID or code for the batch whose charges you want to retrieve. status: ChargeStatus Any of the values from the ChargeStatus enum. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what transfer you want to page. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge/ { id_or_code } /charges?perPage= { pagination } \" ) query_params = [ ( \"status\" , status ), ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) initiate ( body ) Send a list of dictionaries with authorization codes and amount (in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR ) so paystack can process transactions as a batch. Parameters list A list of dictionaries with authorization codes and amount. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/bulk_charges.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def initiate ( self , body : list [ dict [ str , Any ]]) -> Response : \"\"\" Send a list of dictionaries with authorization ``codes`` and ``amount`` (in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR ) so paystack can process transactions as a batch. Parameters ---------- body: list A list of dictionaries with authorization codes and amount. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/bulkcharge\" ) payload = body return self . _handle_request ( \"POST\" , url , payload ) pause_batch ( batch_code ) Use this method to pause processing a batch Parameters str The batch code for the bulk charge you want to pause. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/bulk_charges.py 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 def pause_batch ( self , batch_code : str ) -> Response : \"\"\"Use this method to pause processing a batch Parameters ---------- batch_code: str The batch code for the bulk charge you want to pause. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge/pause/ { batch_code } \" ) return self . _handle_request ( \"GET\" , url ) resume_batch ( batch_code ) Use this method to resume processing a batch Parameters str The batch code for the bulk charge you want to resume. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/bulk_charges.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 def resume_batch ( self , batch_code : str ) -> Response : \"\"\"Use this method to resume processing a batch Parameters ---------- batch_code: str The batch code for the bulk charge you want to resume. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge/resume/ { batch_code } \" ) return self . _handle_request ( \"GET\" , url ) Charge Bases: BaseAPI Provides a wrapper for paystack Charge API The Charge API allows you to configure payment channel of your choice when initiating a payment. https://paystack.com/docs/api/#charge Source code in pypaystack2/api/charge.pyclass Charge ( BaseAPI ): \"\"\"Provides a wrapper for paystack Charge API The Charge API allows you to configure payment channel of your choice when initiating a payment. https://paystack.com/docs/api/#charge \"\"\" def charge ( self , email : str , amount : int , bank : Optional [ dict [ str , Any ]] = None , auth_code : Optional [ str ] = None , pin : Optional [ str ] = None , metadata : Optional [ dict [ str , Any ]] = None , reference : Optional [ str ] = None , ussd : Optional [ dict [ str , Any ]] = None , mobile_money : Optional [ dict [ str , Any ]] = None , device_id : Optional [ str ] = None , ) -> Response : \"\"\"Initiate a payment by integrating the payment channel of your choice. Parameters ---------- email: str Customer's email address amount: int Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR bank: Optional[dict[str,Any]] Bank account to charge (don't send if charging an authorization code) auth_code: Optional[str] An authorization code to charge (don't send if charging a bank account) pin: Optional[str] 4-digit PIN (send with a non-reusable authorization code) metadata: Optional[dict[str, Any]] A dictionary of data. reference: Optional[str] Unique transaction reference. Only -, .\\\\`, = and alphanumeric characters allowed. ussd: Optional[dict[str, Any]] USSD type to charge (don't send if charging an authorization code, bank or card) mobile_money: Optional[dict[str, Any]] Mobile details (don't send if charging an authorization code, bank or card) device_id: str This is the unique identifier of the device a user uses in making payment. Only -, .\\\\`, = and alphanumeric characters allowed. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" amount = validate_amount ( amount ) payload = { \"email\" : email , \"amount\" : amount } optional_params = [ ( \"bank\" , bank ), ( \"authorization_code\" , auth_code ), ( \"pin\" , pin ), ( \"metadata\" , metadata ), ( \"reference\" , reference ), ( \"ussd\" , ussd ), ( \"mobile_money\" , mobile_money ), ( \"device_id\" , device_id ), ] payload = add_to_payload ( optional_params , payload ) url = self . _url ( \"/charge\" ) return self . _handle_request ( \"POST\" , url , payload ) def submit_pin ( self , pin : str , reference : str ) -> Response : \"\"\"Submit PIN to continue a charge Parameters ---------- pin: str PIN submitted by user reference: str Reference for transaction that requested pin Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"pin\" : pin , \"reference\" : reference } url = self . _url ( \"/charge/submit_pin\" ) return self . _handle_request ( \"POST\" , url , payload ) def submit_OTP ( self , otp : str , reference : str ) -> Response : \"\"\"Submit OTP to complete a charge Parameters ---------- otp: str OTP submitted by user reference: str Reference for ongoing transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"otp\" : otp , \"reference\" : reference } url = self . _url ( \"/charge/submit_otp\" ) return self . _handle_request ( \"POST\" , url , payload ) def submit_phone ( self , phone : str , reference : str ) -> Response : \"\"\"Submit Phone when requested Parameters ---------- phone: str Phone submitted by user reference:str Reference for ongoing transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"phone\" : phone , \"reference\" : reference } url = self . _url ( \"/charge/submit_phone\" ) return self . _handle_request ( \"POST\" , url , payload ) def submit_birthday ( self , date : str , reference : str ) -> Response : \"\"\"Submit Birthday when requested Parameters ---------- date: str Birthday submitted by user. ISO Format e.g. 2016-09-21 reference: str Reference for ongoing transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"date\" : date , \"reference\" : reference } url = self . _url ( \"/charge/submit_birthday\" ) return self . _handle_request ( \"POST\" , url , payload ) def set_address ( self , address : str , reference : str , city : str , state : str , zipcode : str , ) -> Response : \"\"\"Submit address to continue a charge Parameters ---------- address: str Address submitted by user reference: str Reference for ongoing transaction city: str City submitted by user state: str State submitted by user zipcode: str Zipcode submitted by user Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"address\" : address , \"reference\" : reference , \"city\" : city , \"state\" : state , \"zipcode\" : zipcode , } url = self . _url ( \"/charge/submit_address\" ) return self . _handle_request ( \"POST\" , url , payload ) def check_pending_charge ( self , reference : str ) -> Response : \"\"\" When you get \"pending\" as a charge status or if there was an exception when calling any of the /charge endpoints, wait 10 seconds or more, then make a check to see if its status has changed. Don't call too early as you may get a lot more pending than you should. Parameters ---------- reference: str The reference to check Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/charge/ { reference } \" ) return self . _handle_request ( \"GET\" , url ) charge ( email , amount , bank = None , auth_code = None , pin = None , metadata = None , reference = None , ussd = None , mobile_money = None , device_id = None ) Initiate a payment by integrating the payment channel of your choice. Parameters str Customer's email address int Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR Optional[dict[str,Any]] Bank account to charge (don't send if charging an authorization code) Optional[str] An authorization code to charge (don't send if charging a bank account) Optional[str] 4-digit PIN (send with a non-reusable authorization code) Optional[dict[str, Any]] A dictionary of data. Optional[str] Unique transaction reference. Only -, .`, = and alphanumeric characters allowed. Optional[dict[str, Any]] USSD type to charge (don't send if charging an authorization code, bank or card) Optional[dict[str, Any]] Mobile details (don't send if charging an authorization code, bank or card) str This is the unique identifier of the device a user uses in making payment. Only -, .`, = and alphanumeric characters allowed. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/charge.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def charge ( self , email : str , amount : int , bank : Optional [ dict [ str , Any ]] = None , auth_code : Optional [ str ] = None , pin : Optional [ str ] = None , metadata : Optional [ dict [ str , Any ]] = None , reference : Optional [ str ] = None , ussd : Optional [ dict [ str , Any ]] = None , mobile_money : Optional [ dict [ str , Any ]] = None , device_id : Optional [ str ] = None , ) -> Response : \"\"\"Initiate a payment by integrating the payment channel of your choice. Parameters ---------- email: str Customer's email address amount: int Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR bank: Optional[dict[str,Any]] Bank account to charge (don't send if charging an authorization code) auth_code: Optional[str] An authorization code to charge (don't send if charging a bank account) pin: Optional[str] 4-digit PIN (send with a non-reusable authorization code) metadata: Optional[dict[str, Any]] A dictionary of data. reference: Optional[str] Unique transaction reference. Only -, .\\\\`, = and alphanumeric characters allowed. ussd: Optional[dict[str, Any]] USSD type to charge (don't send if charging an authorization code, bank or card) mobile_money: Optional[dict[str, Any]] Mobile details (don't send if charging an authorization code, bank or card) device_id: str This is the unique identifier of the device a user uses in making payment. Only -, .\\\\`, = and alphanumeric characters allowed. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" amount = validate_amount ( amount ) payload = { \"email\" : email , \"amount\" : amount } optional_params = [ ( \"bank\" , bank ), ( \"authorization_code\" , auth_code ), ( \"pin\" , pin ), ( \"metadata\" , metadata ), ( \"reference\" , reference ), ( \"ussd\" , ussd ), ( \"mobile_money\" , mobile_money ), ( \"device_id\" , device_id ), ] payload = add_to_payload ( optional_params , payload ) url = self . _url ( \"/charge\" ) return self . _handle_request ( \"POST\" , url , payload ) check_pending_charge ( reference ) When you get \"pending\" as a charge status or if there was an exception when calling any of the /charge endpoints, wait 10 seconds or more, then make a check to see if its status has changed. Don't call too early as you may get a lot more pending than you should. Parameters str The reference to check Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/charge.py 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 def check_pending_charge ( self , reference : str ) -> Response : \"\"\" When you get \"pending\" as a charge status or if there was an exception when calling any of the /charge endpoints, wait 10 seconds or more, then make a check to see if its status has changed. Don't call too early as you may get a lot more pending than you should. Parameters ---------- reference: str The reference to check Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/charge/ { reference } \" ) return self . _handle_request ( \"GET\" , url ) set_address ( address , reference , city , state , zipcode ) Submit address to continue a charge Parameters str Address submitted by user str Reference for ongoing transaction str City submitted by user str State submitted by user str Zipcode submitted by user Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/charge.py 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 def set_address ( self , address : str , reference : str , city : str , state : str , zipcode : str , ) -> Response : \"\"\"Submit address to continue a charge Parameters ---------- address: str Address submitted by user reference: str Reference for ongoing transaction city: str City submitted by user state: str State submitted by user zipcode: str Zipcode submitted by user Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"address\" : address , \"reference\" : reference , \"city\" : city , \"state\" : state , \"zipcode\" : zipcode , } url = self . _url ( \"/charge/submit_address\" ) return self . _handle_request ( \"POST\" , url , payload ) submit_OTP ( otp , reference ) Submit OTP to complete a charge Parameters str OTP submitted by user str Reference for ongoing transaction Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/charge.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def submit_OTP ( self , otp : str , reference : str ) -> Response : \"\"\"Submit OTP to complete a charge Parameters ---------- otp: str OTP submitted by user reference: str Reference for ongoing transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"otp\" : otp , \"reference\" : reference } url = self . _url ( \"/charge/submit_otp\" ) return self . _handle_request ( \"POST\" , url , payload ) submit_birthday ( date , reference ) Submit Birthday when requested Parameters str Birthday submitted by user. ISO Format e.g. 2016-09-21 str Reference for ongoing transaction Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/charge.py 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 def submit_birthday ( self , date : str , reference : str ) -> Response : \"\"\"Submit Birthday when requested Parameters ---------- date: str Birthday submitted by user. ISO Format e.g. 2016-09-21 reference: str Reference for ongoing transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"date\" : date , \"reference\" : reference } url = self . _url ( \"/charge/submit_birthday\" ) return self . _handle_request ( \"POST\" , url , payload ) submit_phone ( phone , reference ) Submit Phone when requested Parameters str Phone submitted by user reference:str Reference for ongoing transaction Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/charge.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 def submit_phone ( self , phone : str , reference : str ) -> Response : \"\"\"Submit Phone when requested Parameters ---------- phone: str Phone submitted by user reference:str Reference for ongoing transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"phone\" : phone , \"reference\" : reference } url = self . _url ( \"/charge/submit_phone\" ) return self . _handle_request ( \"POST\" , url , payload ) submit_pin ( pin , reference ) Submit PIN to continue a charge Parameters str PIN submitted by user str Reference for transaction that requested pin Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/charge.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def submit_pin ( self , pin : str , reference : str ) -> Response : \"\"\"Submit PIN to continue a charge Parameters ---------- pin: str PIN submitted by user reference: str Reference for transaction that requested pin Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"pin\" : pin , \"reference\" : reference } url = self . _url ( \"/charge/submit_pin\" ) return self . _handle_request ( \"POST\" , url , payload ) ControlPanel Bases: BaseAPI Provides a wrapper for paystack Control Panel API The Control Panel API allows you manage some settings on your integration. https://paystack.com/docs/api/#control-panel Source code in pypaystack2/api/control_panel.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class ControlPanel ( BaseAPI ): \"\"\"Provides a wrapper for paystack Control Panel API The Control Panel API allows you manage some settings on your integration. https://paystack.com/docs/api/#control-panel \"\"\" def get_payment_session_timeout ( self ) -> Response : \"\"\"Fetch the payment session timeout on your integration Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/integration/payment_session_timeout\" ) return self . _handle_request ( \"GET\" , url ) def update_payment_session_timeout ( self , timeout : int ) -> Response : \"\"\"Update the payment session timeout on your integration Parameters ---------- timeout: int Time before stopping session (in seconds). Set to 0 to cancel session timeouts Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"timeout\" : timeout } url = self . _url ( \"/integration/payment_session_timeout\" ) return self . _handle_request ( \"PUT\" , url , payload ) get_payment_session_timeout () Fetch the payment session timeout on your integration Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/control_panel.py 11 12 13 14 15 16 17 18 19 20 21 def get_payment_session_timeout ( self ) -> Response : \"\"\"Fetch the payment session timeout on your integration Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/integration/payment_session_timeout\" ) return self . _handle_request ( \"GET\" , url ) update_payment_session_timeout ( timeout ) Update the payment session timeout on your integration Parameters int Time before stopping session (in seconds). Set to 0 to cancel session timeouts Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/control_panel.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def update_payment_session_timeout ( self , timeout : int ) -> Response : \"\"\"Update the payment session timeout on your integration Parameters ---------- timeout: int Time before stopping session (in seconds). Set to 0 to cancel session timeouts Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"timeout\" : timeout } url = self . _url ( \"/integration/payment_session_timeout\" ) return self . _handle_request ( \"PUT\" , url , payload ) Customer Bases: BaseAPI Provides a wrapper for paystack Customer API The Customers API allows you to create and manage customers on your integration. https://paystack.com/docs/api/#customer Source code in pypaystack2/api/customers.pyclass Customer ( BaseAPI ): \"\"\"Provides a wrapper for paystack Customer API The Customers API allows you to create and manage customers on your integration. https://paystack.com/docs/api/#customer \"\"\" def create ( self , email : str , first_name : Optional [ str ] = None , last_name : Optional [ str ] = None , phone : Optional [ str ] = None , metadata : Optional [ dict [ str , Any ]] = None , ) -> Response : \"\"\"Create a customer on your integration Parameters ---------- email: str Customer's email address first_name: Optional[str] Customer's first name last_name: Optional[str] Customer's last name phone: Optional[str] Customer's phone number metadata: Optional[dict[str,Any]] A dictionary that you can attach to the customer. It can be used to store additional information in a structured format. Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- The `first_name`, `last_name` and `phone` are optional parameters. However, when creating a customer that would be assigned a Dedicated Virtual Account and your business catgeory falls under Betting, Financial services, and General Service, then these parameters become compulsory. \"\"\" url = self . _url ( \"/customer/\" ) payload = { \"email\" : email , } optional_params = ( ( \"first_name\" , first_name ), ( \"last_name\" , last_name ), ( \"phone\" , phone , ), ( \"metadata\" , metadata ), ) payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_customers ( self , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , page = 1 , pagination : int = 50 , ) -> Response : \"\"\"Fetches customers available on your integration. Parameters ---------- start_date: Optional[str] A timestamp from which to start listing customers e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing customers e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = self . _url ( f \"/customer/?perPage= { pagination } \" ) url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_customer ( self , email_or_code : str ) -> Response : \"\"\"Get details of a customer on your integration. Parameters ---------- email_or_code: str An email or customer code for the customer you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/customer/ { email_or_code } /\" ) return self . _handle_request ( \"GET\" , url ) def update ( self , code : str , first_name : str , last_name : str , phone : Optional [ str ] = None , metadata : Optional [ dict [ str , Any ]] = None , ) -> Response : \"\"\"Update a customer's details on your integration Parameters ---------- code: str Customer's code first_name: str Customer's first name last_name: str Customer's last name phone: Optional[str] Customer's phone number metadata: Optional[dict[str, Any]] A dictionary that you can attach to the customer. It can be used to store additional information in a structured format. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/customer/ { code } /\" ) payload = { \"first_name\" : first_name , \"last_name\" : last_name , } optional_params = [ ( \"phone\" , phone , ), ( \"metadata\" , metadata ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload ) def validate ( self , code : str , first_name : str , last_name : str , identification_type : Identification , identification_number : str , country : Country , bvn : str , bank_code : Optional [ str ] = None , account_number : Optional [ str ] = None , middle_name : Optional [ str ] = None , ) -> Response : \"\"\"Validate a customer's identity Parameters ---------- code: str Customer's code first_name: str Customer's first name last_name: str Customer's last name identification_type: Identification Enum of Identification e.g `Identification.BVN` identification_number: str country: Country Enum of Country e.g `Country.NIGERIA` bvn: str Customer's Bank Verification Number bank_code: Optional[str] You can get the list of Bank Codes by calling the Miscellaneous API `get_banks` method. (required if type is bank_account) account_number: Optional[str] Customer's bank account number. (required if type is bank_account) middle_name: Optional[str] Customer's middle name Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if identification_type == Identification . BANK_ACCOUNT : if bank_code is None : raise InvalidDataError ( \"`bank_code` is required if identification type is `Identification.BANK_ACCOUNT`\" ) if account_number is None : raise InvalidDataError ( \"`account_number` is required if identification type is `Identification.BANK_ACCOUNT`\" ) url = self . _url ( f \"/customer/ { code } /identification\" ) payload = { \"first_name\" : first_name , \"last_name\" : last_name , \"type\" : identification_type , \"value\" : identification_number , \"country\" : country , \"bvn\" : bvn , } optional_params = ( ( \"bank_code\" , bank_code ), ( \"account_number\" , account_number ), ( \"middle_name\" , middle_name ), ) payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def flag ( self , customer : str , risk_action : Optional [ RiskAction ] = None , ) -> Response : \"\"\"Whitelist or blacklist a customer on your integration Parameters ---------- customer: str Customer's code, or email address risk_action: Optional[RiskAction] One of the possible risk actions from the RiskAction enum e.g `RiskAction.DEFAULT` Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/customer/set_risk_action\" ) payload = { \"customer\" : customer , } optional_params = (( \"risk_action\" , risk_action ),) payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def deactivate ( self , auth_code : str , ) -> Response : \"\"\"Deactivate an authorization when the card needs to be forgotten Parameters ---------- auth_code: str Authorization code to be deactivated Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/customer/deactivate_authorization\" ) payload = { \"authorization_code\" : auth_code , } return self . _handle_request ( \"POST\" , url , payload ) create ( email , first_name = None , last_name = None , phone = None , metadata = None ) Create a customer on your integration Parameters str Customer's email address Optional[str] Customer's first name Optional[str] Customer's last name Optional[str] Customer's phone number Optional[dict[str,Any]] A dictionary that you can attach to the customer. It can be used to store additional information in a structured format. Returns Response A named tuple containing the response gotten from paystack's server. Note The first_name , last_name and phone are optional parameters. However, when creating a customer that would be assigned a Dedicated Virtual Account and your business catgeory falls under Betting, Financial services, and General Service, then these parameters become compulsory. Source code in pypaystack2/api/customers.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def create ( self , email : str , first_name : Optional [ str ] = None , last_name : Optional [ str ] = None , phone : Optional [ str ] = None , metadata : Optional [ dict [ str , Any ]] = None , ) -> Response : \"\"\"Create a customer on your integration Parameters ---------- email: str Customer's email address first_name: Optional[str] Customer's first name last_name: Optional[str] Customer's last name phone: Optional[str] Customer's phone number metadata: Optional[dict[str,Any]] A dictionary that you can attach to the customer. It can be used to store additional information in a structured format. Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- The `first_name`, `last_name` and `phone` are optional parameters. However, when creating a customer that would be assigned a Dedicated Virtual Account and your business catgeory falls under Betting, Financial services, and General Service, then these parameters become compulsory. \"\"\" url = self . _url ( \"/customer/\" ) payload = { \"email\" : email , } optional_params = ( ( \"first_name\" , first_name ), ( \"last_name\" , last_name ), ( \"phone\" , phone , ), ( \"metadata\" , metadata ), ) payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) deactivate ( auth_code ) Deactivate an authorization when the card needs to be forgotten Parameters str Authorization code to be deactivated Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/customers.py 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 def deactivate ( self , auth_code : str , ) -> Response : \"\"\"Deactivate an authorization when the card needs to be forgotten Parameters ---------- auth_code: str Authorization code to be deactivated Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/customer/deactivate_authorization\" ) payload = { \"authorization_code\" : auth_code , } return self . _handle_request ( \"POST\" , url , payload ) flag ( customer , risk_action = None ) Whitelist or blacklist a customer on your integration Parameters str Customer's code, or email address Optional[RiskAction] One of the possible risk actions from the RiskAction enum e.g RiskAction.DEFAULT Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/customers.py 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 def flag ( self , customer : str , risk_action : Optional [ RiskAction ] = None , ) -> Response : \"\"\"Whitelist or blacklist a customer on your integration Parameters ---------- customer: str Customer's code, or email address risk_action: Optional[RiskAction] One of the possible risk actions from the RiskAction enum e.g `RiskAction.DEFAULT` Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/customer/set_risk_action\" ) payload = { \"customer\" : customer , } optional_params = (( \"risk_action\" , risk_action ),) payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) get_customer ( email_or_code ) Get details of a customer on your integration. Parameters str An email or customer code for the customer you want to fetch Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/customers.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def get_customer ( self , email_or_code : str ) -> Response : \"\"\"Get details of a customer on your integration. Parameters ---------- email_or_code: str An email or customer code for the customer you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/customer/ { email_or_code } /\" ) return self . _handle_request ( \"GET\" , url ) get_customers ( start_date = None , end_date = None , page = 1 , pagination = 50 ) Fetches customers available on your integration. Parameters Optional[str] A timestamp from which to start listing customers e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing customers e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/customers.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def get_customers ( self , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , page = 1 , pagination : int = 50 , ) -> Response : \"\"\"Fetches customers available on your integration. Parameters ---------- start_date: Optional[str] A timestamp from which to start listing customers e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing customers e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = self . _url ( f \"/customer/?perPage= { pagination } \" ) url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) update ( code , first_name , last_name , phone = None , metadata = None ) Update a customer's details on your integration Parameters str Customer's code str Customer's first name str Customer's last name Optional[str] Customer's phone number Optional[dict[str, Any]] A dictionary that you can attach to the customer. It can be used to store additional information in a structured format. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/customers.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 def update ( self , code : str , first_name : str , last_name : str , phone : Optional [ str ] = None , metadata : Optional [ dict [ str , Any ]] = None , ) -> Response : \"\"\"Update a customer's details on your integration Parameters ---------- code: str Customer's code first_name: str Customer's first name last_name: str Customer's last name phone: Optional[str] Customer's phone number metadata: Optional[dict[str, Any]] A dictionary that you can attach to the customer. It can be used to store additional information in a structured format. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/customer/ { code } /\" ) payload = { \"first_name\" : first_name , \"last_name\" : last_name , } optional_params = [ ( \"phone\" , phone , ), ( \"metadata\" , metadata ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload ) validate ( code , first_name , last_name , identification_type , identification_number , country , bvn , bank_code = None , account_number = None , middle_name = None ) Validate a customer's identity Parameters str Customer's code str Customer's first name str Customer's last name Identification Enum of Identification e.g Identification.BVN identification_number: str Country Enum of Country e.g Country.NIGERIA str Customer's Bank Verification Number Optional[str] You can get the list of Bank Codes by calling the Miscellaneous API get_banks method. (required if type is bank_account) Optional[str] Customer's bank account number. (required if type is bank_account) Optional[str] Customer's middle name Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/customers.py 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 def validate ( self , code : str , first_name : str , last_name : str , identification_type : Identification , identification_number : str , country : Country , bvn : str , bank_code : Optional [ str ] = None , account_number : Optional [ str ] = None , middle_name : Optional [ str ] = None , ) -> Response : \"\"\"Validate a customer's identity Parameters ---------- code: str Customer's code first_name: str Customer's first name last_name: str Customer's last name identification_type: Identification Enum of Identification e.g `Identification.BVN` identification_number: str country: Country Enum of Country e.g `Country.NIGERIA` bvn: str Customer's Bank Verification Number bank_code: Optional[str] You can get the list of Bank Codes by calling the Miscellaneous API `get_banks` method. (required if type is bank_account) account_number: Optional[str] Customer's bank account number. (required if type is bank_account) middle_name: Optional[str] Customer's middle name Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if identification_type == Identification . BANK_ACCOUNT : if bank_code is None : raise InvalidDataError ( \"`bank_code` is required if identification type is `Identification.BANK_ACCOUNT`\" ) if account_number is None : raise InvalidDataError ( \"`account_number` is required if identification type is `Identification.BANK_ACCOUNT`\" ) url = self . _url ( f \"/customer/ { code } /identification\" ) payload = { \"first_name\" : first_name , \"last_name\" : last_name , \"type\" : identification_type , \"value\" : identification_number , \"country\" : country , \"bvn\" : bvn , } optional_params = ( ( \"bank_code\" , bank_code ), ( \"account_number\" , account_number ), ( \"middle_name\" , middle_name ), ) payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) DedicatedAccount Bases: BaseAPI Provides a wrapper for paystack Dedicated Virtual Account API The Dedicated Virtual Account API enables Nigerian merchants to manage unique payment accounts of their customers. https://paystack.com/docs/api/#dedicated-virtual-account Note This feature is only available to businesses in Nigeria. Source code in pypaystack2/api/dedicated_accounts.pyclass DedicatedAccount ( BaseAPI ): \"\"\"Provides a wrapper for paystack Dedicated Virtual Account API The Dedicated Virtual Account API enables Nigerian merchants to manage unique payment accounts of their customers. https://paystack.com/docs/api/#dedicated-virtual-account Note ---- This feature is only available to businesses in Nigeria. \"\"\" def create ( self , customer : str , preferred_bank : Optional [ str ] = None , subaccount : Optional [ str ] = None , split_code : Optional [ str ] = None , first_name : Optional [ str ] = None , last_name : Optional [ str ] = None , phone : Optional [ str ] = None , ) -> Response : \"\"\"Create a dedicated virtual account and assign to a customer Parameters ---------- customer: str Customer ID or code preferred_bank: Optional[str] The bank slug for preferred bank. To get a list of available banks, use the Miscellaneous API ``.get_providers`` method. subaccount: Optional[str] Subaccount code of the account you want to split the transaction with split_code: Optional[str] Split code consisting of the lists of accounts you want to split the transaction with first_name: Optional[str] Customer's first name last_name: Optional[str] Customer's last name phone: Optional[str] Customer's phone number Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( \"/dedicated_account\" ) payload = { \"customer\" : customer , } optional_params = ( ( \"preferred_bank\" , preferred_bank ), ( \"subaccount\" , subaccount ), ( \"split_code\" , split_code ), ( \"first_name\" , first_name ), ( \"last_name\" , last_name ), ( \"phone\" , phone ), ) payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_dedicated_accounts ( self , active = True , currency = Currency . NGN , provider_slug : Optional [ str ] = None , bank_id : Optional [ str ] = None , customer : Optional [ str ] = None , ) -> Response : \"\"\"Fetches dedicated virtual accounts available on your integration. Parameters ---------- active: bool Status of the dedicated virtual account currency: Currency The currency of the dedicated virtual account. Only ``Currency.NGN`` is currently allowed provider_slug: Optional[str] The bank's slug in lowercase, without spaces e.g. wema-bank bank_id: Optional[str] The bank's ID e.g. 035 customer: Optional[str] The customer's ID Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" query_params = [ ( \"currency\" , currency ), ( \"provider_slug\" , provider_slug ), ( \"bank_id\" , bank_id ), ( \"customer\" , customer ), ] url = self . _url ( f \"/dedicated_account?active= { active } \" ) url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_dedicated_account ( self , dedicated_account_id : int ) -> Response : \"\"\"Get details of a dedicated virtual account on your integration. Parameters ---------- dedicated_account_id: int ID of dedicated virtual account Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/ { dedicated_account_id } \" ) return self . _handle_request ( \"GET\" , url ) def requery ( self , account_number : str , provider_slug : str , date : Optional [ str ] ) -> Response : \"\"\"Get details of a dedicated virtual account on your integration. Parameters ---------- account_number: str Virtual account number to requery provider_slug: str The bank's slug in lowercase, without spaces e.g. wema-bank date: Optional[str] The day the transfer was made in YYYY-MM-DD ISO format Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account?account_number= { account_number } \" ) query_params = [ ( \"provider_slug\" , provider_slug ), ( \"date\" , date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def deactivate ( self , dedicated_account_id : int ) -> Response : \"\"\"Deactivate a dedicated virtual account on your integration. Parameters ---------- dedicated_account_id: int ID of dedicated virtual account Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/ { dedicated_account_id } \" ) return self . _handle_request ( \"DELETE\" , url ) def split ( self , customer : str , subaccount : Optional [ str ] = None , split_code : Optional [ str ] = None , preferred_bank : Optional [ str ] = None , ) -> Response : \"\"\"Split a dedicated virtual account transaction with one or more accounts Parameters ---------- customer: str Customer ID or code subaccount: Optional[str] Subaccount code of the account you want to split the transaction with split_code: Optional[str] Split code consisting of the lists of accounts you want to split the transaction with preferred_bank: Optional[str] The bank slug for preferred bank. To get a list of available banks, use the Miscellaneous API ``.get_providers`` method Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/split\" ) payload = { \"customer\" : customer } optional_params = [ ( \"subaccount\" , subaccount ), ( \"split_code\" , split_code ), ( \"preferred_bank\" , preferred_bank ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def remove_split ( self , account_number : str ) -> Response : \"\"\" If you've previously set up split payment for transactions on a dedicated virtual account, you can remove it with this method Parameters ---------- account_number: str Dedicated virtual account number Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/split\" ) payload = { \"account_number\" : account_number , } return self . _handle_request ( \"DELETE\" , url , payload ) def get_providers ( self ) -> Response : \"\"\"Get available bank providers for a dedicated virtual account Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank` as the `preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/available_providers\" ) return self . _handle_request ( \"GET\" , url ) create ( customer , preferred_bank = None , subaccount = None , split_code = None , first_name = None , last_name = None , phone = None ) Create a dedicated virtual account and assign to a customer Parameters str Customer ID or code Optional[str] The bank slug for preferred bank. To get a list of available banks, use the Miscellaneous API .get_providers method. Optional[str] Subaccount code of the account you want to split the transaction with Optional[str] Split code consisting of the lists of accounts you want to split the transaction with Optional[str] Customer's first name Optional[str] Customer's last name Optional[str] Customer's phone number Returns Response A named tuple containing the response gotten from paystack's server. Note This feature is only available to businesses in Nigeria. Paystack currently supports Access Bank and Wema Bank. To create Dedicated Virtual Accounts using your test secret key, use test-bank as the preferred_bank You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ Source code in pypaystack2/api/dedicated_accounts.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def create ( self , customer : str , preferred_bank : Optional [ str ] = None , subaccount : Optional [ str ] = None , split_code : Optional [ str ] = None , first_name : Optional [ str ] = None , last_name : Optional [ str ] = None , phone : Optional [ str ] = None , ) -> Response : \"\"\"Create a dedicated virtual account and assign to a customer Parameters ---------- customer: str Customer ID or code preferred_bank: Optional[str] The bank slug for preferred bank. To get a list of available banks, use the Miscellaneous API ``.get_providers`` method. subaccount: Optional[str] Subaccount code of the account you want to split the transaction with split_code: Optional[str] Split code consisting of the lists of accounts you want to split the transaction with first_name: Optional[str] Customer's first name last_name: Optional[str] Customer's last name phone: Optional[str] Customer's phone number Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( \"/dedicated_account\" ) payload = { \"customer\" : customer , } optional_params = ( ( \"preferred_bank\" , preferred_bank ), ( \"subaccount\" , subaccount ), ( \"split_code\" , split_code ), ( \"first_name\" , first_name ), ( \"last_name\" , last_name ), ( \"phone\" , phone ), ) payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) deactivate ( dedicated_account_id ) Deactivate a dedicated virtual account on your integration. Parameters int ID of dedicated virtual account Returns Response A named tuple containing the response gotten from paystack's server. Note This feature is only available to businesses in Nigeria. Paystack currently supports Access Bank and Wema Bank. To create Dedicated Virtual Accounts using your test secret key, use test-bank as the preferred_bank You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ Source code in pypaystack2/api/dedicated_accounts.py 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 def deactivate ( self , dedicated_account_id : int ) -> Response : \"\"\"Deactivate a dedicated virtual account on your integration. Parameters ---------- dedicated_account_id: int ID of dedicated virtual account Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/ { dedicated_account_id } \" ) return self . _handle_request ( \"DELETE\" , url ) get_dedicated_account ( dedicated_account_id ) Get details of a dedicated virtual account on your integration. Parameters dedicated_account_id: int ID of dedicated virtual account Returns Response A named tuple containing the response gotten from paystack's server. Note This feature is only available to businesses in Nigeria. Paystack currently supports Access Bank and Wema Bank. To create Dedicated Virtual Accounts using your test secret key, use test-bank as the preferred_bank You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ Source code in pypaystack2/api/dedicated_accounts.py 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 def get_dedicated_account ( self , dedicated_account_id : int ) -> Response : \"\"\"Get details of a dedicated virtual account on your integration. Parameters ---------- dedicated_account_id: int ID of dedicated virtual account Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/ { dedicated_account_id } \" ) return self . _handle_request ( \"GET\" , url ) get_dedicated_accounts ( active = True , currency = Currency . NGN , provider_slug = None , bank_id = None , customer = None ) Fetches dedicated virtual accounts available on your integration. Parameters bool Status of the dedicated virtual account Currency The currency of the dedicated virtual account. Only Currency.NGN is currently allowed Optional[str] The bank's slug in lowercase, without spaces e.g. wema-bank Optional[str] The bank's ID e.g. 035 Optional[str] The customer's ID Returns Response A named tuple containing the response gotten from paystack's server. Note This feature is only available to businesses in Nigeria. Paystack currently supports Access Bank and Wema Bank. To create Dedicated Virtual Accounts using your test secret key, use test-bank as the preferred_bank You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ Source code in pypaystack2/api/dedicated_accounts.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 def get_dedicated_accounts ( self , active = True , currency = Currency . NGN , provider_slug : Optional [ str ] = None , bank_id : Optional [ str ] = None , customer : Optional [ str ] = None , ) -> Response : \"\"\"Fetches dedicated virtual accounts available on your integration. Parameters ---------- active: bool Status of the dedicated virtual account currency: Currency The currency of the dedicated virtual account. Only ``Currency.NGN`` is currently allowed provider_slug: Optional[str] The bank's slug in lowercase, without spaces e.g. wema-bank bank_id: Optional[str] The bank's ID e.g. 035 customer: Optional[str] The customer's ID Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" query_params = [ ( \"currency\" , currency ), ( \"provider_slug\" , provider_slug ), ( \"bank_id\" , bank_id ), ( \"customer\" , customer ), ] url = self . _url ( f \"/dedicated_account?active= { active } \" ) url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) get_providers () Get available bank providers for a dedicated virtual account Returns Response A named tuple containing the response gotten from paystack's server. Note This feature is only available to businesses in Nigeria. Paystack currently supports Access Bank and Wema Bank. To create Dedicated Virtual Accounts using your test secret key, use test-bank` as the `preferred_bank You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ Source code in pypaystack2/api/dedicated_accounts.py 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 def get_providers ( self ) -> Response : \"\"\"Get available bank providers for a dedicated virtual account Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank` as the `preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/available_providers\" ) return self . _handle_request ( \"GET\" , url ) remove_split ( account_number ) If you've previously set up split payment for transactions on a dedicated virtual account, you can remove it with this method Parameters str Dedicated virtual account number Returns Response A named tuple containing the response gotten from paystack's server. Note This feature is only available to businesses in Nigeria. Paystack currently supports Access Bank and Wema Bank. To create Dedicated Virtual Accounts using your test secret key, use test-bank as the preferred_bank You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ Source code in pypaystack2/api/dedicated_accounts.py 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 def remove_split ( self , account_number : str ) -> Response : \"\"\" If you've previously set up split payment for transactions on a dedicated virtual account, you can remove it with this method Parameters ---------- account_number: str Dedicated virtual account number Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/split\" ) payload = { \"account_number\" : account_number , } return self . _handle_request ( \"DELETE\" , url , payload ) requery ( account_number , provider_slug , date ) Get details of a dedicated virtual account on your integration. Parameters str Virtual account number to requery str The bank's slug in lowercase, without spaces e.g. wema-bank Optional[str] The day the transfer was made in YYYY-MM-DD ISO format Returns Response A named tuple containing the response gotten from paystack's server. Note This feature is only available to businesses in Nigeria. Paystack currently supports Access Bank and Wema Bank. To create Dedicated Virtual Accounts using your test secret key, use test-bank as the preferred_bank You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ Source code in pypaystack2/api/dedicated_accounts.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 def requery ( self , account_number : str , provider_slug : str , date : Optional [ str ] ) -> Response : \"\"\"Get details of a dedicated virtual account on your integration. Parameters ---------- account_number: str Virtual account number to requery provider_slug: str The bank's slug in lowercase, without spaces e.g. wema-bank date: Optional[str] The day the transfer was made in YYYY-MM-DD ISO format Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account?account_number= { account_number } \" ) query_params = [ ( \"provider_slug\" , provider_slug ), ( \"date\" , date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) split ( customer , subaccount = None , split_code = None , preferred_bank = None ) Split a dedicated virtual account transaction with one or more accounts Parameters str Customer ID or code Optional[str] Subaccount code of the account you want to split the transaction with Optional[str] Split code consisting of the lists of accounts you want to split the transaction with Optional[str] The bank slug for preferred bank. To get a list of available banks, use the Miscellaneous API .get_providers method Returns Response A named tuple containing the response gotten from paystack's server. Note This feature is only available to businesses in Nigeria. Paystack currently supports Access Bank and Wema Bank. To create Dedicated Virtual Accounts using your test secret key, use test-bank as the preferred_bank You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ Source code in pypaystack2/api/dedicated_accounts.py 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 def split ( self , customer : str , subaccount : Optional [ str ] = None , split_code : Optional [ str ] = None , preferred_bank : Optional [ str ] = None , ) -> Response : \"\"\"Split a dedicated virtual account transaction with one or more accounts Parameters ---------- customer: str Customer ID or code subaccount: Optional[str] Subaccount code of the account you want to split the transaction with split_code: Optional[str] Split code consisting of the lists of accounts you want to split the transaction with preferred_bank: Optional[str] The bank slug for preferred bank. To get a list of available banks, use the Miscellaneous API ``.get_providers`` method Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/split\" ) payload = { \"customer\" : customer } optional_params = [ ( \"subaccount\" , subaccount ), ( \"split_code\" , split_code ), ( \"preferred_bank\" , preferred_bank ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) Dispute Bases: BaseAPI Provides a wrapper for paystack Disputes API The Disputes API allows you manage transaction disputes on your integration. https://paystack.com/docs/api/#dispute Source code in pypaystack2/api/disputes.pyclass Dispute ( BaseAPI ): \"\"\"Provides a wrapper for paystack Disputes API The Disputes API allows you manage transaction disputes on your integration. https://paystack.com/docs/api/#dispute \"\"\" def get_disputes ( self , start_date : str , end_date : str , pagination = 50 , page = 1 , transaction : Optional [ str ] = None , status : Optional [ DisputeStatus ] = None , ) -> Response : \"\"\"Fetches disputes filed against you Parameters ---------- start_date: str A timestamp from which to start listing dispute e.g. 2016-09-21 end_date: str A timestamp at which to stop listing dispute e.g. 2016-09-21 pagination : int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what dispute you want to page. If not specify we use a default value of 1. transaction: Optional[str] Transaction Id status: Optional[DisputeStatus] Any of DisputeStatus enum values. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"transaction\" , transaction ), ( \"status\" , status ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_dispute ( self , id : str ) -> Response : \"\"\"Get more details about a dispute. Parameters ---------- id: str The dispute ID you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute/ { id } \" ) return self . _handle_request ( \"GET\" , url ) def get_transaction_disputes ( self , id : str ) -> Response : \"\"\"This method retrieves disputes for a particular transaction Parameters ---------- id: str The transaction ID you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute/transaction/ { id } \" ) return self . _handle_request ( \"GET\" , url ) def update_dispute ( self , id : str , refund_amount : int , uploaded_filename : Optional [ str ] ) -> Response : \"\"\"Update details of a dispute on your integration Parameters ---------- id: str Dispute ID refund_amount: int the amount to refund, in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR uploaded_filename: Optional[str] filename of attachment returned via response from upload url(GET /dispute/:id/upload_url) Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" refund_amount = validate_amount ( refund_amount ) payload = { \"refund_amount\" : refund_amount } payload = add_to_payload ([( \"uploaded_filename\" , uploaded_filename )], payload ) url = self . _url ( f \"/dispute/ { id } \" ) return self . _handle_request ( \"PUT\" , url , payload ) def add_evidence ( self , id : str , customer_email : str , customer_name : str , customer_phone : str , service_details : str , delivery_address : Optional [ str ] = None , delivery_date : Optional [ str ] = None , ) -> Response : \"\"\"Provide evidence for a dispute Parameters ---------- id: str Dispute ID customer_email: str Customer email customer_name: str Customer name customer_phone: str Customer phone service_details: str Details of service involved delivery_address: Optional[str] Delivery Address delivery_date: Optional[str] ISO 8601 representation of delivery date (YYYY-MM-DD) Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"customer_email\" : customer_email , \"customer_name\" : customer_name , \"customer_phone\" : customer_phone , \"service_details\" : service_details , } optional_params = [ ( \"delivery_address\" , delivery_address ), ( \"delivery_date\" , delivery_date ), ] payload = add_to_payload ( optional_params , payload ) url = self . _url ( f \"dispute/ { id } /evidence\" ) return self . _handle_request ( \"POST\" , url , payload ) def get_upload_URL ( self , id : str , upload_filename : str ) -> Response : \"\"\"Get URL to upload a dispute evidence. Parameters ---------- id: str Dispute Id upload_filename: str The file name, with its extension, that you want to upload. e.g. filename.pdf Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute/ { id } /upload_url?upload_filename= { upload_filename } \" ) return self . _handle_request ( \"GET\" , url ) def resolve_dispute ( self , id : str , resolution : Resolution , message : str , refund_amount : int , uploaded_filename : str , evidence : Optional [ int ] = None , ) -> Response : \"\"\"Resolve a dispute on your integration Parameters ---------- id: str Dispute ID resolution: Resolution Any of the Resolution enum value. message: str Reason for resolving refund_amount: int the amount to refund, in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR uploaded_filename: str filename of attachment returned via response from upload url(GET /dispute/:id/upload_url) evidence: Optional[int] Evidence ID for fraud claims Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" refund_amount = validate_amount ( refund_amount ) payload = { \"resolution\" : resolution , \"message\" : message , \"refund_amount\" : refund_amount , \"uploaded_filename\" : uploaded_filename , } payload = add_to_payload ([( \"evidence\" , evidence )], payload ) url = self . _url ( f \"/dispute/ { id } /resolve\" ) return self . _handle_request ( \"PUT\" , url , payload ) def export_disputes ( self , start_date : str , end_date : str , pagination = 50 , page = 1 , transaction : Optional [ str ] = None , status : Optional [ DisputeStatus ] = None , ) -> Response : \"\"\"Export disputes available on your integration. Parameters ---------- start_date: str A timestamp from which to start listing dispute e.g. 2016-09-21 end_date: str A timestamp at which to stop listing dispute e.g. 2016-09-21 pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what dispute you want to page. If not specify we use a default value of 1. transaction: Optional[str] Transaction Id status: Optional[DisputeStatus] Any value from the DisputeStatus enum Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute/export?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"transaction\" , transaction ), ( \"status\" , status ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) add_evidence ( id , customer_email , customer_name , customer_phone , service_details , delivery_address = None , delivery_date = None ) Provide evidence for a dispute Parameters str Dispute ID str Customer email str Customer name str Customer phone str Details of service involved Optional[str] Delivery Address Optional[str] ISO 8601 representation of delivery date (YYYY-MM-DD) Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/disputes.py 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 def add_evidence ( self , id : str , customer_email : str , customer_name : str , customer_phone : str , service_details : str , delivery_address : Optional [ str ] = None , delivery_date : Optional [ str ] = None , ) -> Response : \"\"\"Provide evidence for a dispute Parameters ---------- id: str Dispute ID customer_email: str Customer email customer_name: str Customer name customer_phone: str Customer phone service_details: str Details of service involved delivery_address: Optional[str] Delivery Address delivery_date: Optional[str] ISO 8601 representation of delivery date (YYYY-MM-DD) Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"customer_email\" : customer_email , \"customer_name\" : customer_name , \"customer_phone\" : customer_phone , \"service_details\" : service_details , } optional_params = [ ( \"delivery_address\" , delivery_address ), ( \"delivery_date\" , delivery_date ), ] payload = add_to_payload ( optional_params , payload ) url = self . _url ( f \"dispute/ { id } /evidence\" ) return self . _handle_request ( \"POST\" , url , payload ) export_disputes ( start_date , end_date , pagination = 50 , page = 1 , transaction = None , status = None ) Export disputes available on your integration. Parameters str A timestamp from which to start listing dispute e.g. 2016-09-21 str A timestamp at which to stop listing dispute e.g. 2016-09-21 int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. int Specify exactly what dispute you want to page. If not specify we use a default value of 1. Optional[str] Transaction Id Optional[DisputeStatus] Any value from the DisputeStatus enum Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/disputes.py 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 def export_disputes ( self , start_date : str , end_date : str , pagination = 50 , page = 1 , transaction : Optional [ str ] = None , status : Optional [ DisputeStatus ] = None , ) -> Response : \"\"\"Export disputes available on your integration. Parameters ---------- start_date: str A timestamp from which to start listing dispute e.g. 2016-09-21 end_date: str A timestamp at which to stop listing dispute e.g. 2016-09-21 pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what dispute you want to page. If not specify we use a default value of 1. transaction: Optional[str] Transaction Id status: Optional[DisputeStatus] Any value from the DisputeStatus enum Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute/export?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"transaction\" , transaction ), ( \"status\" , status ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) get_dispute ( id ) Get more details about a dispute. Parameters str The dispute ID you want to fetch Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/disputes.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def get_dispute ( self , id : str ) -> Response : \"\"\"Get more details about a dispute. Parameters ---------- id: str The dispute ID you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute/ { id } \" ) return self . _handle_request ( \"GET\" , url ) get_disputes ( start_date , end_date , pagination = 50 , page = 1 , transaction = None , status = None ) Fetches disputes filed against you Parameters str A timestamp from which to start listing dispute e.g. 2016-09-21 str A timestamp at which to stop listing dispute e.g. 2016-09-21 int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. int Specify exactly what dispute you want to page. If not specify we use a default value of 1. Optional[str] Transaction Id Optional[DisputeStatus] Any of DisputeStatus enum values. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/disputes.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def get_disputes ( self , start_date : str , end_date : str , pagination = 50 , page = 1 , transaction : Optional [ str ] = None , status : Optional [ DisputeStatus ] = None , ) -> Response : \"\"\"Fetches disputes filed against you Parameters ---------- start_date: str A timestamp from which to start listing dispute e.g. 2016-09-21 end_date: str A timestamp at which to stop listing dispute e.g. 2016-09-21 pagination : int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what dispute you want to page. If not specify we use a default value of 1. transaction: Optional[str] Transaction Id status: Optional[DisputeStatus] Any of DisputeStatus enum values. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"transaction\" , transaction ), ( \"status\" , status ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) get_transaction_disputes ( id ) This method retrieves disputes for a particular transaction Parameters str The transaction ID you want to fetch Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/disputes.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def get_transaction_disputes ( self , id : str ) -> Response : \"\"\"This method retrieves disputes for a particular transaction Parameters ---------- id: str The transaction ID you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute/transaction/ { id } \" ) return self . _handle_request ( \"GET\" , url ) get_upload_URL ( id , upload_filename ) Get URL to upload a dispute evidence. Parameters str Dispute Id str The file name, with its extension, that you want to upload. e.g. filename.pdf Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/disputes.py 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 def get_upload_URL ( self , id : str , upload_filename : str ) -> Response : \"\"\"Get URL to upload a dispute evidence. Parameters ---------- id: str Dispute Id upload_filename: str The file name, with its extension, that you want to upload. e.g. filename.pdf Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute/ { id } /upload_url?upload_filename= { upload_filename } \" ) return self . _handle_request ( \"GET\" , url ) resolve_dispute ( id , resolution , message , refund_amount , uploaded_filename , evidence = None ) Resolve a dispute on your integration Parameters str Dispute ID Resolution Any of the Resolution enum value. str Reason for resolving int the amount to refund, in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR str filename of attachment returned via response from upload url(GET /dispute/:id/upload_url) Optional[int] Evidence ID for fraud claims Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/disputes.py 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 def resolve_dispute ( self , id : str , resolution : Resolution , message : str , refund_amount : int , uploaded_filename : str , evidence : Optional [ int ] = None , ) -> Response : \"\"\"Resolve a dispute on your integration Parameters ---------- id: str Dispute ID resolution: Resolution Any of the Resolution enum value. message: str Reason for resolving refund_amount: int the amount to refund, in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR uploaded_filename: str filename of attachment returned via response from upload url(GET /dispute/:id/upload_url) evidence: Optional[int] Evidence ID for fraud claims Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" refund_amount = validate_amount ( refund_amount ) payload = { \"resolution\" : resolution , \"message\" : message , \"refund_amount\" : refund_amount , \"uploaded_filename\" : uploaded_filename , } payload = add_to_payload ([( \"evidence\" , evidence )], payload ) url = self . _url ( f \"/dispute/ { id } /resolve\" ) return self . _handle_request ( \"PUT\" , url , payload ) update_dispute ( id , refund_amount , uploaded_filename ) Update details of a dispute on your integration Parameters str Dispute ID int the amount to refund, in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR Optional[str] filename of attachment returned via response from upload url(GET /dispute/:id/upload_url) Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/disputes.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 def update_dispute ( self , id : str , refund_amount : int , uploaded_filename : Optional [ str ] ) -> Response : \"\"\"Update details of a dispute on your integration Parameters ---------- id: str Dispute ID refund_amount: int the amount to refund, in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR uploaded_filename: Optional[str] filename of attachment returned via response from upload url(GET /dispute/:id/upload_url) Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" refund_amount = validate_amount ( refund_amount ) payload = { \"refund_amount\" : refund_amount } payload = add_to_payload ([( \"uploaded_filename\" , uploaded_filename )], payload ) url = self . _url ( f \"/dispute/ { id } \" ) return self . _handle_request ( \"PUT\" , url , payload ) Invoice Bases: BaseAPI Provides a wrapper for paystack Invoices API The Invoices API allows you to issue out and manage payment requests. https://paystack.com/docs/api/#invoice Source code in pypaystack2/api/invoices.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 class Invoice ( BaseAPI ): \"\"\"Provides a wrapper for paystack Invoices API The Invoices API allows you to issue out and manage payment requests. https://paystack.com/docs/api/#invoice \"\"\" def create ( self , customer : str , amount : int , due_date : Optional [ str ] = None , description : Optional [ str ] = None , line_items : Optional [ list [ dict [ str , Any ]]] = None , tax : Optional [ list [ dict [ str , Any ]]] = None , currency : Optional [ Currency ] = None , send_notification : Optional [ bool ] = None , draft : Optional [ bool ] = None , has_invoice : Optional [ bool ] = None , invoice_number : Optional [ int ] = None , split_code : Optional [ str ] = None , ) -> Response : \"\"\"Create an invoice for payment on your integration Parameters ---------- customer: str Customer id or code amount: int Payment request amount. It should be used when line items and tax values aren't specified. due_date: Optional[str] ISO 8601 representation of request due date description: Optional[str] A short description of the payment request line_items: Optional[list[dict[str,Any]]] List of line items int the format [{\"name\":\"item 1\", \"amount\":2000, \"quantity\": 1}] tax: Optional[list[dict[str,Any]]] List of taxes to be charged in the format [{\"name\":\"VAT\", \"amount\":2000}] currency: Optional[Currency] Any value from Currency enum. default ``Currency.NGN`` send_notification: Optional[bool] Indicates whether Paystack sends an email notification to customer. Defaults to ``True`` draft: Optional[bool] Indicate if request should be saved as draft. Defaults to ``False`` and overrides send_notification has_invoice: Optional[bool] Set to ``True`` to create a draft invoice (adds an auto incrementing invoice number if none is provided) even if there are no line_items or tax passed invoice_number: Optional[int] Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point. split_code: Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/paymentrequest\" ) payload = { \"customer\" : customer , \"amount\" : amount } optional_params = [ ( \"due_date\" , due_date ), ( \"description\" , description ), ( \"line_items\" , line_items ), ( \"tax\" , tax ), ( \"currency\" , currency ), ( \"send_notification\" , send_notification ), ( \"draft\" , draft ), ( \"has_invoice\" , has_invoice ), ( \"invoice_number\" , invoice_number ), ( \"split_code\" , split_code ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_invoices ( self , customer : str , status : InvoiceStatus , currency : Currency , include_archive = False , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetches the invoice available on your integration. Parameters ---------- customer: str Filter by customer ID status: InvoiceStatus Filter by invoice status. Any value from enum of ``InvoiceStatus`` currency: Currency Filter by currency. Any value from enum of ``Currency`` include_archive: bool Show archived invoices. page: int Specify exactly what invoice you want to page. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing invoice e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing invoice e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest?perPage= { pagination } \" ) query_params = [ ( \"customer\" , customer ), ( \"status\" , status ), ( \"currency\" , currency ), ( \"include_archive\" , include_archive ), ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_invoice ( self , id_or_code : str ) -> Response : \"\"\"Get details of an invoice on your integration. Parameters ---------- id_or_code: str The invoice ID or code you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) def verify_invoice ( self , code : str ) -> Response : \"\"\"Verify details of an invoice on your integration. Parameters ---------- code: str Invoice code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/verify/ { code } \" ) return self . _handle_request ( \"GET\" , url ) def send_notification ( self , code : str ) -> Response : \"\"\"Send notification of an invoice to your customers Parameters ---------- code: str Invoice code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/notify/ { code } \" ) return self . _handle_request ( \"POST\" , url ) def get_total ( self ) -> Response : \"\"\"Get invoice metrics for dashboard Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/totals\" ) return self . _handle_request ( \"GET\" , url ) def finalize_invoice ( self , code : str ) -> Response : \"\"\"Finalize a Draft Invoice Parameters ---------- code: str Invoice Code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/finalize/ { code } \" ) return self . _handle_request ( \"POST\" , url ) def update_invoice ( self , id_or_code : str , customer : str , amount : int , due_date : Optional [ str ] = None , description : Optional [ str ] = None , line_items : Optional [ list [ dict [ str , Any ]]] = None , tax : Optional [ list [ dict [ str , Any ]]] = None , currency : Optional [ Currency ] = None , send_notification : Optional [ bool ] = None , draft : Optional [ bool ] = None , invoice_number : Optional [ int ] = None , split_code : Optional [ str ] = None , ): \"\"\"Update an invoice details on your integration Parameters ---------- id_or_code: str Invoice ID or slug customer: str Customer id or code amount: int Payment request amount. Only useful if line items and tax values are ignored. method will throw a friendly warning in the response if neither is available. due_date: Optional[str] ISO 8601 representation of request due date description: Optional[str] A short description of the payment request line_items: Optional[list[dict[str,Any]]] List of line items in the format [{\"name\":\"item 1\", \"amount\":2000}] tax: Optional[list[dict[str,Any]]] List of taxes to be charged in the format [{\"name\":\"VAT\", \"amount\":2000}] currency: Optional[Currency] Specify the currency of the invoice. Any value from the ``Currency`` enum send_notification: Optional[bool] Indicates whether Paystack sends an email notification to customer. Defaults to ``True`` draft: Optional[bool] Indicate if request should be saved as draft. Defaults to false and overrides send_notification invoice_number: Optional[int] Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point. split_code: Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" amount = validate_amount ( amount ) url = self . _url ( f \"/paymentrequest/ { id_or_code } \" ) payload = { \"customer\" : customer , \"amount\" : amount , } optional_params = [ ( \"due_date\" , due_date ), ( \"description\" , description ), ( \"line_items\" , line_items ), ( \"tax\" , tax ), ( \"currency\" , currency ), ( \"send_notification\" , send_notification ), ( \"draft\" , draft ), ( \"invoice_number\" , invoice_number ), ( \"split_code\" , split_code ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload ) def archive_invoice ( self , code : str ): \"\"\"Used to archive an invoice. Invoice will no longer be fetched on list or returned on verify. Parameters ---------- code: str Invoice ID Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/archive/ { code } \" ) return self . _handle_request ( \"POST\" , url ) archive_invoice ( code ) Used to archive an invoice. Invoice will no longer be fetched on list or returned on verify. Parameters str Invoice ID Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 def archive_invoice ( self , code : str ): \"\"\"Used to archive an invoice. Invoice will no longer be fetched on list or returned on verify. Parameters ---------- code: str Invoice ID Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/archive/ { code } \" ) return self . _handle_request ( \"POST\" , url ) create ( customer , amount , due_date = None , description = None , line_items = None , tax = None , currency = None , send_notification = None , draft = None , has_invoice = None , invoice_number = None , split_code = None ) Create an invoice for payment on your integration Parameters str Customer id or code int Payment request amount. It should be used when line items and tax values aren't specified. Optional[str] ISO 8601 representation of request due date Optional[str] A short description of the payment request Optional[list[dict[str,Any]]] List of line items int the format [{\"name\":\"item 1\", \"amount\":2000, \"quantity\": 1}] Optional[list[dict[str,Any]]] List of taxes to be charged in the format [{\"name\":\"VAT\", \"amount\":2000}] Optional[Currency] Any value from Currency enum. default Currency.NGN Optional[bool] Indicates whether Paystack sends an email notification to customer. Defaults to True Optional[bool] Indicate if request should be saved as draft. Defaults to False and overrides send_notification Optional[bool] Set to True to create a draft invoice (adds an auto incrementing invoice number if none is provided) even if there are no line_items or tax passed Optional[int] Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point. Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 def create ( self , customer : str , amount : int , due_date : Optional [ str ] = None , description : Optional [ str ] = None , line_items : Optional [ list [ dict [ str , Any ]]] = None , tax : Optional [ list [ dict [ str , Any ]]] = None , currency : Optional [ Currency ] = None , send_notification : Optional [ bool ] = None , draft : Optional [ bool ] = None , has_invoice : Optional [ bool ] = None , invoice_number : Optional [ int ] = None , split_code : Optional [ str ] = None , ) -> Response : \"\"\"Create an invoice for payment on your integration Parameters ---------- customer: str Customer id or code amount: int Payment request amount. It should be used when line items and tax values aren't specified. due_date: Optional[str] ISO 8601 representation of request due date description: Optional[str] A short description of the payment request line_items: Optional[list[dict[str,Any]]] List of line items int the format [{\"name\":\"item 1\", \"amount\":2000, \"quantity\": 1}] tax: Optional[list[dict[str,Any]]] List of taxes to be charged in the format [{\"name\":\"VAT\", \"amount\":2000}] currency: Optional[Currency] Any value from Currency enum. default ``Currency.NGN`` send_notification: Optional[bool] Indicates whether Paystack sends an email notification to customer. Defaults to ``True`` draft: Optional[bool] Indicate if request should be saved as draft. Defaults to ``False`` and overrides send_notification has_invoice: Optional[bool] Set to ``True`` to create a draft invoice (adds an auto incrementing invoice number if none is provided) even if there are no line_items or tax passed invoice_number: Optional[int] Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point. split_code: Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/paymentrequest\" ) payload = { \"customer\" : customer , \"amount\" : amount } optional_params = [ ( \"due_date\" , due_date ), ( \"description\" , description ), ( \"line_items\" , line_items ), ( \"tax\" , tax ), ( \"currency\" , currency ), ( \"send_notification\" , send_notification ), ( \"draft\" , draft ), ( \"has_invoice\" , has_invoice ), ( \"invoice_number\" , invoice_number ), ( \"split_code\" , split_code ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) finalize_invoice ( code ) Finalize a Draft Invoice Parameters str Invoice Code Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 def finalize_invoice ( self , code : str ) -> Response : \"\"\"Finalize a Draft Invoice Parameters ---------- code: str Invoice Code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/finalize/ { code } \" ) return self . _handle_request ( \"POST\" , url ) get_invoice ( id_or_code ) Get details of an invoice on your integration. Parameters str The invoice ID or code you want to fetch Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 def get_invoice ( self , id_or_code : str ) -> Response : \"\"\"Get details of an invoice on your integration. Parameters ---------- id_or_code: str The invoice ID or code you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) get_invoices ( customer , status , currency , include_archive = False , page = 1 , pagination = 50 , start_date = None , end_date = None ) Fetches the invoice available on your integration. Parameters str Filter by customer ID InvoiceStatus Filter by invoice status. Any value from enum of InvoiceStatus Currency Filter by currency. Any value from enum of Currency bool Show archived invoices. int Specify exactly what invoice you want to page. If not specify we use a default value of 1. int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Optional[str] A timestamp from which to start listing invoice e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing invoice e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 def get_invoices ( self , customer : str , status : InvoiceStatus , currency : Currency , include_archive = False , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetches the invoice available on your integration. Parameters ---------- customer: str Filter by customer ID status: InvoiceStatus Filter by invoice status. Any value from enum of ``InvoiceStatus`` currency: Currency Filter by currency. Any value from enum of ``Currency`` include_archive: bool Show archived invoices. page: int Specify exactly what invoice you want to page. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing invoice e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing invoice e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest?perPage= { pagination } \" ) query_params = [ ( \"customer\" , customer ), ( \"status\" , status ), ( \"currency\" , currency ), ( \"include_archive\" , include_archive ), ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) get_total () Get invoice metrics for dashboard Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 199 200 201 202 203 204 205 206 207 208 209 def get_total ( self ) -> Response : \"\"\"Get invoice metrics for dashboard Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/totals\" ) return self . _handle_request ( \"GET\" , url ) send_notification ( code ) Send notification of an invoice to your customers Parameters str Invoice code Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 def send_notification ( self , code : str ) -> Response : \"\"\"Send notification of an invoice to your customers Parameters ---------- code: str Invoice code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/notify/ { code } \" ) return self . _handle_request ( \"POST\" , url ) update_invoice ( id_or_code , customer , amount , due_date = None , description = None , line_items = None , tax = None , currency = None , send_notification = None , draft = None , invoice_number = None , split_code = None ) Update an invoice details on your integration Parameters str Invoice ID or slug str Customer id or code int Payment request amount. Only useful if line items and tax values are ignored. method will throw a friendly warning in the response if neither is available. Optional[str] ISO 8601 representation of request due date Optional[str] A short description of the payment request Optional[list[dict[str,Any]]] List of line items in the format [{\"name\":\"item 1\", \"amount\":2000}] Optional[list[dict[str,Any]]] List of taxes to be charged in the format [{\"name\":\"VAT\", \"amount\":2000}] Optional[Currency] Specify the currency of the invoice. Any value from the Currency enum Optional[bool] Indicates whether Paystack sends an email notification to customer. Defaults to True Optional[bool] Indicate if request should be saved as draft. Defaults to false and overrides send_notification Optional[int] Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point. Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 def update_invoice ( self , id_or_code : str , customer : str , amount : int , due_date : Optional [ str ] = None , description : Optional [ str ] = None , line_items : Optional [ list [ dict [ str , Any ]]] = None , tax : Optional [ list [ dict [ str , Any ]]] = None , currency : Optional [ Currency ] = None , send_notification : Optional [ bool ] = None , draft : Optional [ bool ] = None , invoice_number : Optional [ int ] = None , split_code : Optional [ str ] = None , ): \"\"\"Update an invoice details on your integration Parameters ---------- id_or_code: str Invoice ID or slug customer: str Customer id or code amount: int Payment request amount. Only useful if line items and tax values are ignored. method will throw a friendly warning in the response if neither is available. due_date: Optional[str] ISO 8601 representation of request due date description: Optional[str] A short description of the payment request line_items: Optional[list[dict[str,Any]]] List of line items in the format [{\"name\":\"item 1\", \"amount\":2000}] tax: Optional[list[dict[str,Any]]] List of taxes to be charged in the format [{\"name\":\"VAT\", \"amount\":2000}] currency: Optional[Currency] Specify the currency of the invoice. Any value from the ``Currency`` enum send_notification: Optional[bool] Indicates whether Paystack sends an email notification to customer. Defaults to ``True`` draft: Optional[bool] Indicate if request should be saved as draft. Defaults to false and overrides send_notification invoice_number: Optional[int] Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point. split_code: Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" amount = validate_amount ( amount ) url = self . _url ( f \"/paymentrequest/ { id_or_code } \" ) payload = { \"customer\" : customer , \"amount\" : amount , } optional_params = [ ( \"due_date\" , due_date ), ( \"description\" , description ), ( \"line_items\" , line_items ), ( \"tax\" , tax ), ( \"currency\" , currency ), ( \"send_notification\" , send_notification ), ( \"draft\" , draft ), ( \"invoice_number\" , invoice_number ), ( \"split_code\" , split_code ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload ) verify_invoice ( code ) Verify details of an invoice on your integration. Parameters str Invoice code Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 def verify_invoice ( self , code : str ) -> Response : \"\"\"Verify details of an invoice on your integration. Parameters ---------- code: str Invoice code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/verify/ { code } \" ) return self . _handle_request ( \"GET\" , url ) Miscellaneous Bases: BaseAPI Provides a wrapper for paystack Miscellaneous API The Miscellaneous API are supporting APIs that can be used to provide more details to other APIs. https://paystack.com/docs/api/#miscellaneous Source code in pypaystack2/api/miscellaneous.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 class Miscellaneous ( BaseAPI ): \"\"\"Provides a wrapper for paystack Miscellaneous API The Miscellaneous API are supporting APIs that can be used to provide more details to other APIs. https://paystack.com/docs/api/#miscellaneous \"\"\" def get_banks ( self , country : Country , use_cursor : bool = False , next : Optional [ str ] = None , previous : Optional [ str ] = None , gateway : Optional [ Gateway ] = None , type : Optional [ BankType ] = None , currency : Optional [ Currency ] = None , pagination = 50 , ) -> Response : \"\"\"Get a list of all supported banks and their properties Parameters ---------- country: Country The country from which to obtain the list of supported banks. any value from the ``Country`` enum. use_cursor: bool Flag to enable cursor pagination. next: Optional[str] A cursor that indicates your place in the list. It can be used to fetch the next page of the list previous: Optional[str] A cursor that indicates your place in the list. It should be used to fetch the previous page of the list after an intial next request gateway: Optional[Gateway] The gateway type of the bank. Any value from the ``Gateway`` enum. type: Optional[BankType] Type of financial channel. For Ghanaian channels, please use either mobile_money for mobile money channels OR ghipps for bank channels currency: Optional[Currency] Any value from the Currency enum. pagination: int The number of objects to return per page. Defaults to 50, and limited to 100 records per page. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" country = Country . get_full ( country ) url = self . _url ( f \"/bank?perPage= { pagination } \" ) query_params = [ ( \"country\" , country ), ( \"use_cursor\" , use_cursor ), ( \"next\" , next ), ( \"previous\" , previous ), ( \"gateway\" , gateway ), ( \"type\" , type ), ( \"currency\" , currency ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_providers ( self , pay_with_bank_transfer : bool = False , ) -> Response : \"\"\"Get a list of all providers for Dedicated Virtual Account Parameters ---------- pay_with_bank_transfer: bool A flag to filter for available providers Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bank?pay_with_bank_transfer= { pay_with_bank_transfer } \" ) return self . _handle_request ( \"GET\" , url ) def get_countries ( self ) -> Response : \"\"\"Gets a list of Countries that Paystack currently supports Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/country\" ) return self . _handle_request ( \"GET\" , url ) def get_states ( self , country : Country ): \"\"\"Get a list of states for a country for address verification. Parameters ---------- country: Country Any value from the country enum. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/address_verification/states?country= { country } \" ) return self . _handle_request ( \"GET\" , url ) get_banks ( country , use_cursor = False , next = None , previous = None , gateway = None , type = None , currency = None , pagination = 50 ) Get a list of all supported banks and their properties Parameters Country The country from which to obtain the list of supported banks. any value from the Country enum. bool Flag to enable cursor pagination. Optional[str] A cursor that indicates your place in the list. It can be used to fetch the next page of the list Optional[str] A cursor that indicates your place in the list. It should be used to fetch the previous page of the list after an intial next request Optional[Gateway] The gateway type of the bank. Any value from the Gateway enum. Optional[BankType] Type of financial channel. For Ghanaian channels, please use either mobile_money for mobile money channels OR ghipps for bank channels Optional[Currency] Any value from the Currency enum. int The number of objects to return per page. Defaults to 50, and limited to 100 records per page. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/miscellaneous.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def get_banks ( self , country : Country , use_cursor : bool = False , next : Optional [ str ] = None , previous : Optional [ str ] = None , gateway : Optional [ Gateway ] = None , type : Optional [ BankType ] = None , currency : Optional [ Currency ] = None , pagination = 50 , ) -> Response : \"\"\"Get a list of all supported banks and their properties Parameters ---------- country: Country The country from which to obtain the list of supported banks. any value from the ``Country`` enum. use_cursor: bool Flag to enable cursor pagination. next: Optional[str] A cursor that indicates your place in the list. It can be used to fetch the next page of the list previous: Optional[str] A cursor that indicates your place in the list. It should be used to fetch the previous page of the list after an intial next request gateway: Optional[Gateway] The gateway type of the bank. Any value from the ``Gateway`` enum. type: Optional[BankType] Type of financial channel. For Ghanaian channels, please use either mobile_money for mobile money channels OR ghipps for bank channels currency: Optional[Currency] Any value from the Currency enum. pagination: int The number of objects to return per page. Defaults to 50, and limited to 100 records per page. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" country = Country . get_full ( country ) url = self . _url ( f \"/bank?perPage= { pagination } \" ) query_params = [ ( \"country\" , country ), ( \"use_cursor\" , use_cursor ), ( \"next\" , next ), ( \"previous\" , previous ), ( \"gateway\" , gateway ), ( \"type\" , type ), ( \"currency\" , currency ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) get_countries () Gets a list of Countries that Paystack currently supports Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/miscellaneous.py 97 98 99 100 101 102 103 104 105 106 107 def get_countries ( self ) -> Response : \"\"\"Gets a list of Countries that Paystack currently supports Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/country\" ) return self . _handle_request ( \"GET\" , url ) get_providers ( pay_with_bank_transfer = False ) Get a list of all providers for Dedicated Virtual Account Parameters bool A flag to filter for available providers Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/miscellaneous.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def get_providers ( self , pay_with_bank_transfer : bool = False , ) -> Response : \"\"\"Get a list of all providers for Dedicated Virtual Account Parameters ---------- pay_with_bank_transfer: bool A flag to filter for available providers Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bank?pay_with_bank_transfer= { pay_with_bank_transfer } \" ) return self . _handle_request ( \"GET\" , url ) get_states ( country ) Get a list of states for a country for address verification. Parameters Country Any value from the country enum. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/miscellaneous.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 def get_states ( self , country : Country ): \"\"\"Get a list of states for a country for address verification. Parameters ---------- country: Country Any value from the country enum. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/address_verification/states?country= { country } \" ) return self . _handle_request ( \"GET\" , url ) Page Bases: BaseAPI Provides a wrapper for paystack Payment Pages API The Payment Pages API provides a quick and secure way to collect payment for products. https://paystack.com/docs/api/#page Source code in pypaystack2/api/payment_pages.pyclass Page ( BaseAPI ): \"\"\"Provides a wrapper for paystack Payment Pages API The Payment Pages API provides a quick and secure way to collect payment for products. https://paystack.com/docs/api/#page \"\"\" def create ( self , name : str , description : Optional [ str ] = None , amount : Optional [ int ] = None , slug : Optional [ str ] = None , metadata : Optional [ str ] = None , redirect_url : Optional [ str ] = None , custom_fields : Optional [ list ] = None , ) -> Response : \"\"\"Create a payment page on your integration Parameters ---------- name: str Name of page description: Optional[str] A description for this page amount: Optional[int] Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` slug: Optional[str] URL slug you would like to be associated with this page. Page will be accessible at ``https://paystack.com/pay/[slug]`` metadata: Optional[str] Extra data to configure the payment page including subaccount, logo image, transaction charge redirect_url: Optional[str] If you would like Paystack to redirect someplace upon successful payment, specify the URL here. custom_fields: Optional[list] If you would like to accept custom fields, specify them here. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/page\" ) payload = { \"name\" : name } optional_params = [ ( \"description\" , description ), ( \"amount\" , amount ), ( \"slug\" , slug ), ( \"metadata\" , metadata ), ( \"redirect_url\" , redirect_url ), ( \"custom_fields\" , custom_fields ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_pages ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetch payment pages available on your integration. Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing page e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing page e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page?perPage=\" + str ( pagination )) query_params = [ ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_page ( self , id_or_slug : str ): \"\"\"Get details of a payment page on your integration. Parameters ---------- id_or_slug: str The page ``ID`` or ``slug`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page/ { id_or_slug } \" ) return self . _handle_request ( \"GET\" , url ) def update ( self , id_or_slug : str , name : str , description : str , amount : int , active : Optional [ bool ] = None , ) -> Response : \"\"\"Get details of a payment page on your integration. Parameters ---------- id_or_slug: str The page ``ID`` or ``slug`` you want to fetch name: str Name of page description: str A description for the page amount: int Default amount you want to accept using this page. If none is set, customer is free to provide any amount of their choice. The latter scenario is useful for accepting donations active: Optional[bool] Set to ``False`` to deactivate page url Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page/ { id_or_slug } \" ) payload = { \"name\" : name , \"description\" : description , } optional_params = [ ( \"amount\" , amount ), ( \"active\" , active ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload ) def check_slug_available ( self , slug : str ) -> Response : \"\"\"Check the availability of a slug for a payment page. Parameters ---------- slug: str URL slug to be confirmed Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page/check_slug_availability/ { slug } \" ) return self . _handle_request ( \"GET\" , url ) def add_products ( self , id : str , products : list [ int ]): \"\"\"Add products to a payment page Parameters ---------- id: str Id of the payment page products: list[int] Ids of all the products Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page/ { id } /product\" ) payload = { \"product\" : products } return self . _handle_request ( \"POST\" , url , payload ) add_products ( id , products ) Add products to a payment page Parameters str Id of the payment page list[int] Ids of all the products Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/payment_pages.py 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 def add_products ( self , id : str , products : list [ int ]): \"\"\"Add products to a payment page Parameters ---------- id: str Id of the payment page products: list[int] Ids of all the products Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page/ { id } /product\" ) payload = { \"product\" : products } return self . _handle_request ( \"POST\" , url , payload ) check_slug_available ( slug ) Check the availability of a slug for a payment page. Parameters str URL slug to be confirmed Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/payment_pages.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 def check_slug_available ( self , slug : str ) -> Response : \"\"\"Check the availability of a slug for a payment page. Parameters ---------- slug: str URL slug to be confirmed Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page/check_slug_availability/ { slug } \" ) return self . _handle_request ( \"GET\" , url ) create ( name , description = None , amount = None , slug = None , metadata = None , redirect_url = None , custom_fields = None ) Create a payment page on your integration Parameters str Name of page Optional[str] A description for this page Optional[int] Amount should be in kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR Optional[str] URL slug you would like to be associated with this page. Page will be accessible at https://paystack.com/pay/[slug] Optional[str] Extra data to configure the payment page including subaccount, logo image, transaction charge Optional[str] If you would like Paystack to redirect someplace upon successful payment, specify the URL here. Optional[list] If you would like to accept custom fields, specify them here. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/payment_pages.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def create ( self , name : str , description : Optional [ str ] = None , amount : Optional [ int ] = None , slug : Optional [ str ] = None , metadata : Optional [ str ] = None , redirect_url : Optional [ str ] = None , custom_fields : Optional [ list ] = None , ) -> Response : \"\"\"Create a payment page on your integration Parameters ---------- name: str Name of page description: Optional[str] A description for this page amount: Optional[int] Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` slug: Optional[str] URL slug you would like to be associated with this page. Page will be accessible at ``https://paystack.com/pay/[slug]`` metadata: Optional[str] Extra data to configure the payment page including subaccount, logo image, transaction charge redirect_url: Optional[str] If you would like Paystack to redirect someplace upon successful payment, specify the URL here. custom_fields: Optional[list] If you would like to accept custom fields, specify them here. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/page\" ) payload = { \"name\" : name } optional_params = [ ( \"description\" , description ), ( \"amount\" , amount ), ( \"slug\" , slug ), ( \"metadata\" , metadata ), ( \"redirect_url\" , redirect_url ), ( \"custom_fields\" , custom_fields ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) get_page ( id_or_slug ) Get details of a payment page on your integration. Parameters str The page ID or slug you want to fetch Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/payment_pages.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 def get_page ( self , id_or_slug : str ): \"\"\"Get details of a payment page on your integration. Parameters ---------- id_or_slug: str The page ``ID`` or ``slug`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page/ { id_or_slug } \" ) return self . _handle_request ( \"GET\" , url ) get_pages ( page = 1 , pagination = 50 , start_date = None , end_date = None ) Fetch payment pages available on your integration. Parameters int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Optional[str] A timestamp from which to start listing page e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing page e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/payment_pages.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def get_pages ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetch payment pages available on your integration. Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing page e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing page e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page?perPage=\" + str ( pagination )) query_params = [ ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) update ( id_or_slug , name , description , amount , active = None ) Get details of a payment page on your integration. Parameters str The page ID or slug you want to fetch str Name of page str A description for the page int Default amount you want to accept using this page. If none is set, customer is free to provide any amount of their choice. The latter scenario is useful for accepting donations Optional[bool] Set to False to deactivate page url Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/payment_pages.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 def update ( self , id_or_slug : str , name : str , description : str , amount : int , active : Optional [ bool ] = None , ) -> Response : \"\"\"Get details of a payment page on your integration. Parameters ---------- id_or_slug: str The page ``ID`` or ``slug`` you want to fetch name: str Name of page description: str A description for the page amount: int Default amount you want to accept using this page. If none is set, customer is free to provide any amount of their choice. The latter scenario is useful for accepting donations active: Optional[bool] Set to ``False`` to deactivate page url Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page/ { id_or_slug } \" ) payload = { \"name\" : name , \"description\" : description , } optional_params = [ ( \"amount\" , amount ), ( \"active\" , active ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload ) Plan Bases: BaseAPI Provides a wrapper for paystack Plans API The Plans API allows you create and manage installment payment options on your integration. https://paystack.com/docs/api/#plan Source code in pypaystack2/api/plans.pyclass Plan ( BaseAPI ): \"\"\"Provides a wrapper for paystack Plans API The Plans API allows you create and manage installment payment options on your integration. https://paystack.com/docs/api/#plan \"\"\" def create ( self , name : str , amount : int , interval : Interval , description : Optional [ str ] = None , currency : Optional [ Currency ] = None , invoice_limit : Optional [ int ] = None , send_invoices : bool = False , send_sms : bool = False , ) -> Response : \"\"\"Create a plan on your integration Parameters ---------- name: str Name of plan amount: int Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` interval: Interval Any value from the ``Interval`` enum. description: Optional[str] A description for this plan currency: Optional[Currency] Currency in which amount is set. Any of the value from the ``Currency`` enum invoice_limit: Optional[int] Number of invoices to raise during subscription to this plan. Can be overridden by specifying an ``invoice_limit`` while subscribing send_invoices: bool Set to ``False`` if you don't want invoices to be sent to your customers send_sms: bool Set to ``False`` if you don't want text messages to be sent to your customers Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" interval = validate_interval ( interval ) amount = validate_amount ( amount ) url = self . _url ( \"/plan/\" ) payload = { \"name\" : name , \"amount\" : amount , \"interval\" : interval , } optional_params = [ ( \"send_invoices\" , send_invoices ), ( \"send_sms\" , send_sms ), ( \"description\" , description ), ( \"currency\" , currency ), ( \"invoice_limit\" , invoice_limit ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_plans ( self , page = 1 , pagination = 50 , status : Optional [ PlanStatus ] = None , interval : Optional [ Interval ] = None , amount : Optional [ int ] = None , ) -> Response : \"\"\"Fetch plans available on your integration. Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. status: Optional[PlanStatus] Filter list by plans with specified status interval: Optional[Interval] Filter list by plans with specified interval amount: Optional[int] Filter list by plans with specified amount ( kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR``) Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if amount : amount = validate_amount ( amount ) url = self . _url ( f \"/plan/?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"status\" , status ), ( \"interval\" , interval ), ( \"amount\" , amount ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_plan ( self , id_or_code : str ) -> Response : \"\"\"Get details of a plan on your integration. Parameters ---------- id_or_code: str The plan ``ID`` or ``code`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/plan/ {} /\" . format ( id_or_code )) return self . _handle_request ( \"GET\" , url ) def update ( self , id_or_code : str , name : str , amount : int , interval : Interval , description : Optional [ str ] = None , currency : Optional [ Currency ] = None , invoice_limit : Optional [ int ] = None , send_invoices : bool = False , send_sms : bool = False , ) -> Response : \"\"\" Parameters ---------- id_or_code: str Plan's ID or code name: str Name of plan amount: int Amount should be in kobo if currency is ``Currency.NGN`` and pesewas for ``Currency.GHS`` interval: Interval Any value from the ``Interval`` enum. description: Optional[str] A description for this plan. currency: Optional[Currency] Any value from the ``Currency`` enum. invoice_limit: Optional[int] Number of invoices to raise during subscription to this plan. Can be overridden by specifying an ``invoice_limit`` while subscribing. send_invoices: bool Set to ``False`` if you don't want invoices to be sent to your customers send_sms: bool Set to ``False`` if you don't want text messages to be sent to your customers Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" interval = validate_interval ( interval ) amount = validate_amount ( amount ) url = self . _url ( \"/plan/ {} /\" . format ( id_or_code )) payload = { \"name\" : name , \"amount\" : amount , \"interval\" : interval , } optional_params = [ ( \"send_invoices\" , send_invoices ), ( \"send_sms\" , send_sms ), ( \"description\" , description ), ( \"currency\" , currency ), ( \"invoice_limit\" , invoice_limit ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload ) create ( name , amount , interval , description = None , currency = None , invoice_limit = None , send_invoices = False , send_sms = False ) Create a plan on your integration Parameters str Name of plan int Amount should be in kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR Interval Any value from the Interval enum. Optional[str] A description for this plan Optional[Currency] Currency in which amount is set. Any of the value from the Currency enum Optional[int] Number of invoices to raise during subscription to this plan. Can be overridden by specifying an invoice_limit while subscribing bool Set to False if you don't want invoices to be sent to your customers bool Set to False if you don't want text messages to be sent to your customers Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/plans.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def create ( self , name : str , amount : int , interval : Interval , description : Optional [ str ] = None , currency : Optional [ Currency ] = None , invoice_limit : Optional [ int ] = None , send_invoices : bool = False , send_sms : bool = False , ) -> Response : \"\"\"Create a plan on your integration Parameters ---------- name: str Name of plan amount: int Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` interval: Interval Any value from the ``Interval`` enum. description: Optional[str] A description for this plan currency: Optional[Currency] Currency in which amount is set. Any of the value from the ``Currency`` enum invoice_limit: Optional[int] Number of invoices to raise during subscription to this plan. Can be overridden by specifying an ``invoice_limit`` while subscribing send_invoices: bool Set to ``False`` if you don't want invoices to be sent to your customers send_sms: bool Set to ``False`` if you don't want text messages to be sent to your customers Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" interval = validate_interval ( interval ) amount = validate_amount ( amount ) url = self . _url ( \"/plan/\" ) payload = { \"name\" : name , \"amount\" : amount , \"interval\" : interval , } optional_params = [ ( \"send_invoices\" , send_invoices ), ( \"send_sms\" , send_sms ), ( \"description\" , description ), ( \"currency\" , currency ), ( \"invoice_limit\" , invoice_limit ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) get_plan ( id_or_code ) Get details of a plan on your integration. Parameters str The plan ID or code you want to fetch Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/plans.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 def get_plan ( self , id_or_code : str ) -> Response : \"\"\"Get details of a plan on your integration. Parameters ---------- id_or_code: str The plan ``ID`` or ``code`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/plan/ {} /\" . format ( id_or_code )) return self . _handle_request ( \"GET\" , url ) get_plans ( page = 1 , pagination = 50 , status = None , interval = None , amount = None ) Fetch plans available on your integration. Parameters int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Optional[PlanStatus] Filter list by plans with specified status Optional[Interval] Filter list by plans with specified interval Optional[int] Filter list by plans with specified amount ( kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR ) Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/plans.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def get_plans ( self , page = 1 , pagination = 50 , status : Optional [ PlanStatus ] = None , interval : Optional [ Interval ] = None , amount : Optional [ int ] = None , ) -> Response : \"\"\"Fetch plans available on your integration. Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. status: Optional[PlanStatus] Filter list by plans with specified status interval: Optional[Interval] Filter list by plans with specified interval amount: Optional[int] Filter list by plans with specified amount ( kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR``) Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if amount : amount = validate_amount ( amount ) url = self . _url ( f \"/plan/?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"status\" , status ), ( \"interval\" , interval ), ( \"amount\" , amount ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) update ( id_or_code , name , amount , interval , description = None , currency = None , invoice_limit = None , send_invoices = False , send_sms = False ) Parameters str Plan's ID or code str Name of plan int Amount should be in kobo if currency is Currency.NGN and pesewas for Currency.GHS Interval Any value from the Interval enum. Optional[str] A description for this plan. Optional[Currency] Any value from the Currency enum. Optional[int] Number of invoices to raise during subscription to this plan. Can be overridden by specifying an invoice_limit while subscribing. bool Set to False if you don't want invoices to be sent to your customers bool Set to False if you don't want text messages to be sent to your customers Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/plans.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 def update ( self , id_or_code : str , name : str , amount : int , interval : Interval , description : Optional [ str ] = None , currency : Optional [ Currency ] = None , invoice_limit : Optional [ int ] = None , send_invoices : bool = False , send_sms : bool = False , ) -> Response : \"\"\" Parameters ---------- id_or_code: str Plan's ID or code name: str Name of plan amount: int Amount should be in kobo if currency is ``Currency.NGN`` and pesewas for ``Currency.GHS`` interval: Interval Any value from the ``Interval`` enum. description: Optional[str] A description for this plan. currency: Optional[Currency] Any value from the ``Currency`` enum. invoice_limit: Optional[int] Number of invoices to raise during subscription to this plan. Can be overridden by specifying an ``invoice_limit`` while subscribing. send_invoices: bool Set to ``False`` if you don't want invoices to be sent to your customers send_sms: bool Set to ``False`` if you don't want text messages to be sent to your customers Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" interval = validate_interval ( interval ) amount = validate_amount ( amount ) url = self . _url ( \"/plan/ {} /\" . format ( id_or_code )) payload = { \"name\" : name , \"amount\" : amount , \"interval\" : interval , } optional_params = [ ( \"send_invoices\" , send_invoices ), ( \"send_sms\" , send_sms ), ( \"description\" , description ), ( \"currency\" , currency ), ( \"invoice_limit\" , invoice_limit ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload ) Product Bases: BaseAPI Provides a wrapper for paystack Products API The Products API allows you to create and manage inventories on your integration. https://paystack.com/docs/api/#product Source code in pypaystack2/api/products.pyclass Product ( BaseAPI ): \"\"\"Provides a wrapper for paystack Products API The Products API allows you to create and manage inventories on your integration. https://paystack.com/docs/api/#product \"\"\" def create ( self , name : str , description : str , price : int , currency : Currency , unlimited : Optional [ bool ] = None , quantity : Optional [ int ] = None , ) -> Response : \"\"\"Create a product on your integration Parameters ---------- name: str Name of product description: str A description for this product price: int Price should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` currency: Currency Any value from the ``Currency`` enum unlimited: Optional[bool] Set to ``True`` if the product has unlimited stock. Leave as ``False`` if the product has limited stock quantity: Optional[int] Number of products in stock. Use if unlimited is ``False`` Returns ------- Response A named tuple containing the response gotten from paystack's server. Raises ------ InvalidDataError When unlimited is set to True and quantity has a value. \"\"\" if unlimited is True and quantity is not None : raise InvalidDataError ( \"You can't have unlimited set to True and have a quantity value.\" ) url = self . _url ( \"/product\" ) payload = { \"name\" : name , \"description\" : description , \"price\" : price , \"currency\" : currency , } optional_params = [ ( \"unlimited\" , unlimited ), ( \"quantity\" , quantity ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_products ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetches products available on your integration. Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing product e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] timestamp at which to stop listing product e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/product?perPage=\" + str ( pagination )) query_params = [ ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_product ( self , id : str ) -> Response : \"\"\"Get details of a product on your integration. Parameters ---------- id: str The product ``ID`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/product/ { id } \" ) return self . _handle_request ( \"GET\" , url ) def update ( self , id : str , name : str , description : str , price : int , currency : Currency , unlimited : Optional [ bool ] = None , quantity : Optional [ int ] = None , ) -> Response : \"\"\"Update a product details on your integration Parameters ---------- id: str Product ID name: str Name of product description: str A description for this product price: int Price should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is GHS, and cents, if currency is ``Currency.ZAR`` currency: Currency Any value from the ``Currency`` enum unlimited: Optional[bool] Set to ``True`` if the product has unlimited stock. Leave as ``False`` if the product has limited stock quantity: Optional[int] Number of products in stock. Use if unlimited is ``False`` Returns ------- Response A named tuple containing the response gotten from paystack's server. Raises ------ InvalidDataError When unlimited is set to True and quantity has a value. \"\"\" if unlimited is True and quantity is not None : raise InvalidDataError ( \"You can't have unlimited set to True and quantity have a value.\" ) url = self . _url ( f \"/product/ { id } \" ) payload = { \"name\" : name , \"description\" : description , \"price\" : price , \"currency\" : currency , } optional_params = [ ( \"unlimited\" , unlimited ), ( \"quantity\" , quantity ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload ) create ( name , description , price , currency , unlimited = None , quantity = None ) Create a product on your integration Parameters str Name of product str A description for this product int Price should be in kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR Currency Any value from the Currency enum Optional[bool] Set to True if the product has unlimited stock. Leave as False if the product has limited stock Optional[int] Number of products in stock. Use if unlimited is False Returns Response A named tuple containing the response gotten from paystack's server. Raises InvalidDataError When unlimited is set to True and quantity has a value. Source code in pypaystack2/api/products.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def create ( self , name : str , description : str , price : int , currency : Currency , unlimited : Optional [ bool ] = None , quantity : Optional [ int ] = None , ) -> Response : \"\"\"Create a product on your integration Parameters ---------- name: str Name of product description: str A description for this product price: int Price should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` currency: Currency Any value from the ``Currency`` enum unlimited: Optional[bool] Set to ``True`` if the product has unlimited stock. Leave as ``False`` if the product has limited stock quantity: Optional[int] Number of products in stock. Use if unlimited is ``False`` Returns ------- Response A named tuple containing the response gotten from paystack's server. Raises ------ InvalidDataError When unlimited is set to True and quantity has a value. \"\"\" if unlimited is True and quantity is not None : raise InvalidDataError ( \"You can't have unlimited set to True and have a quantity value.\" ) url = self . _url ( \"/product\" ) payload = { \"name\" : name , \"description\" : description , \"price\" : price , \"currency\" : currency , } optional_params = [ ( \"unlimited\" , unlimited ), ( \"quantity\" , quantity ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) get_product ( id ) Get details of a product on your integration. Parameters str The product ID you want to fetch Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/products.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def get_product ( self , id : str ) -> Response : \"\"\"Get details of a product on your integration. Parameters ---------- id: str The product ``ID`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/product/ { id } \" ) return self . _handle_request ( \"GET\" , url ) get_products ( page = 1 , pagination = 50 , start_date = None , end_date = None ) Fetches products available on your integration. Parameters int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Optional[str] A timestamp from which to start listing product e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] timestamp at which to stop listing product e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/products.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def get_products ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetches products available on your integration. Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing product e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] timestamp at which to stop listing product e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/product?perPage=\" + str ( pagination )) query_params = [ ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) update ( id , name , description , price , currency , unlimited = None , quantity = None ) Update a product details on your integration Parameters str Product ID str Name of product str A description for this product int Price should be in kobo if currency is Currency.NGN , pesewas, if currency is GHS, and cents, if currency is Currency.ZAR Currency Any value from the Currency enum Optional[bool] Set to True if the product has unlimited stock. Leave as False if the product has limited stock Optional[int] Number of products in stock. Use if unlimited is False Returns Response A named tuple containing the response gotten from paystack's server. Raises InvalidDataError When unlimited is set to True and quantity has a value. Source code in pypaystack2/api/products.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 def update ( self , id : str , name : str , description : str , price : int , currency : Currency , unlimited : Optional [ bool ] = None , quantity : Optional [ int ] = None , ) -> Response : \"\"\"Update a product details on your integration Parameters ---------- id: str Product ID name: str Name of product description: str A description for this product price: int Price should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is GHS, and cents, if currency is ``Currency.ZAR`` currency: Currency Any value from the ``Currency`` enum unlimited: Optional[bool] Set to ``True`` if the product has unlimited stock. Leave as ``False`` if the product has limited stock quantity: Optional[int] Number of products in stock. Use if unlimited is ``False`` Returns ------- Response A named tuple containing the response gotten from paystack's server. Raises ------ InvalidDataError When unlimited is set to True and quantity has a value. \"\"\" if unlimited is True and quantity is not None : raise InvalidDataError ( \"You can't have unlimited set to True and quantity have a value.\" ) url = self . _url ( f \"/product/ { id } \" ) payload = { \"name\" : name , \"description\" : description , \"price\" : price , \"currency\" : currency , } optional_params = [ ( \"unlimited\" , unlimited ), ( \"quantity\" , quantity ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload ) Refund Bases: BaseAPI Provides a wrapper for paystack Refunds API The Refunds API allows you to create and manage transaction refunds. https://paystack.com/docs/api/#refund Source code in pypaystack2/api/refunds.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 class Refund ( BaseAPI ): \"\"\"Provides a wrapper for paystack Refunds API The Refunds API allows you to create and manage transaction refunds. https://paystack.com/docs/api/#refund \"\"\" def create ( self , transaction : str , amount : Optional [ int ] = None , currency : Optional [ Currency ] = None , customer_note : Optional [ str ] = None , merchant_note : Optional [ str ] = None , ) -> Response : \"\"\"Initiate a refund on your integration Parameters ---------- transaction: str Transaction reference or id amount: Optional[int] Amount ( in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR ) to be refunded to the customer. Amount is optional(defaults to original transaction amount) and cannot be more than the original transaction amount currency: Optional[Currency] Any value from the ``Currency`` enum customer_note: Optional[str] Customer reason merchant_note: Optional[str] Merchant reason Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if amount is not None : amount = validate_amount ( amount ) url = self . _url ( \"/refund\" ) payload = { \"transaction\" : transaction } optional_params = [ ( \"amount\" , amount ), ( \"currency\" , currency ), ( \"customer_note\" , customer_note ), ( \"merchant_note\" , merchant_note ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_refunds ( self , reference : str , currency : Currency , pagination = 50 , page = 1 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetch refunds available on your integration. Parameters ---------- reference: str Identifier for transaction to be refunded currency: Currency Any value from the ``Currency`` enum pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what refund you want to page. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing refund e.g. 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing refund e.g. 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/refund?perPage= { pagination } \" ) query_params = [ ( \"reference\" , reference ), ( \"currency\" , currency ), ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_refund ( self , reference : str ) -> Response : \"\"\"Get details of a refund on your integration. Parameters ---------- reference: str Identifier for transaction to be refunded Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/refund/ { reference } \" ) return self . _handle_request ( \"GET\" , url ) create ( transaction , amount = None , currency = None , customer_note = None , merchant_note = None ) Initiate a refund on your integration Parameters str Transaction reference or id Optional[int] Amount ( in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR ) to be refunded to the customer. Amount is optional(defaults to original transaction amount) and cannot be more than the original transaction amount Optional[Currency] Any value from the Currency enum Optional[str] Customer reason Optional[str] Merchant reason Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/refunds.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def create ( self , transaction : str , amount : Optional [ int ] = None , currency : Optional [ Currency ] = None , customer_note : Optional [ str ] = None , merchant_note : Optional [ str ] = None , ) -> Response : \"\"\"Initiate a refund on your integration Parameters ---------- transaction: str Transaction reference or id amount: Optional[int] Amount ( in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR ) to be refunded to the customer. Amount is optional(defaults to original transaction amount) and cannot be more than the original transaction amount currency: Optional[Currency] Any value from the ``Currency`` enum customer_note: Optional[str] Customer reason merchant_note: Optional[str] Merchant reason Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if amount is not None : amount = validate_amount ( amount ) url = self . _url ( \"/refund\" ) payload = { \"transaction\" : transaction } optional_params = [ ( \"amount\" , amount ), ( \"currency\" , currency ), ( \"customer_note\" , customer_note ), ( \"merchant_note\" , merchant_note ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) get_refund ( reference ) Get details of a refund on your integration. Parameters str Identifier for transaction to be refunded Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/refunds.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 def get_refund ( self , reference : str ) -> Response : \"\"\"Get details of a refund on your integration. Parameters ---------- reference: str Identifier for transaction to be refunded Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/refund/ { reference } \" ) return self . _handle_request ( \"GET\" , url ) get_refunds ( reference , currency , pagination = 50 , page = 1 , start_date = None , end_date = None ) Fetch refunds available on your integration. Parameters str Identifier for transaction to be refunded Currency Any value from the Currency enum int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. int Specify exactly what refund you want to page. If not specify we use a default value of 1. Optional[str] A timestamp from which to start listing refund e.g. 2016-09-21 Optional[str] A timestamp at which to stop listing refund e.g. 2016-09-21 Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/refunds.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def get_refunds ( self , reference : str , currency : Currency , pagination = 50 , page = 1 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetch refunds available on your integration. Parameters ---------- reference: str Identifier for transaction to be refunded currency: Currency Any value from the ``Currency`` enum pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what refund you want to page. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing refund e.g. 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing refund e.g. 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/refund?perPage= { pagination } \" ) query_params = [ ( \"reference\" , reference ), ( \"currency\" , currency ), ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) Settlement Bases: BaseAPI Provides a wrapper for paystack Settlement API The Settlements API allows you gain insights into payouts made by Paystack to your bank account. https://paystack.com/docs/api/#settlement Source code in pypaystack2/api/settlements.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 class Settlement ( BaseAPI ): \"\"\"Provides a wrapper for paystack Settlement API The Settlements API allows you gain insights into payouts made by Paystack to your bank account. https://paystack.com/docs/api/#settlement \"\"\" def get_settlements ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , subaccount : Optional [ str ] = None , ) -> Response : \"\"\"Fetch settlements made to your settlement accounts. page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing settlements e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing settlements e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 subaccount: Optional[str] Provide a subaccount ID to export only settlements for that subaccount. Set to ``none`` to export only transactions for the account. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/settlement?perPage= { pagination } \" ) query_params = [ ( \"subaccount\" , subaccount ), ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_settlement_transactions ( self , id : int , pagination = 50 , page = 1 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Get the transactions that make up a particular settlement Parameters ---------- id: int The settlement ID in which you want to fetch its transactions pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing settlement transactions e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing settlement transactions e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/settlement/ { id } /transactions?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) get_settlement_transactions ( id , pagination = 50 , page = 1 , start_date = None , end_date = None ) Get the transactions that make up a particular settlement Parameters int The settlement ID in which you want to fetch its transactions int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. Optional[str] A timestamp from which to start listing settlement transactions e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing settlement transactions e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/settlements.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def get_settlement_transactions ( self , id : int , pagination = 50 , page = 1 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Get the transactions that make up a particular settlement Parameters ---------- id: int The settlement ID in which you want to fetch its transactions pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing settlement transactions e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing settlement transactions e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/settlement/ { id } /transactions?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) get_settlements ( page = 1 , pagination = 50 , start_date = None , end_date = None , subaccount = None ) Fetch settlements made to your settlement accounts. int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Optional[str] A timestamp from which to start listing settlements e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing settlements e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] Provide a subaccount ID to export only settlements for that subaccount. Set to none to export only transactions for the account. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/settlements.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def get_settlements ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , subaccount : Optional [ str ] = None , ) -> Response : \"\"\"Fetch settlements made to your settlement accounts. page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing settlements e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing settlements e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 subaccount: Optional[str] Provide a subaccount ID to export only settlements for that subaccount. Set to ``none`` to export only transactions for the account. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/settlement?perPage= { pagination } \" ) query_params = [ ( \"subaccount\" , subaccount ), ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) Split Bases: BaseAPI Provides a wrapper for paystack Transaction Splits API The Transaction Splits API enables merchants split the settlement for a transaction across their payout account, and one or more Subaccounts. https://paystack.com/docs/api/#split Source code in pypaystack2/api/splits.pyclass Split ( BaseAPI ): \"\"\"Provides a wrapper for paystack Transaction Splits API The Transaction Splits API enables merchants split the settlement for a transaction across their payout account, and one or more Subaccounts. https://paystack.com/docs/api/#split \"\"\" def create ( self , name : str , type : SplitType , currency : Currency , subaccounts : list [ dict [ str , Any ]], bearer_type : Bearer , bearer_subaccount : str , ) -> Response : \"\"\"Create a split payment on your integration Parameters ---------- name: str Name of the transaction split type: SplitType The type of transaction split you want to create. Any value from the ``SplitType`` enum currency: Currency Any value from the ``Currency`` enum subaccounts: list[dict[str,Any]] A list of dictionaries containing subaccount code and number of shares: ``[{subaccount: 'ACT_xxxxxxxxxx', share: xxx},{...}]`` bearer_type: Bearer Any value from the ``Bearer`` enum bearer_subaccount: str Subaccount code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/split\" ) payload = { \"name\" : name , \"type\" : type , \"currency\" : currency , \"subaccounts\" : subaccounts , \"bearer_type\" : bearer_type , \"bearer_subaccount\" : bearer_subaccount , } return self . _handle_request ( \"POST\" , url , payload ) def get_splits ( self , name : str , sort_by : Optional [ str ], page : Optional [ int ], start_date : Optional [ str ], end_date : Optional [ str ], active : bool = True , pagination = 50 , ) -> Response : \"\"\"Get/search for the transaction splits available on your integration. Parameters ---------- name: str The name of the split sort_by: Optional[str] Sort by name, defaults to createdAt date page: Optional[int] Page number to view. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing splits e.g. 2019-09-24T00:00:05.000Z, 2019-09-21 end_date: Optional[str] A timestamp at which to stop listing splits e.g. 2019-09-24T00:00:05.000Z, 2019-09-21 active: bool pagination: int Number of splits per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/split?perPage= { pagination } \" ) query_params = [ ( \"name\" , name ), ( \"sort_by\" , sort_by ), ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"active\" , active ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_split ( self , id : str ) -> Response : \"\"\"Get details of a split on your integration. Parameters ---------- id: str The id of the split Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/split/ { id } /\" ) return self . _handle_request ( \"GET\" , url ) def update ( self , id : str , name : str , active : bool , bearer_type : Optional [ Bearer ], bearer_subaccount : Optional [ str ], ) -> Response : \"\"\"Update a transaction split details on your integration Parameters ---------- id: str Split ID name: str Name of the transaction split active: bool bearer_type: Optional[Bearer] Any value from the Bearer enum bearer_subaccount: Optional[str] Subaccount code of a subaccount in the split group. This should be specified only if the bearer_type is ``Bearer.subaccount`` Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if bearer_subaccount : if bearer_type != Bearer . SUBACCOUNT : raise InvalidDataError ( \"`bearer_subaccount` can only have a value if `bearer_type` is `Bearer.SUBACCOUNT`\" ) payload = { \"name\" : name , \"active\" : active , } optional_params = [ ( \"bearer_type\" , bearer_type ), ( \"bearer_subaccount\" , bearer_subaccount ), ] payload = add_to_payload ( optional_params , payload ) url = self . _url ( f \"/split/ { id } /\" ) return self . _handle_request ( \"PUT\" , url , payload ) def add_or_update ( self , id : str , subaccount : str , share : int ) -> Response : \"\"\" Add a Subaccount to a Transaction Split, or update the share of an existing Subaccount in a Transaction Split Parameters ---------- id: str Split Id subaccount: str This is the subaccount code share: int This is the transaction share for the subaccount Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" share = validate_amount ( share ) payload = { \"subaccount\" : subaccount , \"share\" : share } url = self . _url ( f \"/split/ { id } /subaccount/add\" ) return self . _handle_request ( \"POST\" , url , payload ) def remove ( self , id : str , subaccount : str ): \"\"\"Remove a subaccount from a transaction split Parameters ---------- id: str Split Id subaccount: str This is the sub account code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"subaccount\" : subaccount } url = self . _url ( f \"/split/ { id } /subaccount/remove\" ) return self . _handle_request ( \"POST\" , url , payload ) add_or_update ( id , subaccount , share ) Add a Subaccount to a Transaction Split, or update the share of an existing Subaccount in a Transaction Split Parameters id: str Split Id subaccount: str This is the subaccount code share: int This is the transaction share for the subaccount Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/splits.py 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 def add_or_update ( self , id : str , subaccount : str , share : int ) -> Response : \"\"\" Add a Subaccount to a Transaction Split, or update the share of an existing Subaccount in a Transaction Split Parameters ---------- id: str Split Id subaccount: str This is the subaccount code share: int This is the transaction share for the subaccount Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" share = validate_amount ( share ) payload = { \"subaccount\" : subaccount , \"share\" : share } url = self . _url ( f \"/split/ { id } /subaccount/add\" ) return self . _handle_request ( \"POST\" , url , payload ) create ( name , type , currency , subaccounts , bearer_type , bearer_subaccount ) Create a split payment on your integration Parameters str Name of the transaction split SplitType The type of transaction split you want to create. Any value from the SplitType enum Currency Any value from the Currency enum list[dict[str,Any]] A list of dictionaries containing subaccount code and number of shares: [{subaccount: 'ACT_xxxxxxxxxx', share: xxx},{...}] Bearer Any value from the Bearer enum str Subaccount code Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/splits.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 def create ( self , name : str , type : SplitType , currency : Currency , subaccounts : list [ dict [ str , Any ]], bearer_type : Bearer , bearer_subaccount : str , ) -> Response : \"\"\"Create a split payment on your integration Parameters ---------- name: str Name of the transaction split type: SplitType The type of transaction split you want to create. Any value from the ``SplitType`` enum currency: Currency Any value from the ``Currency`` enum subaccounts: list[dict[str,Any]] A list of dictionaries containing subaccount code and number of shares: ``[{subaccount: 'ACT_xxxxxxxxxx', share: xxx},{...}]`` bearer_type: Bearer Any value from the ``Bearer`` enum bearer_subaccount: str Subaccount code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/split\" ) payload = { \"name\" : name , \"type\" : type , \"currency\" : currency , \"subaccounts\" : subaccounts , \"bearer_type\" : bearer_type , \"bearer_subaccount\" : bearer_subaccount , } return self . _handle_request ( \"POST\" , url , payload ) get_split ( id ) Get details of a split on your integration. Parameters str The id of the split Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/splits.py 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 def get_split ( self , id : str ) -> Response : \"\"\"Get details of a split on your integration. Parameters ---------- id: str The id of the split Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/split/ { id } /\" ) return self . _handle_request ( \"GET\" , url ) get_splits ( name , sort_by , page , start_date , end_date , active = True , pagination = 50 ) Get/search for the transaction splits available on your integration. Parameters str The name of the split Optional[str] Sort by name, defaults to createdAt date Optional[int] Page number to view. If not specify we use a default value of 1. Optional[str] A timestamp from which to start listing splits e.g. 2019-09-24T00:00:05.000Z, 2019-09-21 Optional[str] A timestamp at which to stop listing splits e.g. 2019-09-24T00:00:05.000Z, 2019-09-21 active: bool int Number of splits per page. If not specify we use a default value of 50. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/splits.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def get_splits ( self , name : str , sort_by : Optional [ str ], page : Optional [ int ], start_date : Optional [ str ], end_date : Optional [ str ], active : bool = True , pagination = 50 , ) -> Response : \"\"\"Get/search for the transaction splits available on your integration. Parameters ---------- name: str The name of the split sort_by: Optional[str] Sort by name, defaults to createdAt date page: Optional[int] Page number to view. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing splits e.g. 2019-09-24T00:00:05.000Z, 2019-09-21 end_date: Optional[str] A timestamp at which to stop listing splits e.g. 2019-09-24T00:00:05.000Z, 2019-09-21 active: bool pagination: int Number of splits per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/split?perPage= { pagination } \" ) query_params = [ ( \"name\" , name ), ( \"sort_by\" , sort_by ), ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"active\" , active ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) remove ( id , subaccount ) Remove a subaccount from a transaction split Parameters str Split Id str This is the sub account code Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/splits.py 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 def remove ( self , id : str , subaccount : str ): \"\"\"Remove a subaccount from a transaction split Parameters ---------- id: str Split Id subaccount: str This is the sub account code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"subaccount\" : subaccount } url = self . _url ( f \"/split/ { id } /subaccount/remove\" ) return self . _handle_request ( \"POST\" , url , payload ) update ( id , name , active , bearer_type , bearer_subaccount ) Update a transaction split details on your integration Parameters str Split ID str Name of the transaction split active: bool Optional[Bearer] Any value from the Bearer enum Optional[str] Subaccount code of a subaccount in the split group. This should be specified only if the bearer_type is Bearer.subaccount Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/splits.py 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 def update ( self , id : str , name : str , active : bool , bearer_type : Optional [ Bearer ], bearer_subaccount : Optional [ str ], ) -> Response : \"\"\"Update a transaction split details on your integration Parameters ---------- id: str Split ID name: str Name of the transaction split active: bool bearer_type: Optional[Bearer] Any value from the Bearer enum bearer_subaccount: Optional[str] Subaccount code of a subaccount in the split group. This should be specified only if the bearer_type is ``Bearer.subaccount`` Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if bearer_subaccount : if bearer_type != Bearer . SUBACCOUNT : raise InvalidDataError ( \"`bearer_subaccount` can only have a value if `bearer_type` is `Bearer.SUBACCOUNT`\" ) payload = { \"name\" : name , \"active\" : active , } optional_params = [ ( \"bearer_type\" , bearer_type ), ( \"bearer_subaccount\" , bearer_subaccount ), ] payload = add_to_payload ( optional_params , payload ) url = self . _url ( f \"/split/ { id } /\" ) return self . _handle_request ( \"PUT\" , url , payload ) SubAccount Bases: BaseAPI Provides a wrapper for paystack Subaccounts API The Subaccounts API allows you to create and manage subaccounts on your integration. Subaccounts can be used to split payment between two accounts (your main account and a sub account). https://paystack.com/docs/api/#subaccount Source code in pypaystack2/api/subaccounts.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 class SubAccount ( BaseAPI ): \"\"\"Provides a wrapper for paystack Subaccounts API The Subaccounts API allows you to create and manage subaccounts on your integration. Subaccounts can be used to split payment between two accounts (your main account and a sub account). https://paystack.com/docs/api/#subaccount \"\"\" def create ( self , business_name : str , settlement_bank : str , account_number : str , percentage_charge : float , description : str , primary_contact_email : Optional [ str ] = None , primary_contact_name : Optional [ str ] = None , primary_contact_phone : Optional [ str ] = None , metadata : Optional [ dict [ str , Any ]] = None , ) -> Response : \"\"\"Create a subacount on your integration. Parameters ---------- business_name: str Name of business for subaccount settlement_bank: str Bank Code for the bank. You can get the list of Bank Codes by calling the ``.get_banks`` method from the Miscellaneous API wrapper account_number: str Bank Account Number percentage_charge: float The default percentage charged when receiving on behalf of this subaccount description: str A description for this subaccount primary_contact_email: Optional[str] A contact email for the subaccount primary_contact_name: Optional[str] A name for the contact person for this subaccount primary_contact_phone: Optional[str] A phone number to call for this subaccount metadata: Optional[list[dict[str,Any]]] Add a custom_fields attribute which has a list of dictionaries if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: ``{\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]}`` Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/subaccount\" ) payload = { \"business_name\" : business_name , \"settlement_bank\" : settlement_bank , \"account_number\" : account_number , \"percentage_charge\" : percentage_charge , \"description\" : description , } optional_params = [ ( \"primary_contact_email\" , primary_contact_email ), ( \"primary_contact_name\" , primary_contact_name ), ( \"primary_contact_phone\" , primary_contact_phone ), ( \"metadata\" , metadata ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_subaccounts ( self , start_date : str , end_date : str , page = 1 , pagination = 50 ) -> Response : \"\"\"Fetch subaccounts available on your integration. Parameters ---------- start_date: str A timestamp from which to start listing subaccounts e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: str A timestamp at which to stop listing subaccounts e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subaccount?perPage= { pagination } \" ) query_params = [ ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"page\" , page ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_subaccount ( self , id_or_code : str ) -> Response : \"\"\"Get details of a subaccount on your integration. Parameters ---------- id_or_code: str The subaccount ``ID`` or ``code`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subaccount/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) def update ( self , id_or_code : str , business_name : str , settlement_bank : str , account_number : Optional [ str ] = None , active : Optional [ bool ] = None , percentage_charge : Optional [ float ] = None , description : Optional [ str ] = None , primary_contact_email : Optional [ str ] = None , primary_contact_name : Optional [ str ] = None , primary_contact_phone : Optional [ str ] = None , settlement_schedule : Optional [ Schedule ] = None , metadata : Optional [ dict [ str , Any ]] = None , ) -> Response : \"\"\"Update a subaccount details on your integration. id_or_code: str Subaccount's ID or code business_name: str Name of business for subaccount settlement_bank: str Bank Code for the bank. You can get the list of Bank Codes by calling the ``.get_banks`` method from the Miscellaneous API wrapper account_number: Optional[str] Bank Account Number active: Optional[bool] Activate or deactivate a subaccount. percentage_charge: Optional[float] The default percentage charged when receiving on behalf of this subaccount description: Optional[str] A description for this subaccount primary_contact_email: Optional[str] A contact email for the subaccount primary_contact_name: Optional[str] A name for the contact person for this subaccount primary_contact_phone: Optional[str] A phone number to call for this subaccount settlement_schedule: Optional[Schedule] ``Schedule.AUTO`` means payout is T+1 and manual means payout to the subaccount should only be made when requested. Defaults to ``Schedule.AUTO`` metadata: Optional[dict[str,Any]] Add a custom_fields attribute which has a list of dictionaries if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: ``{\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]}`` Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"id_or_code\" : id_or_code , \"business_name\" : business_name , \"settlement_bank\" : settlement_bank , } optional_params = [ ( \"account_number\" , account_number ), ( \"active\" , active ), ( \"percentage_charge\" , percentage_charge ), ( \"description\" , description ), ( \"primary_contact_email\" , primary_contact_email ), ( \"primary_contact_name\" , primary_contact_name ), ( \"primary_contact_phone\" , primary_contact_phone ), ( \"settlement_schedule\" , settlement_schedule ), ( \"metadata\" , metadata ), ] payload = add_to_payload ( optional_params , payload ) url = self . _url ( f \"/subaccount/ { id_or_code } \" ) return self . _handle_request ( \"PUT\" , url , payload ) create ( business_name , settlement_bank , account_number , percentage_charge , description , primary_contact_email = None , primary_contact_name = None , primary_contact_phone = None , metadata = None ) Create a subacount on your integration. Parameters str Name of business for subaccount str Bank Code for the bank. You can get the list of Bank Codes by calling the .get_banks method from the Miscellaneous API wrapper str Bank Account Number float The default percentage charged when receiving on behalf of this subaccount str A description for this subaccount Optional[str] A contact email for the subaccount Optional[str] A name for the contact person for this subaccount Optional[str] A phone number to call for this subaccount Optional[list[dict[str,Any]]] Add a custom_fields attribute which has a list of dictionaries if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: {\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]} Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subaccounts.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def create ( self , business_name : str , settlement_bank : str , account_number : str , percentage_charge : float , description : str , primary_contact_email : Optional [ str ] = None , primary_contact_name : Optional [ str ] = None , primary_contact_phone : Optional [ str ] = None , metadata : Optional [ dict [ str , Any ]] = None , ) -> Response : \"\"\"Create a subacount on your integration. Parameters ---------- business_name: str Name of business for subaccount settlement_bank: str Bank Code for the bank. You can get the list of Bank Codes by calling the ``.get_banks`` method from the Miscellaneous API wrapper account_number: str Bank Account Number percentage_charge: float The default percentage charged when receiving on behalf of this subaccount description: str A description for this subaccount primary_contact_email: Optional[str] A contact email for the subaccount primary_contact_name: Optional[str] A name for the contact person for this subaccount primary_contact_phone: Optional[str] A phone number to call for this subaccount metadata: Optional[list[dict[str,Any]]] Add a custom_fields attribute which has a list of dictionaries if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: ``{\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]}`` Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/subaccount\" ) payload = { \"business_name\" : business_name , \"settlement_bank\" : settlement_bank , \"account_number\" : account_number , \"percentage_charge\" : percentage_charge , \"description\" : description , } optional_params = [ ( \"primary_contact_email\" , primary_contact_email ), ( \"primary_contact_name\" , primary_contact_name ), ( \"primary_contact_phone\" , primary_contact_phone ), ( \"metadata\" , metadata ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) get_subaccount ( id_or_code ) Get details of a subaccount on your integration. Parameters str The subaccount ID or code you want to fetch Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subaccounts.py 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def get_subaccount ( self , id_or_code : str ) -> Response : \"\"\"Get details of a subaccount on your integration. Parameters ---------- id_or_code: str The subaccount ``ID`` or ``code`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subaccount/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) get_subaccounts ( start_date , end_date , page = 1 , pagination = 50 ) Fetch subaccounts available on your integration. Parameters str A timestamp from which to start listing subaccounts e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 str A timestamp at which to stop listing subaccounts e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subaccounts.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def get_subaccounts ( self , start_date : str , end_date : str , page = 1 , pagination = 50 ) -> Response : \"\"\"Fetch subaccounts available on your integration. Parameters ---------- start_date: str A timestamp from which to start listing subaccounts e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: str A timestamp at which to stop listing subaccounts e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subaccount?perPage= { pagination } \" ) query_params = [ ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"page\" , page ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) update ( id_or_code , business_name , settlement_bank , account_number = None , active = None , percentage_charge = None , description = None , primary_contact_email = None , primary_contact_name = None , primary_contact_phone = None , settlement_schedule = None , metadata = None ) Update a subaccount details on your integration. str Subaccount's ID or code str Name of business for subaccount str Bank Code for the bank. You can get the list of Bank Codes by calling the .get_banks method from the Miscellaneous API wrapper Optional[str] Bank Account Number Optional[bool] Activate or deactivate a subaccount. Optional[float] The default percentage charged when receiving on behalf of this subaccount Optional[str] A description for this subaccount Optional[str] A contact email for the subaccount Optional[str] A name for the contact person for this subaccount Optional[str] A phone number to call for this subaccount Optional[Schedule] Schedule.AUTO means payout is T+1 and manual means payout to the subaccount should only be made when requested. Defaults to Schedule.AUTO Optional[dict[str,Any]] Add a custom_fields attribute which has a list of dictionaries if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: {\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]} Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subaccounts.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 def update ( self , id_or_code : str , business_name : str , settlement_bank : str , account_number : Optional [ str ] = None , active : Optional [ bool ] = None , percentage_charge : Optional [ float ] = None , description : Optional [ str ] = None , primary_contact_email : Optional [ str ] = None , primary_contact_name : Optional [ str ] = None , primary_contact_phone : Optional [ str ] = None , settlement_schedule : Optional [ Schedule ] = None , metadata : Optional [ dict [ str , Any ]] = None , ) -> Response : \"\"\"Update a subaccount details on your integration. id_or_code: str Subaccount's ID or code business_name: str Name of business for subaccount settlement_bank: str Bank Code for the bank. You can get the list of Bank Codes by calling the ``.get_banks`` method from the Miscellaneous API wrapper account_number: Optional[str] Bank Account Number active: Optional[bool] Activate or deactivate a subaccount. percentage_charge: Optional[float] The default percentage charged when receiving on behalf of this subaccount description: Optional[str] A description for this subaccount primary_contact_email: Optional[str] A contact email for the subaccount primary_contact_name: Optional[str] A name for the contact person for this subaccount primary_contact_phone: Optional[str] A phone number to call for this subaccount settlement_schedule: Optional[Schedule] ``Schedule.AUTO`` means payout is T+1 and manual means payout to the subaccount should only be made when requested. Defaults to ``Schedule.AUTO`` metadata: Optional[dict[str,Any]] Add a custom_fields attribute which has a list of dictionaries if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: ``{\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]}`` Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"id_or_code\" : id_or_code , \"business_name\" : business_name , \"settlement_bank\" : settlement_bank , } optional_params = [ ( \"account_number\" , account_number ), ( \"active\" , active ), ( \"percentage_charge\" , percentage_charge ), ( \"description\" , description ), ( \"primary_contact_email\" , primary_contact_email ), ( \"primary_contact_name\" , primary_contact_name ), ( \"primary_contact_phone\" , primary_contact_phone ), ( \"settlement_schedule\" , settlement_schedule ), ( \"metadata\" , metadata ), ] payload = add_to_payload ( optional_params , payload ) url = self . _url ( f \"/subaccount/ { id_or_code } \" ) return self . _handle_request ( \"PUT\" , url , payload ) Subscription Bases: BaseAPI Provides a wrapper for paystack Subscriptions API The Subscriptions API allows you to create and manage recurring payment on your integration. https://paystack.com/docs/api/#subscription Source code in pypaystack2/api/subscriptions.pyclass Subscription ( BaseAPI ): \"\"\"Provides a wrapper for paystack Subscriptions API The Subscriptions API allows you to create and manage recurring payment on your integration. https://paystack.com/docs/api/#subscription \"\"\" def create ( self , customer : str , plan : str , authorization : str , start_date : Optional [ str ] = None , ) -> Response : \"\"\"Create a subscription on your integration Parameters ---------- customer: str Customer's email address or customer code plan: str Plan code authorization: str If customer has multiple authorizations, you can set the desired authorization you wish to use for this subscription here. If this is not supplied, the customer's most recent authorization would be used start_date: Optional[str] Set the date for the first debit. (ISO 8601 format) e.g. 2017-05-16T00:30:13+01:00 Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Email Token paystack creates an email token on each subscription to allow customers cancel their subscriptions from within the invoices sent to their mailboxes. Since they are not authorized, the email tokens are what we use to authenticate the requests over the API. \"\"\" url = self . _url ( \"/subscription\" ) payload = { \"customer\" : customer , \"plan\" : plan , \"authorization\" : authorization } optional_params = [ ( \"start_date\" , start_date ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_subscriptions ( self , page = 1 , pagination = 50 , customer : Optional [ int ] = None , plan : Optional [ int ] = None , ) -> Response : \"\"\"Fetch subscriptions available on your integration. Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. customer: Optional[int] Filter by Customer ID plan: Optional[int] Filter by Plan ID Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/plan/?perPage=\" + str ( pagination )) query_params = [ ( \"page\" , page ), ( \"customer\" , customer ), ( \"plan\" , plan ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_subscription ( self , id_or_code : str ) -> Response : \"\"\"Fetch details of a subscription on your integration. Parameters ---------- id_or_code: str The subscription ``ID`` or ``code`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subscription/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) def enable ( self , code : str , token : str ) -> Response : \"\"\"Enable a subscription on your integration Parameters ---------- code: str Subscription code token: str Email token Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/subscription/enable\" ) payload = { \"code\" : code , \"token\" : token , } return self . _handle_request ( \"POST\" , url , payload ) def disable ( self , code : str , token : str ) -> Response : \"\"\"Disable a subscription on your integration Parameters ---------- code: str Subscription code token: str Email token Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/subscription/disable\" ) payload = { \"code\" : code , \"token\" : token , } return self . _handle_request ( \"POST\" , url , payload ) def get_update_link ( self , code : str ) -> Response : \"\"\"Generate a link for updating the card on a subscription Parameters ---------- code: str Subscription code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subscription/ { code } /manage/link/\" ) return self . _handle_request ( \"GET\" , url ) def send_update_link ( self , code : str ) -> Response : \"\"\"Email a customer a link for updating the card on their subscription Parameters ---------- code: str Subscription code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subscription/ { code } /manage/email/\" ) payload = { \"code\" : \"code\" } return self . _handle_request ( \"POST\" , url , payload ) create ( customer , plan , authorization , start_date = None ) Create a subscription on your integration Parameters str Customer's email address or customer code str Plan code str If customer has multiple authorizations, you can set the desired authorization you wish to use for this subscription here. If this is not supplied, the customer's most recent authorization would be used Optional[str] Set the date for the first debit. (ISO 8601 format) e.g. 2017-05-16T00:30:13+01:00 Returns Response A named tuple containing the response gotten from paystack's server. Note Email Token paystack creates an email token on each subscription to allow customers cancel their subscriptions from within the invoices sent to their mailboxes. Since they are not authorized, the email tokens are what we use to authenticate the requests over the API. Source code in pypaystack2/api/subscriptions.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def create ( self , customer : str , plan : str , authorization : str , start_date : Optional [ str ] = None , ) -> Response : \"\"\"Create a subscription on your integration Parameters ---------- customer: str Customer's email address or customer code plan: str Plan code authorization: str If customer has multiple authorizations, you can set the desired authorization you wish to use for this subscription here. If this is not supplied, the customer's most recent authorization would be used start_date: Optional[str] Set the date for the first debit. (ISO 8601 format) e.g. 2017-05-16T00:30:13+01:00 Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Email Token paystack creates an email token on each subscription to allow customers cancel their subscriptions from within the invoices sent to their mailboxes. Since they are not authorized, the email tokens are what we use to authenticate the requests over the API. \"\"\" url = self . _url ( \"/subscription\" ) payload = { \"customer\" : customer , \"plan\" : plan , \"authorization\" : authorization } optional_params = [ ( \"start_date\" , start_date ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) disable ( code , token ) Disable a subscription on your integration Parameters str Subscription code str Email token Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subscriptions.py 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 def disable ( self , code : str , token : str ) -> Response : \"\"\"Disable a subscription on your integration Parameters ---------- code: str Subscription code token: str Email token Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/subscription/disable\" ) payload = { \"code\" : code , \"token\" : token , } return self . _handle_request ( \"POST\" , url , payload ) enable ( code , token ) Enable a subscription on your integration Parameters str Subscription code str Email token Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subscriptions.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 def enable ( self , code : str , token : str ) -> Response : \"\"\"Enable a subscription on your integration Parameters ---------- code: str Subscription code token: str Email token Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/subscription/enable\" ) payload = { \"code\" : code , \"token\" : token , } return self . _handle_request ( \"POST\" , url , payload ) get_subscription ( id_or_code ) Fetch details of a subscription on your integration. Parameters str The subscription ID or code you want to fetch Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subscriptions.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 def get_subscription ( self , id_or_code : str ) -> Response : \"\"\"Fetch details of a subscription on your integration. Parameters ---------- id_or_code: str The subscription ``ID`` or ``code`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subscription/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) get_subscriptions ( page = 1 , pagination = 50 , customer = None , plan = None ) Fetch subscriptions available on your integration. Parameters int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Optional[int] Filter by Customer ID Optional[int] Filter by Plan ID Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subscriptions.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def get_subscriptions ( self , page = 1 , pagination = 50 , customer : Optional [ int ] = None , plan : Optional [ int ] = None , ) -> Response : \"\"\"Fetch subscriptions available on your integration. Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. customer: Optional[int] Filter by Customer ID plan: Optional[int] Filter by Plan ID Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/plan/?perPage=\" + str ( pagination )) query_params = [ ( \"page\" , page ), ( \"customer\" , customer ), ( \"plan\" , plan ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) get_update_link ( code ) Generate a link for updating the card on a subscription Parameters str Subscription code Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subscriptions.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 def get_update_link ( self , code : str ) -> Response : \"\"\"Generate a link for updating the card on a subscription Parameters ---------- code: str Subscription code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subscription/ { code } /manage/link/\" ) return self . _handle_request ( \"GET\" , url ) send_update_link ( code ) Email a customer a link for updating the card on their subscription Parameters str Subscription code Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subscriptions.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 def send_update_link ( self , code : str ) -> Response : \"\"\"Email a customer a link for updating the card on their subscription Parameters ---------- code: str Subscription code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subscription/ { code } /manage/email/\" ) payload = { \"code\" : \"code\" } return self . _handle_request ( \"POST\" , url , payload ) Transaction Bases: BaseAPI Provides a wrapper for paystack Transactions API The Transactions API allows you create and manage payments on your integration. https://paystack.com/docs/api/#transaction Source code in pypaystack2/api/transactions.pyclass Transaction ( BaseAPI ): \"\"\"Provides a wrapper for paystack Transactions API The Transactions API allows you create and manage payments on your integration. https://paystack.com/docs/api/#transaction \"\"\" def initialize ( self , amount : int , email : str , currency : Optional [ Currency ] = None , reference : Optional [ str ] = None , callback_url : Optional [ str ] = None , plan : Optional [ str ] = None , invoice_limit : Optional [ int ] = None , metadata : Optional [ dict [ str , Any ]] = None , channels : Optional [ list [ Channel ]] = None , split_code : Optional [ str ] = None , subaccount : Optional [ str ] = None , transfer_charge : Optional [ int ] = None , bearer : Optional [ Bearer ] = None , ) -> Response : \"\"\"Initialize a transaction from your backend Parameters ---------- amount: int Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` email: str Customer's email address currency: Optional[Currency] Any value from the ``Currency`` enum. reference: Optional[str] Unique transaction reference. Only ``-, ., =`` and alphanumeric characters allowed. callback_url: Optional[str] Fully qualified url, e.g. ``https://example.com/`` . Use this to override the callback url provided on the dashboard for this transaction plan: Optional[str] If transaction is to create a subscription to a predefined plan, provide plan code here. This would invalidate the value provided in ``amount`` invoice_limit: Optional[int] Number of times to charge customer during subscription to plan metadata: Optional[dict[str,Any]] A dictionary of additional info. check out this link for more information. https://paystack.com/docs/payments/metadata channels: Optional[list[Channel]] A list of ``Channel`` enum values to control what channels you want to make available to the user to make a payment with split_code: Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w subaccount: Optional[str] The code for the subaccount that owns the payment. e.g. ACCT_8f4s1eq7ml6rlzj transfer_charge: Optional[int] An amount used to override the split configuration for a single split payment. If set, the amount specified goes to the main account regardless of the split configuration. bearer: Optional[Bearer] Any value from the ``Bearer`` enum. Who bears Paystack charges? Returns ------- Response A named tuple containing the response gotten from paystack's server. Raises ------ InvalidDataError When email is not provided. \"\"\" amount = validate_amount ( amount ) if not email : raise InvalidDataError ( \"Customer's Email is required for initialization\" ) url = self . _url ( \"/transaction/initialize\" ) payload = { \"email\" : email , \"amount\" : amount , } optional_params = [ ( \"currency\" , currency ), ( \"reference\" , reference ), ( \"callback_url\" , callback_url ), ( \"plan\" , plan ), ( \"invoice_limit\" , invoice_limit ), ( \"metadata\" , metadata ), ( \"channels\" , channels ), ( \"split_code\" , split_code ), ( \"subaccount\" , subaccount ), ( \"transfer_charge\" , transfer_charge ), ( \"bearer\" , bearer ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def verify ( self , reference : str ) -> Response : \"\"\"Confirm the status of a transaction Parameters ---------- reference: str The transaction reference used to intiate the transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" reference = str ( reference ) url = self . _url ( f \"/transaction/verify/ { reference } \" ) return self . _handle_request ( \"GET\" , url ) def get_transactions ( self , customer : Optional [ int ] = None , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , status : Optional [ TransactionStatus ] = None , page : Optional [ int ] = None , amount : Optional [ int ] = None , pagination = 50 , ) -> Response : \"\"\"Fetch transactions carried out on your integration. Parameters ---------- customer: Optional[int] Specify an ID for the customer whose transactions you want to retrieve start_date: Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 status: Optional[TransactionStatus] Filter transactions by status. any value from the ``TransactionStatus`` enum page: Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. amount: Optional[int] Filter transactions by amount. Specify the amount (in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR``) pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transaction/?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"customer\" , customer ), ( \"status\" , status ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"amount\" , amount ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_transaction ( self , id : str ) -> Response : \"\"\"Get details of a transaction carried out on your integration. Parameters ---------- id: str An ID for the transaction to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transaction/ { id } /\" ) return self . _handle_request ( \"GET\" , url ) def charge ( self , amount : int , email : str , auth_code : str , reference : Optional [ str ] = None , currency : Optional [ Currency ] = None , metadata : Optional [ dict [ str , Any ]] = None , channels : Optional [ list [ Channel ]] = None , subaccount : Optional [ str ] = None , transaction_charge : Optional [ int ] = None , bearer : Optional [ Bearer ] = None , queue : bool = False , ) -> Response : \"\"\" All authorizations marked as reusable can be charged with this endpoint whenever you need to receive payments. Parameters ---------- amount: int email: str Customer's email address auth_code: str Valid authorization code to charge reference: Optional[str] Unique transaction reference. Only ``-, ., =`` and alphanumeric characters allowed. currency: Optional[Currency] Currency in which amount should be charged. Any value from the ``Currency`` enum. metadata: Optional[dict[str,Any]] Add a custom_fields attribute which has an array of objects if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: ``{\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]}`` channels: Optional[list[Channel]] A list of ``Channel`` enum values to control what channels you want to make available to the user to make a payment with subaccount: Optional[str] The code for the subaccount that owns the payment. e.g. ACCT_8f4s1eq7ml6rlzj transaction_charge: Optional[int] A flat fee to charge the subaccount for this transaction (in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR). This overrides the split percentage set when the subaccount was created. Ideally, you will need to use this if you are splitting in flat rates (since subaccount creation only allows for percentage split). e.g. 7000 for a 70 naira bearer: Optional[Bearer] Who bears Paystack charges? any value from the ``Beaer`` enum queue: bool If you are making a scheduled charge call, it is a good idea to queue them so the processing system does not get overloaded causing transaction processing errors. Set ``queue=True`` to take advantage of our queued charging. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" amount = validate_amount ( amount ) if not email : raise InvalidDataError ( \"Customer's Email is required to charge\" ) if not auth_code : raise InvalidDataError ( \"Customer's Auth code is required to charge\" ) url = self . _url ( \"/transaction/charge_authorization\" ) payload = { \"authorization_code\" : auth_code , \"email\" : email , \"amount\" : amount , } optional_params = [ ( \"reference\" , reference ), ( \"currency\" , currency ), ( \"metadata\" , metadata ), ( \"channels\" , channels ), ( \"subaccount\" , subaccount ), ( \"transaction_charge\" , transaction_charge ), ( \"bearer\" , bearer ), ( \"queue\" , queue ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def check_authorization ( self , amount : int , email : str , auth_code : str , currency : Optional [ Currency ] = None , ) -> Response : \"\"\"All Mastercard and Visa authorizations can be checked with this endpoint to know if they have funds for the payment you seek. This method should be used when you do not know the exact amount to charge a card when rendering a service. It should be used to check if a card has enough funds based on a maximum range value. It is well suited: - Ride hailing services - Logistics services You shouldn't use this method to check a card for sufficient funds if you are going to charge the user immediately. This is because we hold funds when this endpoint is called which can lead to an insufficient funds error. Parameters ---------- amount: int Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` email: str Customer's email address auth_code: str Valid authorization code to charge currency: Optional[Currency] Currency in which amount should be charged. Any value from the ``Currency`` enum. Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- This feature is only available to businesses in Nigeria. \"\"\" amount = validate_amount ( amount ) if not email : raise InvalidDataError ( \"Customer's Email is required to charge\" ) if not auth_code : raise InvalidDataError ( \"Customer's Auth code is required to charge\" ) url = self . _url ( \"/transaction/check_authorization\" ) payload = { \"authorization_code\" : auth_code , \"email\" : email , \"amount\" : amount , } optional_params = [ ( \"currency\" , currency ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_timeline ( self , id_or_ref : str ) -> Response : \"\"\"View the timeline of a transaction Parameters ---------- id_or_ref: str The ID or the reference of the transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transaction/timeline/ { id_or_ref } \" ) return self . _handle_request ( \"GET\" , url ) def totals ( self , page : Optional [ int ] = None , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , pagination = 50 , ): \"\"\"Total amount received on your account Parameters ---------- page: Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transaction/totals/?perPage= { pagination } \" ) url = url + f \"&page= { page } \" if page else url url = url + f \"&from= { start_date } \" if start_date else url url = url + f \"&page= { end_date } \" if end_date else url return self . _handle_request ( \"GET\" , url ) def export ( self , page : Optional [ int ] = None , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , customer : Optional [ int ] = None , status : Optional [ TransactionStatus ] = None , currency : Optional [ Currency ] = None , amount : Optional [ int ] = None , settled : Optional [ bool ] = None , settlement : Optional [ int ] = None , payment_page : Optional [ int ] = None , pagination = 50 , ) -> Response : \"\"\"Fetch transactions carried out on your integration. Parameters ---------- page: Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 customer: Optional[int] Specify an ID for the customer whose transactions you want to retrieve status: Optional[TransactionStatus] Filter transactions by status. Any value from the ``TransactionStatus`` enum currency: Optional[Currency] Specify the transaction currency to export. Any value from the ``Currency`` enum amount: Optional[int] Filter transactions by amount. Specify the amount, in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` settled: Optional[bool] Set to ``True`` to export only settled transactions. ``False`` for pending transactions. Leave undefined to export all transactions settlement: Optional[int] An ID for the settlement whose transactions we should export payment_page: Optional[int] Specify a payment page's id to export only transactions conducted on said page pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if amount : amount = validate_amount ( amount ) url = self . _url ( f \"/transaction/export/?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"customer\" , customer ), ( \"status\" , status ), ( \"currency\" , currency ), ( \"settled\" , settled ), ( \"settlement\" , settlement ), ( \"payment_page\" , payment_page ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def partial_debit ( self , auth_code : str , currency : Currency , amount : int , email : str , reference : Optional [ str ] = None , at_least : Optional [ int ] = None , ): \"\"\"Retrieve part of a payment from a customer Parameters ---------- auth_code: str Authorization Code currency: Currency Specify the currency you want to debit. Any value from the ``Currency`` enum. amount: int Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` email: str Customer's email address (attached to the authorization code) reference: Optional[str] Unique transaction reference. Only `-, ., =` and alphanumeric characters allowed. at_least: Optional[int] Minimum amount to charge Returns ------- Response A named tuple containing the response gotten from paystack's server. Raises ------ InvalidDataError - When Customer's email is not provided. - When Customer's auth code is not provided. \"\"\" amount = validate_amount ( amount ) if at_least : at_least = validate_amount ( at_least ) if not email : raise InvalidDataError ( \"Customer's Email is required to charge\" ) if not auth_code : raise InvalidDataError ( \"Customer's Auth code is required to charge\" ) url = self . _url ( \"/transaction/partial_debit\" ) payload = { \"authorization_code\" : auth_code , \"currency\" : currency , \"amount\" : amount , \"email\" : email , } optional_params = [( \"reference\" , reference ), ( \"at_least\" , at_least )] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_transfer_banks ( self ): # TODO: Deprecate. it's available in Miscellaneous API \"\"\"Fetch transfer banks Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Deprecation Notice it's available in Miscellaneous API wrapper. may be removed in future release \"\"\" url = self . _url ( \"/bank\" ) return self . _handle_request ( \"GET\" , url ) def create_transfer_customer ( self , bank_code : str , account_number : int , account_name : str ) -> Response : # TODO: Deprecate. it's available in TransferReceipt API \"\"\"Create a transfer customer Parameters ---------- bank_code account_number account_name Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ----- Deprecation Notice it's available in TransferReceipt API wrapper. may be removed in future release \"\"\" url = self . _url ( \"/transferrecipient\" ) payload = { \"type\" : \"nuban\" , \"currency\" : \"NGN\" , \"bank_code\" : bank_code , \"account_number\" : account_number , \"name\" : account_name , } return self . _handle_request ( \"POST\" , url , payload ) def transfer ( self , recipient_code : str , amount : int , reason : str , reference : Optional [ str ] = None , ) -> Response : # TODO: Deprecate. it's available in Transfer API \"\"\"Initiates transfer to a customer Parameters ---------- recipient_code amount reason reference Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Deprecation Notice it's available in Transfer API wrapper. may be removed in future release \"\"\" amount = validate_amount ( amount ) url = self . _url ( \"/transfer\" ) payload = { \"amount\" : amount , \"reason\" : reason , \"recipient\" : recipient_code , \"source\" : \"balance\" , \"currency\" : \"NGN\" , } if reference : payload . update ({ \"reference\" : reference }) return self . _handle_request ( \"POST\" , url , payload ) charge ( amount , email , auth_code , reference = None , currency = None , metadata = None , channels = None , subaccount = None , transaction_charge = None , bearer = None , queue = False ) All authorizations marked as reusable can be charged with this endpoint whenever you need to receive payments. Parameters amount: int str Customer's email address str Valid authorization code to charge Optional[str] Unique transaction reference. Only -, ., = and alphanumeric characters allowed. Optional[Currency] Currency in which amount should be charged. Any value from the Currency enum. Optional[dict[str,Any]] Add a custom_fields attribute which has an array of objects if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: {\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]} Optional[list[Channel]] A list of Channel enum values to control what channels you want to make available to the user to make a payment with Optional[str] The code for the subaccount that owns the payment. e.g. ACCT_8f4s1eq7ml6rlzj Optional[int] A flat fee to charge the subaccount for this transaction (in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR). This overrides the split percentage set when the subaccount was created. Ideally, you will need to use this if you are splitting in flat rates (since subaccount creation only allows for percentage split). e.g. 7000 for a 70 naira Optional[Bearer] Who bears Paystack charges? any value from the Beaer enum bool If you are making a scheduled charge call, it is a good idea to queue them so the processing system does not get overloaded causing transaction processing errors. Set queue=True to take advantage of our queued charging. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transactions.py 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 def charge ( self , amount : int , email : str , auth_code : str , reference : Optional [ str ] = None , currency : Optional [ Currency ] = None , metadata : Optional [ dict [ str , Any ]] = None , channels : Optional [ list [ Channel ]] = None , subaccount : Optional [ str ] = None , transaction_charge : Optional [ int ] = None , bearer : Optional [ Bearer ] = None , queue : bool = False , ) -> Response : \"\"\" All authorizations marked as reusable can be charged with this endpoint whenever you need to receive payments. Parameters ---------- amount: int email: str Customer's email address auth_code: str Valid authorization code to charge reference: Optional[str] Unique transaction reference. Only ``-, ., =`` and alphanumeric characters allowed. currency: Optional[Currency] Currency in which amount should be charged. Any value from the ``Currency`` enum. metadata: Optional[dict[str,Any]] Add a custom_fields attribute which has an array of objects if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: ``{\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]}`` channels: Optional[list[Channel]] A list of ``Channel`` enum values to control what channels you want to make available to the user to make a payment with subaccount: Optional[str] The code for the subaccount that owns the payment. e.g. ACCT_8f4s1eq7ml6rlzj transaction_charge: Optional[int] A flat fee to charge the subaccount for this transaction (in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR). This overrides the split percentage set when the subaccount was created. Ideally, you will need to use this if you are splitting in flat rates (since subaccount creation only allows for percentage split). e.g. 7000 for a 70 naira bearer: Optional[Bearer] Who bears Paystack charges? any value from the ``Beaer`` enum queue: bool If you are making a scheduled charge call, it is a good idea to queue them so the processing system does not get overloaded causing transaction processing errors. Set ``queue=True`` to take advantage of our queued charging. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" amount = validate_amount ( amount ) if not email : raise InvalidDataError ( \"Customer's Email is required to charge\" ) if not auth_code : raise InvalidDataError ( \"Customer's Auth code is required to charge\" ) url = self . _url ( \"/transaction/charge_authorization\" ) payload = { \"authorization_code\" : auth_code , \"email\" : email , \"amount\" : amount , } optional_params = [ ( \"reference\" , reference ), ( \"currency\" , currency ), ( \"metadata\" , metadata ), ( \"channels\" , channels ), ( \"subaccount\" , subaccount ), ( \"transaction_charge\" , transaction_charge ), ( \"bearer\" , bearer ), ( \"queue\" , queue ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) check_authorization ( amount , email , auth_code , currency = None ) All Mastercard and Visa authorizations can be checked with this endpoint to know if they have funds for the payment you seek. This method should be used when you do not know the exact amount to charge a card when rendering a service. It should be used to check if a card has enough funds based on a maximum range value. It is well suited Ride hailing services Logistics services You shouldn't use this method to check a card for sufficient funds if you are going to charge the user immediately. This is because we hold funds when this endpoint is called which can lead to an insufficient funds error. Parameters int Amount should be in kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR str Customer's email address str Valid authorization code to charge Optional[Currency] Currency in which amount should be charged. Any value from the Currency enum. Returns Response A named tuple containing the response gotten from paystack's server. Note This feature is only available to businesses in Nigeria. Source code in pypaystack2/api/transactions.py 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 def check_authorization ( self , amount : int , email : str , auth_code : str , currency : Optional [ Currency ] = None , ) -> Response : \"\"\"All Mastercard and Visa authorizations can be checked with this endpoint to know if they have funds for the payment you seek. This method should be used when you do not know the exact amount to charge a card when rendering a service. It should be used to check if a card has enough funds based on a maximum range value. It is well suited: - Ride hailing services - Logistics services You shouldn't use this method to check a card for sufficient funds if you are going to charge the user immediately. This is because we hold funds when this endpoint is called which can lead to an insufficient funds error. Parameters ---------- amount: int Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` email: str Customer's email address auth_code: str Valid authorization code to charge currency: Optional[Currency] Currency in which amount should be charged. Any value from the ``Currency`` enum. Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- This feature is only available to businesses in Nigeria. \"\"\" amount = validate_amount ( amount ) if not email : raise InvalidDataError ( \"Customer's Email is required to charge\" ) if not auth_code : raise InvalidDataError ( \"Customer's Auth code is required to charge\" ) url = self . _url ( \"/transaction/check_authorization\" ) payload = { \"authorization_code\" : auth_code , \"email\" : email , \"amount\" : amount , } optional_params = [ ( \"currency\" , currency ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) create_transfer_customer ( bank_code , account_number , account_name ) Create a transfer customer Parameters bank_code account_number account_name Returns Response A named tuple containing the response gotten from paystack's server. Note Deprecation Notice it's available in TransferReceipt API wrapper. may be removed in future release Source code in pypaystack2/api/transactions.py 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 def create_transfer_customer ( self , bank_code : str , account_number : int , account_name : str ) -> Response : # TODO: Deprecate. it's available in TransferReceipt API \"\"\"Create a transfer customer Parameters ---------- bank_code account_number account_name Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ----- Deprecation Notice it's available in TransferReceipt API wrapper. may be removed in future release \"\"\" url = self . _url ( \"/transferrecipient\" ) payload = { \"type\" : \"nuban\" , \"currency\" : \"NGN\" , \"bank_code\" : bank_code , \"account_number\" : account_number , \"name\" : account_name , } return self . _handle_request ( \"POST\" , url , payload ) export ( page = None , start_date = None , end_date = None , customer = None , status = None , currency = None , amount = None , settled = None , settlement = None , payment_page = None , pagination = 50 ) Fetch transactions carried out on your integration. Parameters Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[int] Specify an ID for the customer whose transactions you want to retrieve Optional[TransactionStatus] Filter transactions by status. Any value from the TransactionStatus enum Optional[Currency] Specify the transaction currency to export. Any value from the Currency enum Optional[int] Filter transactions by amount. Specify the amount, in kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR Optional[bool] Set to True to export only settled transactions. False for pending transactions. Leave undefined to export all transactions Optional[int] An ID for the settlement whose transactions we should export Optional[int] Specify a payment page's id to export only transactions conducted on said page int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transactions.py 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 def export ( self , page : Optional [ int ] = None , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , customer : Optional [ int ] = None , status : Optional [ TransactionStatus ] = None , currency : Optional [ Currency ] = None , amount : Optional [ int ] = None , settled : Optional [ bool ] = None , settlement : Optional [ int ] = None , payment_page : Optional [ int ] = None , pagination = 50 , ) -> Response : \"\"\"Fetch transactions carried out on your integration. Parameters ---------- page: Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 customer: Optional[int] Specify an ID for the customer whose transactions you want to retrieve status: Optional[TransactionStatus] Filter transactions by status. Any value from the ``TransactionStatus`` enum currency: Optional[Currency] Specify the transaction currency to export. Any value from the ``Currency`` enum amount: Optional[int] Filter transactions by amount. Specify the amount, in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` settled: Optional[bool] Set to ``True`` to export only settled transactions. ``False`` for pending transactions. Leave undefined to export all transactions settlement: Optional[int] An ID for the settlement whose transactions we should export payment_page: Optional[int] Specify a payment page's id to export only transactions conducted on said page pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if amount : amount = validate_amount ( amount ) url = self . _url ( f \"/transaction/export/?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"customer\" , customer ), ( \"status\" , status ), ( \"currency\" , currency ), ( \"settled\" , settled ), ( \"settlement\" , settlement ), ( \"payment_page\" , payment_page ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) get_timeline ( id_or_ref ) View the timeline of a transaction Parameters str The ID or the reference of the transaction Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transactions.py 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 def get_timeline ( self , id_or_ref : str ) -> Response : \"\"\"View the timeline of a transaction Parameters ---------- id_or_ref: str The ID or the reference of the transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transaction/timeline/ { id_or_ref } \" ) return self . _handle_request ( \"GET\" , url ) get_transaction ( id ) Get details of a transaction carried out on your integration. Parameters str An ID for the transaction to fetch Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transactions.py 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 def get_transaction ( self , id : str ) -> Response : \"\"\"Get details of a transaction carried out on your integration. Parameters ---------- id: str An ID for the transaction to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transaction/ { id } /\" ) return self . _handle_request ( \"GET\" , url ) get_transactions ( customer = None , start_date = None , end_date = None , status = None , page = None , amount = None , pagination = 50 ) Fetch transactions carried out on your integration. Parameters Optional[int] Specify an ID for the customer whose transactions you want to retrieve Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[TransactionStatus] Filter transactions by status. any value from the TransactionStatus enum Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. Optional[int] Filter transactions by amount. Specify the amount (in kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR ) int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transactions.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 def get_transactions ( self , customer : Optional [ int ] = None , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , status : Optional [ TransactionStatus ] = None , page : Optional [ int ] = None , amount : Optional [ int ] = None , pagination = 50 , ) -> Response : \"\"\"Fetch transactions carried out on your integration. Parameters ---------- customer: Optional[int] Specify an ID for the customer whose transactions you want to retrieve start_date: Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 status: Optional[TransactionStatus] Filter transactions by status. any value from the ``TransactionStatus`` enum page: Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. amount: Optional[int] Filter transactions by amount. Specify the amount (in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR``) pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transaction/?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"customer\" , customer ), ( \"status\" , status ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"amount\" , amount ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) get_transfer_banks () Fetch transfer banks Returns Response A named tuple containing the response gotten from paystack's server. Note Deprecation Notice it's available in Miscellaneous API wrapper. may be removed in future release Source code in pypaystack2/api/transactions.py 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 def get_transfer_banks ( self ): # TODO: Deprecate. it's available in Miscellaneous API \"\"\"Fetch transfer banks Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Deprecation Notice it's available in Miscellaneous API wrapper. may be removed in future release \"\"\" url = self . _url ( \"/bank\" ) return self . _handle_request ( \"GET\" , url ) initialize ( amount , email , currency = None , reference = None , callback_url = None , plan = None , invoice_limit = None , metadata = None , channels = None , split_code = None , subaccount = None , transfer_charge = None , bearer = None ) Initialize a transaction from your backend Parameters int Amount should be in kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR str Customer's email address Optional[Currency] Any value from the Currency enum. Optional[str] Unique transaction reference. Only -, ., = and alphanumeric characters allowed. Optional[str] Fully qualified url, e.g. https://example.com/ . Use this to override the callback url provided on the dashboard for this transaction Optional[str] If transaction is to create a subscription to a predefined plan, provide plan code here. This would invalidate the value provided in amount Optional[int] Number of times to charge customer during subscription to plan Optional[dict[str,Any]] A dictionary of additional info. check out this link for more information. https://paystack.com/docs/payments/metadata Optional[list[Channel]] A list of Channel enum values to control what channels you want to make available to the user to make a payment with Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w Optional[str] The code for the subaccount that owns the payment. e.g. ACCT_8f4s1eq7ml6rlzj Optional[int] An amount used to override the split configuration for a single split payment. If set, the amount specified goes to the main account regardless of the split configuration. Optional[Bearer] Any value from the Bearer enum. Who bears Paystack charges? Returns Response A named tuple containing the response gotten from paystack's server. Raises InvalidDataError When email is not provided. Source code in pypaystack2/api/transactions.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def initialize ( self , amount : int , email : str , currency : Optional [ Currency ] = None , reference : Optional [ str ] = None , callback_url : Optional [ str ] = None , plan : Optional [ str ] = None , invoice_limit : Optional [ int ] = None , metadata : Optional [ dict [ str , Any ]] = None , channels : Optional [ list [ Channel ]] = None , split_code : Optional [ str ] = None , subaccount : Optional [ str ] = None , transfer_charge : Optional [ int ] = None , bearer : Optional [ Bearer ] = None , ) -> Response : \"\"\"Initialize a transaction from your backend Parameters ---------- amount: int Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` email: str Customer's email address currency: Optional[Currency] Any value from the ``Currency`` enum. reference: Optional[str] Unique transaction reference. Only ``-, ., =`` and alphanumeric characters allowed. callback_url: Optional[str] Fully qualified url, e.g. ``https://example.com/`` . Use this to override the callback url provided on the dashboard for this transaction plan: Optional[str] If transaction is to create a subscription to a predefined plan, provide plan code here. This would invalidate the value provided in ``amount`` invoice_limit: Optional[int] Number of times to charge customer during subscription to plan metadata: Optional[dict[str,Any]] A dictionary of additional info. check out this link for more information. https://paystack.com/docs/payments/metadata channels: Optional[list[Channel]] A list of ``Channel`` enum values to control what channels you want to make available to the user to make a payment with split_code: Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w subaccount: Optional[str] The code for the subaccount that owns the payment. e.g. ACCT_8f4s1eq7ml6rlzj transfer_charge: Optional[int] An amount used to override the split configuration for a single split payment. If set, the amount specified goes to the main account regardless of the split configuration. bearer: Optional[Bearer] Any value from the ``Bearer`` enum. Who bears Paystack charges? Returns ------- Response A named tuple containing the response gotten from paystack's server. Raises ------ InvalidDataError When email is not provided. \"\"\" amount = validate_amount ( amount ) if not email : raise InvalidDataError ( \"Customer's Email is required for initialization\" ) url = self . _url ( \"/transaction/initialize\" ) payload = { \"email\" : email , \"amount\" : amount , } optional_params = [ ( \"currency\" , currency ), ( \"reference\" , reference ), ( \"callback_url\" , callback_url ), ( \"plan\" , plan ), ( \"invoice_limit\" , invoice_limit ), ( \"metadata\" , metadata ), ( \"channels\" , channels ), ( \"split_code\" , split_code ), ( \"subaccount\" , subaccount ), ( \"transfer_charge\" , transfer_charge ), ( \"bearer\" , bearer ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) partial_debit ( auth_code , currency , amount , email , reference = None , at_least = None ) Retrieve part of a payment from a customer Parameters str Authorization Code Currency Specify the currency you want to debit. Any value from the Currency enum. int Amount should be in kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR str Customer's email address (attached to the authorization code) Optional[str] Unique transaction reference. Only -, ., = and alphanumeric characters allowed. Optional[int] Minimum amount to charge Returns Response A named tuple containing the response gotten from paystack's server. Raises InvalidDataError - When Customer's email is not provided. - When Customer's auth code is not provided. Source code in pypaystack2/api/transactions.py 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 def partial_debit ( self , auth_code : str , currency : Currency , amount : int , email : str , reference : Optional [ str ] = None , at_least : Optional [ int ] = None , ): \"\"\"Retrieve part of a payment from a customer Parameters ---------- auth_code: str Authorization Code currency: Currency Specify the currency you want to debit. Any value from the ``Currency`` enum. amount: int Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` email: str Customer's email address (attached to the authorization code) reference: Optional[str] Unique transaction reference. Only `-, ., =` and alphanumeric characters allowed. at_least: Optional[int] Minimum amount to charge Returns ------- Response A named tuple containing the response gotten from paystack's server. Raises ------ InvalidDataError - When Customer's email is not provided. - When Customer's auth code is not provided. \"\"\" amount = validate_amount ( amount ) if at_least : at_least = validate_amount ( at_least ) if not email : raise InvalidDataError ( \"Customer's Email is required to charge\" ) if not auth_code : raise InvalidDataError ( \"Customer's Auth code is required to charge\" ) url = self . _url ( \"/transaction/partial_debit\" ) payload = { \"authorization_code\" : auth_code , \"currency\" : currency , \"amount\" : amount , \"email\" : email , } optional_params = [( \"reference\" , reference ), ( \"at_least\" , at_least )] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) totals ( page = None , start_date = None , end_date = None , pagination = 50 ) Total amount received on your account Parameters Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transactions.py 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 def totals ( self , page : Optional [ int ] = None , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , pagination = 50 , ): \"\"\"Total amount received on your account Parameters ---------- page: Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transaction/totals/?perPage= { pagination } \" ) url = url + f \"&page= { page } \" if page else url url = url + f \"&from= { start_date } \" if start_date else url url = url + f \"&page= { end_date } \" if end_date else url return self . _handle_request ( \"GET\" , url ) transfer ( recipient_code , amount , reason , reference = None ) Initiates transfer to a customer Parameters recipient_code amount reason reference Returns Response A named tuple containing the response gotten from paystack's server. Note Deprecation Notice it's available in Transfer API wrapper. may be removed in future release Source code in pypaystack2/api/transactions.py 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 def transfer ( self , recipient_code : str , amount : int , reason : str , reference : Optional [ str ] = None , ) -> Response : # TODO: Deprecate. it's available in Transfer API \"\"\"Initiates transfer to a customer Parameters ---------- recipient_code amount reason reference Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Deprecation Notice it's available in Transfer API wrapper. may be removed in future release \"\"\" amount = validate_amount ( amount ) url = self . _url ( \"/transfer\" ) payload = { \"amount\" : amount , \"reason\" : reason , \"recipient\" : recipient_code , \"source\" : \"balance\" , \"currency\" : \"NGN\" , } if reference : payload . update ({ \"reference\" : reference }) return self . _handle_request ( \"POST\" , url , payload ) verify ( reference ) Confirm the status of a transaction Parameters str The transaction reference used to intiate the transaction Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transactions.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def verify ( self , reference : str ) -> Response : \"\"\"Confirm the status of a transaction Parameters ---------- reference: str The transaction reference used to intiate the transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" reference = str ( reference ) url = self . _url ( f \"/transaction/verify/ { reference } \" ) return self . _handle_request ( \"GET\" , url ) TransferRecipient Bases: BaseAPI Provides a wrapper for paystack Transfer Receipts API The Transfer Recipients API allows you to create and manage beneficiaries that you send money to. https://paystack.com/docs/api/#transfer-recipient Note Feature Availability This feature is only available to businesses in Nigeria and Ghana. Source code in pypaystack2/api/transfer_recipients.pyclass TransferRecipient ( BaseAPI ): \"\"\"Provides a wrapper for paystack Transfer Receipts API The Transfer Recipients API allows you to create and manage beneficiaries that you send money to. https://paystack.com/docs/api/#transfer-recipient Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" def create ( self , type : TRType , name : str , account_number : str , bank_code : Optional [ str ] = None , description : Optional [ str ] = None , currency : Optional [ Currency ] = None , auth_code : Optional [ str ] = None , metadata : Optional [ Mapping ] = None , ) -> Response : \"\"\" Creates a new recipient. A duplicate account number will lead to the retrieval of the existing record. Parameters ---------- type: TRType Recipient Type. any value from the ``TRType`` enum name: str A name for the recipient account_number: str Required if ``type`` is ``TRType.NUBAN`` or ``TRType.BASA`` bank_code: Optional[str] Required if ``type`` is ``TRType.NUBAN`` or ``TRType.BASA``. You can get the list of Bank Codes by calling the ``.get_banks`` method from the Miscellaneous API wrapper. description: Optional[str] currency: Optional[Currency] auth_code: Optional[str] metadata: Optional[Mapping] Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" # FIXME: type is a keyword arg, might replace # if it raises issues. if type == TRType . NUBAN or type == TRType . BASA : if bank_code is None : raise InvalidDataError ( \"`bank_code` is required if type is `TRType.NUBAN` or `TRType.BASA`\" ) url = self . _url ( \"/transferrecipient\" ) payload = { \"type\" : type , \"name\" : name , \"account_number\" : account_number , } optional_params = [ ( \"bank_code\" , bank_code ), ( \"description\" , description ), ( \"currency\" , currency ), ( \"authorization_code\" , auth_code ), ( \"metadata\" , metadata ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def bulk_create ( self , batch : list ) -> Response : # TODO: create a pydantic model # for batch using the fields below. # type: TRType, # name: str, # account_number: str, # bank_code: Optional[str] = None, # description: Optional[str] = None, # currency: Optional[utils.Currency] = None, # auth_code: Optional[str] = None, # metadata: Optional[Mapping] = None, \"\"\" Create multiple transfer recipients in batches. A duplicate account number will lead to the retrieval of the existing record. Parameters ---------- batch: list A list of dictionaries of transfer recipients. Each dictionary should contain ``type``, ``name``, and ``bank_code``. Any Create Transfer Recipient param can also be passed. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" # FIXME: type is a keyword arg, might replace # if it raises issues. for tr in batch : if tr . type == TRType . NUBAN or tr . type == TRType . BASA : if tr . bank_code is None : raise InvalidDataError ( \"`bank_code` is required if type is `TRType.NUBAN` or `TRType.BASA`\" ) url = self . _url ( \"/transferrecipient/bulk\" ) payload = { \"batch\" : batch , } return self . _handle_request ( \"POST\" , url , payload ) def get_transfer_receipts ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetch transfer recipients available on your integration Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specified we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing transfer recipients e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing transfer recipients e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transferrecipient?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_transfer_receipt ( self , id_or_code : str ) -> Response : \"\"\"Fetch the details of a transfer recipient Parameters ---------- id_or_code: str An ID or code for the recipient whose details you want to receive. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transferrecipient/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) def update ( self , id_or_code : str , name : str , email : Optional [ str ] = None ) -> Response : \"\"\" Update an existing recipient. An duplicate account number will lead to the retrieval of the existing record. Parameters ---------- id_or_code: str Transfer Recipient's ID or code name: str A name for the recipient email: Optional[str] Email address of the recipient Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transferrecipient/ { id_or_code } \" ) payload = { \"name\" : name } optional_params = { \"email\" : email } payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload ) def delete ( self , id_or_code : str ) -> Response : \"\"\"Deletes a transfer recipient (sets the transfer recipient to inactive) Parameters ---------- id_or_code: str An ID or code for the recipient who you want to delete. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transferrecipient/ { id_or_code } \" ) return self . _handle_request ( \"DELETE\" , url ) bulk_create ( batch ) Create multiple transfer recipients in batches. A duplicate account number will lead to the retrieval of the existing record. Parameters list A list of dictionaries of transfer recipients. Each dictionary should contain type , name , and bank_code . Any Create Transfer Recipient param can also be passed. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfer_recipients.py 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def bulk_create ( self , batch : list ) -> Response : # TODO: create a pydantic model # for batch using the fields below. # type: TRType, # name: str, # account_number: str, # bank_code: Optional[str] = None, # description: Optional[str] = None, # currency: Optional[utils.Currency] = None, # auth_code: Optional[str] = None, # metadata: Optional[Mapping] = None, \"\"\" Create multiple transfer recipients in batches. A duplicate account number will lead to the retrieval of the existing record. Parameters ---------- batch: list A list of dictionaries of transfer recipients. Each dictionary should contain ``type``, ``name``, and ``bank_code``. Any Create Transfer Recipient param can also be passed. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" # FIXME: type is a keyword arg, might replace # if it raises issues. for tr in batch : if tr . type == TRType . NUBAN or tr . type == TRType . BASA : if tr . bank_code is None : raise InvalidDataError ( \"`bank_code` is required if type is `TRType.NUBAN` or `TRType.BASA`\" ) url = self . _url ( \"/transferrecipient/bulk\" ) payload = { \"batch\" : batch , } return self . _handle_request ( \"POST\" , url , payload ) create ( type , name , account_number , bank_code = None , description = None , currency = None , auth_code = None , metadata = None ) Creates a new recipient. A duplicate account number will lead to the retrieval of the existing record. Parameters TRType Recipient Type. any value from the TRType enum str A name for the recipient str Required if type is TRType.NUBAN or TRType.BASA Optional[str] Required if type is TRType.NUBAN or TRType.BASA . You can get the list of Bank Codes by calling the .get_banks method from the Miscellaneous API wrapper. description: Optional[str] currency: Optional[Currency] auth_code: Optional[str] metadata: Optional[Mapping] Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfer_recipients.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 def create ( self , type : TRType , name : str , account_number : str , bank_code : Optional [ str ] = None , description : Optional [ str ] = None , currency : Optional [ Currency ] = None , auth_code : Optional [ str ] = None , metadata : Optional [ Mapping ] = None , ) -> Response : \"\"\" Creates a new recipient. A duplicate account number will lead to the retrieval of the existing record. Parameters ---------- type: TRType Recipient Type. any value from the ``TRType`` enum name: str A name for the recipient account_number: str Required if ``type`` is ``TRType.NUBAN`` or ``TRType.BASA`` bank_code: Optional[str] Required if ``type`` is ``TRType.NUBAN`` or ``TRType.BASA``. You can get the list of Bank Codes by calling the ``.get_banks`` method from the Miscellaneous API wrapper. description: Optional[str] currency: Optional[Currency] auth_code: Optional[str] metadata: Optional[Mapping] Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" # FIXME: type is a keyword arg, might replace # if it raises issues. if type == TRType . NUBAN or type == TRType . BASA : if bank_code is None : raise InvalidDataError ( \"`bank_code` is required if type is `TRType.NUBAN` or `TRType.BASA`\" ) url = self . _url ( \"/transferrecipient\" ) payload = { \"type\" : type , \"name\" : name , \"account_number\" : account_number , } optional_params = [ ( \"bank_code\" , bank_code ), ( \"description\" , description ), ( \"currency\" , currency ), ( \"authorization_code\" , auth_code ), ( \"metadata\" , metadata ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) delete ( id_or_code ) Deletes a transfer recipient (sets the transfer recipient to inactive) Parameters str An ID or code for the recipient who you want to delete. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfer_recipients.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 def delete ( self , id_or_code : str ) -> Response : \"\"\"Deletes a transfer recipient (sets the transfer recipient to inactive) Parameters ---------- id_or_code: str An ID or code for the recipient who you want to delete. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transferrecipient/ { id_or_code } \" ) return self . _handle_request ( \"DELETE\" , url ) get_transfer_receipt ( id_or_code ) Fetch the details of a transfer recipient Parameters str An ID or code for the recipient whose details you want to receive. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfer_recipients.py 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 def get_transfer_receipt ( self , id_or_code : str ) -> Response : \"\"\"Fetch the details of a transfer recipient Parameters ---------- id_or_code: str An ID or code for the recipient whose details you want to receive. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transferrecipient/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) get_transfer_receipts ( page = 1 , pagination = 50 , start_date = None , end_date = None ) Fetch transfer recipients available on your integration Parameters int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. int Specify how many records you want to retrieve per page. If not specified we use a default value of 50. Optional[str] A timestamp from which to start listing transfer recipients e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing transfer recipients e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfer_recipients.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 def get_transfer_receipts ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetch transfer recipients available on your integration Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specified we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing transfer recipients e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing transfer recipients e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transferrecipient?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) update ( id_or_code , name , email = None ) Update an existing recipient. An duplicate account number will lead to the retrieval of the existing record. Parameters str Transfer Recipient's ID or code str A name for the recipient Optional[str] Email address of the recipient Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfer_recipients.py 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 def update ( self , id_or_code : str , name : str , email : Optional [ str ] = None ) -> Response : \"\"\" Update an existing recipient. An duplicate account number will lead to the retrieval of the existing record. Parameters ---------- id_or_code: str Transfer Recipient's ID or code name: str A name for the recipient email: Optional[str] Email address of the recipient Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transferrecipient/ { id_or_code } \" ) payload = { \"name\" : name } optional_params = { \"email\" : email } payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload ) Transfer Bases: BaseAPI Provides a wrapper for paystack Transfers API The Transfers API allows you to automate sending money on your integration https://paystack.com/docs/api/#transfer Note This feature is only available to businesses in Nigeria and Ghana. Source code in pypaystack2/api/transfers.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 class Transfer ( BaseAPI ): \"\"\"Provides a wrapper for paystack Transfers API The Transfers API allows you to automate sending money on your integration https://paystack.com/docs/api/#transfer Note ---- This feature is only available to businesses in Nigeria and Ghana. \"\"\" def initiate ( self , amount : int , recipient : str , reason : Optional [ str ] = None , currency : Optional [ Currency ] = None , reference : Optional [ str ] = None , source = \"balance\" , ) -> Response : \"\"\" amount: int recipient: str reason: Optional[str] currency: Optional[Currency] reference: Optional[str] source: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" amount = validate_amount ( amount ) url = self . _url ( \"/transfer\" ) payload = { \"amount\" : amount , \"recipient\" : recipient , \"source\" : source , } optional_params = [ ( \"reason\" , reason ), ( \"reference\" , reference ), ( \"currency\" , currency ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def finalize ( self , transfer_code : str , otp : str , ) -> Response : \"\"\" Parameters ---------- transfer_code: str otp: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/transfer/finalize_transfer\" ) payload = { \"transfer_code\" : transfer_code , \"otp\" : otp , } return self . _handle_request ( \"POST\" , url , payload ) def bulk_transfer ( self , transfers : list , source = \"balance\" ) -> Response : \"\"\" Parameters ---------- transfers: list source: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/transfer/bulk\" ) payload = { \"transfers\" : transfers , \"source\" : source , } return self . _handle_request ( \"POST\" , url , payload ) def get_transfers ( self , customer : str , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\" Parameters ---------- customer: str page: int pagination: int start_date: Optional[str] end_date: Optional[str] Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transfer?perPage= { pagination } \" ) query_params = [ ( \"customer\" , customer ), ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_transfer ( self , id_or_code : str , ) -> Response : \"\"\" Parameters ---------- id_or_code: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transfer/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) def verify ( self , reference : str , ) -> Response : \"\"\" Parameters ---------- reference: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transfer/verify/ { reference } \" ) return self . _handle_request ( \"GET\" , url ) bulk_transfer ( transfers , source = 'balance' ) Parameters transfers: list source: str Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfers.py 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 def bulk_transfer ( self , transfers : list , source = \"balance\" ) -> Response : \"\"\" Parameters ---------- transfers: list source: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/transfer/bulk\" ) payload = { \"transfers\" : transfers , \"source\" : source , } return self . _handle_request ( \"POST\" , url , payload ) finalize ( transfer_code , otp ) Parameters transfer_code: str otp: str Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfers.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 def finalize ( self , transfer_code : str , otp : str , ) -> Response : \"\"\" Parameters ---------- transfer_code: str otp: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/transfer/finalize_transfer\" ) payload = { \"transfer_code\" : transfer_code , \"otp\" : otp , } return self . _handle_request ( \"POST\" , url , payload ) get_transfer ( id_or_code ) Parameters id_or_code: str Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfers.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 def get_transfer ( self , id_or_code : str , ) -> Response : \"\"\" Parameters ---------- id_or_code: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transfer/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) get_transfers ( customer , page = 1 , pagination = 50 , start_date = None , end_date = None ) Parameters customer: str page: int pagination: int start_date: Optional[str] end_date: Optional[str] Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfers.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 def get_transfers ( self , customer : str , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\" Parameters ---------- customer: str page: int pagination: int start_date: Optional[str] end_date: Optional[str] Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transfer?perPage= { pagination } \" ) query_params = [ ( \"customer\" , customer ), ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) initiate ( amount , recipient , reason = None , currency = None , reference = None , source = 'balance' ) amount: int recipient: str reason: Optional[str] currency: Optional[Currency] reference: Optional[str] source: str Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfers.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def initiate ( self , amount : int , recipient : str , reason : Optional [ str ] = None , currency : Optional [ Currency ] = None , reference : Optional [ str ] = None , source = \"balance\" , ) -> Response : \"\"\" amount: int recipient: str reason: Optional[str] currency: Optional[Currency] reference: Optional[str] source: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" amount = validate_amount ( amount ) url = self . _url ( \"/transfer\" ) payload = { \"amount\" : amount , \"recipient\" : recipient , \"source\" : source , } optional_params = [ ( \"reason\" , reason ), ( \"reference\" , reference ), ( \"currency\" , currency ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) verify ( reference ) Parameters reference: str Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfers.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 def verify ( self , reference : str , ) -> Response : \"\"\" Parameters ---------- reference: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transfer/verify/ { reference } \" ) return self . _handle_request ( \"GET\" , url ) TransferControl Bases: BaseAPI Provides a wrapper for paystack Transfers Control API The Transfers Control API allows you manage settings of your transfers. https://paystack.com/docs/api/#transfer-control Source code in pypaystack2/api/transfers_control.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 class TransferControl ( BaseAPI ): \"\"\"Provides a wrapper for paystack Transfers Control API The Transfers Control API allows you manage settings of your transfers. https://paystack.com/docs/api/#transfer-control \"\"\" def check_balance ( self ) -> Response : \"\"\"Fetch the available balance on your integration Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/balance\" ) return self . _handle_request ( \"GET\" , url ) def get_balance_ledger ( self ) -> Response : \"\"\"Fetch all pay-ins and pay-outs that occured on your integration Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"balance/ledger\" ) return self . _handle_request ( \"GET\" , url ) def resend_OTP ( self , transfer_code : str , reason : Reason ) -> Response : \"\"\" Generates a new OTP and sends to customer in the event they are having trouble receiving one. Parameters ---------- transfer_code: str Transfer code reason: Reason Any value from the ``Reason`` enum Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" payload = { \"transfer_code\" : transfer_code , \"reason\" : reason } url = self . _url ( \"/transfer/resend_otp\" ) return self . _handle_request ( \"POST\" , url , payload ) def disable_OTP ( self ) -> Response : \"\"\" This is used in the event that you want to be able to complete transfers programmatically without use of OTPs. No arguments required. You will get an OTP to complete the request Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" url = self . _url ( \"/transfer/disable_otp\" ) return self . _handle_request ( \"POST\" , url ) def finalize_disable_OTP ( self , otp : str ) -> Response : \"\"\"Finalize the request to disable OTP on your transfers. Parameters ---------- otp: str Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" payload = { \"otp\" : otp } url = self . _url ( \"/transfer/disable_otp_finalize\" ) return self . _handle_request ( \"POST\" , url , payload ) def enable_OTP ( self ) -> Response : \"\"\" In the event that a customer wants to stop being able to complete transfers programmatically, this endpoint helps turn OTP requirement back on. No arguments required. Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" url = self . _url ( \"/transfer/enable_otp\" ) return self . _handle_request ( \"POST\" , url ) check_balance () Fetch the available balance on your integration Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfers_control.py 12 13 14 15 16 17 18 19 20 21 def check_balance ( self ) -> Response : \"\"\"Fetch the available balance on your integration Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/balance\" ) return self . _handle_request ( \"GET\" , url ) disable_OTP () This is used in the event that you want to be able to complete transfers programmatically without use of OTPs. No arguments required. You will get an OTP to complete the request Returns Response A named tuple containing the response gotten from paystack's server. Note Feature Availability This feature is only available to businesses in Nigeria and Ghana. Source code in pypaystack2/api/transfers_control.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def disable_OTP ( self ) -> Response : \"\"\" This is used in the event that you want to be able to complete transfers programmatically without use of OTPs. No arguments required. You will get an OTP to complete the request Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" url = self . _url ( \"/transfer/disable_otp\" ) return self . _handle_request ( \"POST\" , url ) enable_OTP () In the event that a customer wants to stop being able to complete transfers programmatically, this endpoint helps turn OTP requirement back on. No arguments required. Returns Response A named tuple containing the response gotten from paystack's server. Note Feature Availability This feature is only available to businesses in Nigeria and Ghana. Source code in pypaystack2/api/transfers_control.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def enable_OTP ( self ) -> Response : \"\"\" In the event that a customer wants to stop being able to complete transfers programmatically, this endpoint helps turn OTP requirement back on. No arguments required. Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" url = self . _url ( \"/transfer/enable_otp\" ) return self . _handle_request ( \"POST\" , url ) finalize_disable_OTP ( otp ) Finalize the request to disable OTP on your transfers. Parameters otp: str Returns Response A named tuple containing the response gotten from paystack's server. Note Feature Availability This feature is only available to businesses in Nigeria and Ghana. Source code in pypaystack2/api/transfers_control.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def finalize_disable_OTP ( self , otp : str ) -> Response : \"\"\"Finalize the request to disable OTP on your transfers. Parameters ---------- otp: str Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" payload = { \"otp\" : otp } url = self . _url ( \"/transfer/disable_otp_finalize\" ) return self . _handle_request ( \"POST\" , url , payload ) get_balance_ledger () Fetch all pay-ins and pay-outs that occured on your integration Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfers_control.py 23 24 25 26 27 28 29 30 31 32 def get_balance_ledger ( self ) -> Response : \"\"\"Fetch all pay-ins and pay-outs that occured on your integration Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"balance/ledger\" ) return self . _handle_request ( \"GET\" , url ) resend_OTP ( transfer_code , reason ) Generates a new OTP and sends to customer in the event they are having trouble receiving one. Parameters str Transfer code Reason Any value from the Reason enum Returns Response A named tuple containing the response gotten from paystack's server. Note Feature Availability This feature is only available to businesses in Nigeria and Ghana. Source code in pypaystack2/api/transfers_control.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def resend_OTP ( self , transfer_code : str , reason : Reason ) -> Response : \"\"\" Generates a new OTP and sends to customer in the event they are having trouble receiving one. Parameters ---------- transfer_code: str Transfer code reason: Reason Any value from the ``Reason`` enum Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" payload = { \"transfer_code\" : transfer_code , \"reason\" : reason } url = self . _url ( \"/transfer/resend_otp\" ) return self . _handle_request ( \"POST\" , url , payload ) Verification Bases: BaseAPI Provides a wrapper for paystack Verification API The Verification API allows you to perform KYC processes. https://paystack.com/docs/api/#verification Note This feature is only available to businesses in Nigeria. Source code in pypaystack2/api/verification.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 class Verification ( BaseAPI ): \"\"\"Provides a wrapper for paystack Verification API The Verification API allows you to perform KYC processes. https://paystack.com/docs/api/#verification Note ---- This feature is only available to businesses in Nigeria. \"\"\" def resolve_account_number ( self , account_number : str , bank_code : str , ) -> Response : \"\"\"Confirm an account belongs to the right customer Parameters ---------- account_number: str Account Number bank_code: str You can get the list of bank codes by calling the Miscellaneous API wrapper ``.get_banks`` method. Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria. \"\"\" url = self . _url ( f \"/bank/resolve?account_number= { account_number } &bank_code= { bank_code } \" ) return self . _handle_request ( \"GET\" , url ) def validate_account ( self , account_name : str , account_number : str , account_type : AccountType , bank_code : str , country_code : Country , document_type : DocumentType , ) -> Response : \"\"\"Confirm the authenticity of a customer's account number before sending money Parameters ---------- account_name: str Customer's first and last name registered with their bank account_number: str Customer's account number account_type: AccountType bank_code: str The bank code of the customer\u2019s bank. You can fetch the bank codes by using Miscellaneous API wrapper ``.get_banks`` method. country_code: Country Any value from the ``Country`` enum document_type: DocumentType Customer\u2019s mode of identity. any value from the ``DocumentType`` enum. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"account_name\" : account_name , \"account_number\" : account_number , \"account_type\" : account_type , \"bank_code\" : bank_code , \"country_code\" : country_code , \"document_type\" : document_type , } url = self . _url ( f \"/bank/validate\" ) return self . _handle_request ( \"POST\" , url , payload ) def resolve_card_BIN ( self , bin : str ) -> Response : \"\"\"Get more information about a customer's card Parameters ---------- bin: str First 6 characters of card Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/decision/bin/ { bin } \" ) return self . _handle_request ( \"GET\" , url ) resolve_account_number ( account_number , bank_code ) Confirm an account belongs to the right customer Parameters str Account Number str You can get the list of bank codes by calling the Miscellaneous API wrapper .get_banks method. Returns Response A named tuple containing the response gotten from paystack's server. Note Feature Availability This feature is only available to businesses in Nigeria. Source code in pypaystack2/api/verification.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def resolve_account_number ( self , account_number : str , bank_code : str , ) -> Response : \"\"\"Confirm an account belongs to the right customer Parameters ---------- account_number: str Account Number bank_code: str You can get the list of bank codes by calling the Miscellaneous API wrapper ``.get_banks`` method. Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria. \"\"\" url = self . _url ( f \"/bank/resolve?account_number= { account_number } &bank_code= { bank_code } \" ) return self . _handle_request ( \"GET\" , url ) resolve_card_BIN ( bin ) Get more information about a customer's card Parameters str First 6 characters of card Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/verification.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 def resolve_card_BIN ( self , bin : str ) -> Response : \"\"\"Get more information about a customer's card Parameters ---------- bin: str First 6 characters of card Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/decision/bin/ { bin } \" ) return self . _handle_request ( \"GET\" , url ) validate_account ( account_name , account_number , account_type , bank_code , country_code , document_type ) Confirm the authenticity of a customer's account number before sending money Parameters str Customer's first and last name registered with their bank str Customer's account number account_type: AccountType str The bank code of the customer\u2019s bank. You can fetch the bank codes by using Miscellaneous API wrapper .get_banks method. Country Any value from the Country enum DocumentType Customer\u2019s mode of identity. any value from the DocumentType enum. Returns Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/verification.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def validate_account ( self , account_name : str , account_number : str , account_type : AccountType , bank_code : str , country_code : Country , document_type : DocumentType , ) -> Response : \"\"\"Confirm the authenticity of a customer's account number before sending money Parameters ---------- account_name: str Customer's first and last name registered with their bank account_number: str Customer's account number account_type: AccountType bank_code: str The bank code of the customer\u2019s bank. You can fetch the bank codes by using Miscellaneous API wrapper ``.get_banks`` method. country_code: Country Any value from the ``Country`` enum document_type: DocumentType Customer\u2019s mode of identity. any value from the ``DocumentType`` enum. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"account_name\" : account_name , \"account_number\" : account_number , \"account_type\" : account_type , \"bank_code\" : bank_code , \"country_code\" : country_code , \"document_type\" : document_type , } url = self . _url ( f \"/bank/validate\" ) return self . _handle_request ( \"POST\" , url , payload ) AccountType Bases: str , Enum Enum of Account types supported by paystack Source code in pypaystack2/utils.py 186 187 188 189 190 class AccountType ( str , Enum ): \"\"\"Enum of Account types supported by paystack\"\"\" PERSONAL = \"personal\" BUSINESS = \"business\" BankType Bases: str , Enum Enum of bank types Source code in pypaystack2/utils.py 200 201 202 203 204 class BankType ( str , Enum ): \"\"\"Enum of bank types\"\"\" GHIPPS = \"ghipps\" MOBILE_MONEY = \"mobile_money\" Bearer Bases: str , Enum Enum for who bears paystack charges Source code in pypaystack2/utils.py 52 53 54 55 56 57 58 class Bearer ( str , Enum ): \"\"\"Enum for who bears paystack charges\"\"\" ACCOUNT = \"account\" SUBACCOUNT = \"subaccount\" ALL_PROPOTIONAL = \"all-proportional\" ALL = \"all\" Channel Bases: str , Enum Enum of payment channels supported by paystack Source code in pypaystack2/utils.py 41 42 43 44 45 46 47 48 49 class Channel ( str , Enum ): \"\"\"Enum of payment channels supported by paystack\"\"\" CARD = \"card\" BANK = \"bank\" USSD = \"ussd\" QR = \"qr\" MOBILE_MONEY = \"mobile_money\" BANK_TRANSFER = \"bank_transfer\" ChargeStatus Bases: str , Enum Enum of charge status supported by paystack Source code in pypaystack2/utils.py 147 148 149 150 151 152 class ChargeStatus ( str , Enum ): \"\"\"Enum of charge status supported by paystack\"\"\" PENDING = \"pending\" SUCCESS = \"success\" FAILED = \"failed\" Country Bases: str , Enum Enum of countries supported by paystack Source code in pypaystack2/utils.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 class Country ( str , Enum ): \"\"\"Enum of countries supported by paystack\"\"\" NIGERIA = \"ng\" GHANA = \"gh\" @staticmethod def get_full ( val : str ) -> Optional [ str ]: \"\"\"Returns paystack supported country name in full lowercase Parameters ---------- val : str The two digit iso name of the country. Returns ------- str,optinal The name of the country in lowercase if it is supported by paystack or none. \"\"\" val = val . lower () if val == \"ng\" : return \"nigeria\" elif val == \"gh\" : return \"ghana\" return None get_full ( val ) staticmethod Returns paystack supported country name in full lowercase Parameters str The two digit iso name of the country. Returns str,optinal The name of the country in lowercase if it is supported by paystack or none. Source code in pypaystack2/utils.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 @staticmethod def get_full ( val : str ) -> Optional [ str ]: \"\"\"Returns paystack supported country name in full lowercase Parameters ---------- val : str The two digit iso name of the country. Returns ------- str,optinal The name of the country in lowercase if it is supported by paystack or none. \"\"\" val = val . lower () if val == \"ng\" : return \"nigeria\" elif val == \"gh\" : return \"ghana\" return None Currency Bases: str , Enum Enum of currencies supported by paystack. Source code in pypaystack2/utils.py 22 23 24 25 26 27 28 class Currency ( str , Enum ): \"\"\"Enum of currencies supported by paystack.\"\"\" NGN = \"NGN\" GHS = \"GHS\" ZAR = \"ZAR\" USD = \"USD\" DisputeStatus Bases: str , Enum Enum of dispute status supported by paystack Source code in pypaystack2/utils.py 207 208 209 210 211 212 213 class DisputeStatus ( str , Enum ): \"\"\"Enum of dispute status supported by paystack\"\"\" PENDING = \"pending\" RESOLVED = \"resolved\" AWAITING_BANK_FEEDBACK = \"awaiting-bank-feedback\" AWAITING_MERCHANT_FEEDBACK = \"awaiting-merchant-feedback\" DocumentType Bases: str , Enum Enum of Document types supported by paystack Source code in pypaystack2/utils.py 129 130 131 132 133 134 class DocumentType ( str , Enum ): \"\"\"Enum of Document types supported by paystack\"\"\" IDENTITY_NUMBER = \"identityNumber\" PASSPORT_NUMBER = \"passportNumber\" BUSINESS_REGISTRATION_NUMBER = \"businessRegistrationNumber\" Gateway Bases: str , Enum Enum of bank gateways supported by paystack Source code in pypaystack2/utils.py 179 180 181 182 183 class Gateway ( str , Enum ): \"\"\"Enum of bank gateways supported by paystack\"\"\" EMANDATE = \"emandate\" DIGITALBANKMANDATE = \"digitalbankmandate\" Identification Bases: str , Enum Enum of Identification methods supported by paystack Source code in pypaystack2/utils.py 112 113 114 115 116 class Identification ( str , Enum ): \"\"\"Enum of Identification methods supported by paystack\"\"\" BVN = \"bvn\" BANK_ACCOUNT = \"bank_account\" Interval Bases: str , Enum Enum of intervals supported by paystack. Source code in pypaystack2/utils.py 31 32 33 34 35 36 37 38 class Interval ( str , Enum ): \"\"\"Enum of intervals supported by paystack.\"\"\" HOURLY = \"hourly\" DAILY = \"daily\" WEEKLY = \"weekly\" MONTHLY = \"monthly\" ANNUALLY = \"annually\" InvoiceStatus Bases: str , Enum Enum of invoice status supported by paystack Source code in pypaystack2/utils.py 139 140 141 142 143 144 class InvoiceStatus ( str , Enum ): \"\"\"Enum of invoice status supported by paystack\"\"\" PENDING = \"pending\" SUCCESS = \"success\" FAILED = \"failed\" PlanStatus Bases: str , Enum Enum of plan status supported by paystack Source code in pypaystack2/utils.py 155 156 157 158 159 160 class PlanStatus ( str , Enum ): \"\"\"Enum of plan status supported by paystack\"\"\" PENDING = \"pending\" SUCCESS = \"success\" FAILED = \"failed\" Reason Bases: str , Enum Enum of Reset OTP options Source code in pypaystack2/utils.py 172 173 174 175 176 class Reason ( str , Enum ): \"\"\"Enum of Reset OTP options\"\"\" RESEND_OTP = \"resend_otp\" TRANSFER = \"transfer\" Resolution Bases: str , Enum Enum of Resolutions supported by paystack Source code in pypaystack2/utils.py 193 194 195 196 197 class Resolution ( str , Enum ): \"\"\"Enum of Resolutions supported by paystack\"\"\" MERCHANT_ACCEPTED = \"merchant-accepted\" DECLINED = \"declined\" RiskAction Bases: str , Enum Enum of RiskActions supported by paystack Source code in pypaystack2/utils.py 104 105 106 107 108 109 class RiskAction ( str , Enum ): \"\"\"Enum of RiskActions supported by paystack\"\"\" DEFAULT = \"default\" WHITELIST = \"allow\" BLACKLIST = \"deny\" Schedule Bases: str , Enum Enum of settlement schedules supported by paystack Source code in pypaystack2/utils.py 163 164 165 166 167 168 169 class Schedule ( str , Enum ): \"\"\"Enum of settlement schedules supported by paystack\"\"\" AUTO = \"auto\" WEEKLY = \"weekly\" MONTHLY = \"monthly\" MANUAL = \"manual\" SplitType Bases: str , Enum Enum of split types Source code in pypaystack2/utils.py 69 70 71 72 73 class SplitType ( str , Enum ): \"\"\"Enum of split types\"\"\" PERCENTAGE = \"percentage\" FLAT = \"flat\" TRType Bases: str , Enum Enum of Transfer Recipient types Source code in pypaystack2/utils.py 119 120 121 122 123 124 125 126 class TRType ( str , Enum ): \"\"\"Enum of Transfer Recipient types\"\"\" # FIXME: Find a better name for this class to reduce confusion. NUBAN = \"nuban\" MOBILE_MONEY = \"mobile_money\" BASA = \"basa\" TerminalEventType Bases: str , Enum Enum of the types of events supported by Terminal API Source code in pypaystack2/utils.py 9 10 11 12 13 class TerminalEventType ( str , Enum ): \"\"\"Enum of the types of events supported by Terminal API\"\"\" TRANSACTION = \"transaction\" INVOICE = \"invoice\" TransactionStatus Bases: str , Enum Enum of transaction status Source code in pypaystack2/utils.py 61 62 63 64 65 66 class TransactionStatus ( str , Enum ): \"\"\"Enum of transaction status\"\"\" FAILED = \"failed\" SUCCESS = \"success\" ABANDONED = \"abandoned\" add_to_payload ( optional_params , payload ) Adds more parameters to an existing payload. This is a utility is used in the generation of payloads for a request body. It helps to add more parameters to a payload if it is not None. e.g. say you want to send a payload which is currently {\"amount\": 20000} and you want to include an additional data such as currency if provided in the optional_params to send this {\"amount\": 20000,\"currency\":\"ngn\"} if only the currency is available otherwise send the intial payload. This functions takes a list of optional parameters which is added to the payload is they are available and returns the payload. Parameters list[tuple[str,Any]] A list of additional data to be added to the payload if it is available. It follows the format [(\"name-on-payload\",\"value\")]. e.g [(\"currency\",\"ngn\"),(\"amount\",2000)] dict[str,Any] A dictionary containing the data to be sent in the request body. Returns dict[str,Any] A dictionary of the payload updated with addtional data in the optional_params that are not None . Source code in pypaystack2/utils.py 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 def add_to_payload ( optional_params : list [ tuple [ str , Any ]], payload : dict [ str , Any ] ) -> dict [ str , Any ]: \"\"\"Adds more parameters to an existing payload. This is a utility is used in the generation of payloads for a request body. It helps to add more parameters to a payload if it is not None. e.g. say you want to send a payload which is currently ``{\"amount\": 20000}`` and you want to include an additional data such as ``currency`` if provided in the ``optional_params`` to send this ``{\"amount\": 20000,\"currency\":\"ngn\"}`` if only the currency is available otherwise send the intial payload. This functions takes a list of optional parameters which is added to the payload is they are available and returns the payload. Parameters ---------- optional_params: list[tuple[str,Any]] A list of additional data to be added to the payload if it is available. It follows the format ``[(\"name-on-payload\",\"value\")].`` e.g ``[(\"currency\",\"ngn\"),(\"amount\",2000)]`` payload: dict[str,Any] A dictionary containing the data to be sent in the request body. Returns ------- dict[str,Any] A dictionary of the payload updated with addtional data in the optional_params that are not ``None``. \"\"\" [ payload . update ({ item [ 0 ]: item [ 1 ]}) for item in optional_params if item [ 1 ] is not None ] return payload append_query_params ( query_params , url ) Adds more queries to url that already has query parameters in its suffix This function should only be used with urls that already have a query parameter suffixed to it because it makes that assumption that the url supplied is of the state http://example-url.com?firstQuery=1 and it adds more query parameters delimited by & to the end of the provided url http://example-url.com?firstQuery=1&otherQuery=2&... Parameters list[tuple[str,Any]] A list of other query parameters that should be appended to the url if it is not None. e.g [(\"page\",2),(\"pagination\",50),(\"currency\",None)] -> url&page=2&pagination=50 str The url to which additional query parameters is added. Returns str The new url with padded query parameters. Source code in pypaystack2/utils.py 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 def append_query_params ( query_params : list [ tuple [ str , Any ]], url : str ) -> str : \"\"\"Adds more queries to url that already has query parameters in its suffix This function should only be used with urls that already have a query parameter suffixed to it because it makes that assumption that the url supplied is of the state ``http://example-url.com?firstQuery=1`` and it adds more query parameters delimited by & to the end of the provided url ``http://example-url.com?firstQuery=1&otherQuery=2&...`` Parameters ---------- query_params: list[tuple[str,Any]] A list of other query parameters that should be appended to the url if it is not None. e.g ``[(\"page\",2),(\"pagination\",50),(\"currency\",None)]`` -> ``url&page=2&pagination=50`` url: str The url to which additional query parameters is added. Returns ------- str The new url with padded query parameters. \"\"\" params = [ f \"& { param [ 0 ] } = { param [ 1 ] } \" for param in query_params if param [ 1 ] is not None ] if len ( params ) == 0 : return url return url + reduce ( add , params ) validate_amount ( amount ) Helps to validate money amount. Helps to ensure that a valid amount of money is supplied as an input, to prevent cases where negative or zero value is provided as an amount. Parameters int,float The money to be validated. Returns int,float The money supplied if it is valid. Raises InvalidDataError With the cause of the validation error Source code in pypaystack2/utils.py 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 def validate_amount ( amount : Union [ int , float ]) -> Union [ int , float ]: \"\"\"Helps to validate money amount. Helps to ensure that a valid amount of money is supplied as an input, to prevent cases where negative or zero value is provided as an amount. Parameters ---------- amount: int,float The money to be validated. Returns ------- int,float The money supplied if it is valid. Raises ------ InvalidDataError With the cause of the validation error \"\"\" if not amount : raise InvalidDataError ( \"Amount to be charged is required\" ) if isinstance ( amount , int ) or isinstance ( amount , float ): # Save the sever some headaches if amount < 0 : raise InvalidDataError ( \"Negative amount is not allowed\" ) return amount else : raise InvalidDataError ( \"Amount should be a number\" ) validate_interval ( interval ) Validates that the interval supplied is supported by paystack Parameters interval:str any of the intervals supported by paystack i.e. hourly,daily weekly,monthly,annually Returns str returns the interval if it is a valid paystack interval Raises InvalidDataError to provide feedback that an invalid interval was provided. Source code in pypaystack2/utils.py 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 def validate_interval ( interval : str ) -> str : \"\"\"Validates that the interval supplied is supported by paystack Parameters ---------- interval:str any of the intervals supported by paystack i.e. hourly,daily weekly,monthly,annually Returns ------- str returns the interval if it is a valid paystack interval Raises ------ InvalidDataError to provide feedback that an invalid interval was provided. \"\"\" interval = ( interval if interval . lower () in [ \"hourly\" , \"daily\" , \"weekly\" , \"monthly\" , \"annually\" ] else None ) if not interval : raise InvalidDataError ( \"Please provide a valid plan interval\" ) return interval InvalidDataError Bases: PyPaystackError Invalid input recognised. Saves unnecessary request to the server Source code in pypaystack2/errors.py 25 26 27 28 29 30 class InvalidDataError ( PyPaystackError ): \"\"\" Invalid input recognised. Saves unnecessary request to the server \"\"\" pass InvalidMethodError Bases: PyPaystackError Invalid or unrecognized/unimplemented HTTP request method Source code in pypaystack2/errors.py 17 18 19 20 21 22 class InvalidMethodError ( PyPaystackError ): \"\"\" Invalid or unrecognized/unimplemented HTTP request method \"\"\" pass MissingAuthKeyError Bases: PyPaystackError We can't find the authentication key Source code in pypaystack2/errors.py 9 10 11 12 13 14 class MissingAuthKeyError ( PyPaystackError ): \"\"\" We can't find the authentication key \"\"\" pass PyPaystackError Bases: Exception Python Paystack Error Source code in pypaystack2/errors.py 1 2 3 4 5 6 class PyPaystackError ( Exception ): \"\"\" Python Paystack Error \"\"\" pass","title":"Reference"},{"location":"reference/#pypaystack2-package","text":"Pypaystack2 is a simple python wrapper for Paystack API. it is a fork of the original project Pypaystack Modules and packages exported by this package api : A package containing several wrappers for Paystack API, like apple pay api, bulk charges api e.t.c. utils : A module containing useful utilities and enums errors : A module containing error types for pypaystack2","title":"Pypaystack2 Package"},{"location":"reference/#pypaystack2api","text":"A package containing several wrappers for interfacing Paystack API, like apple pay api, bulk charges api e.t.c. Modules exported by this package apple_pay : A module containing implementations for interfacing with Paystack's Apple Pay API bulk_charges : A module containing implementations for interfacing with Paystack's Bulk Charges API charge : A module containing implementations for interfacing with Paystack's Charge API control_panel : A module containing implementations for interfacing with Paystack's Control Panel API customer : A module containing implementations for interfacing with Paystack's Customer API dedicated_accounts : A module containing implementations for interfacing with Paystack's Dedicated Accounts API disputes : A module containing implementations for interfacing with Paystack's Disputes API invoices : A module containing implementations for interfacing with Paystack's Invoices API miscellaneous : A module containing implementations for interfacing with Paystack's Miscellaneous API payment_pages : A module containing implementations for interfacing with Paystack's Payment Page API plans : A module containing implementations for interfacing with Paystack's Plans API products : A module containing implementations for interfacing with Paystack's Products API refunds : A module containing implementations for interfacing with Paystack's Refunds API settlements : A module containing implementations for interfacing with Paystack's Settlements API splits : A module containing implementations for interfacing with Paystack's Splits API subaccounts : A module containing implementations for interfacing with Paystack's Sub Account API subscriptions : A module containing implementations for interfacing with Paystack's Subscriptions API transactions : A module containing implementations for interfacing with Paystack's Transactions API transfer_recipients : A module containing implementations for interfacing with Paystack's Transfer Recipients API transfers : A module containing implementations for interfacing with Paystack's Transfers API transfers_control : A module containing implementations for interfacing with Paystack's Transfers Control API verification : A module containing implementations for interfacing with Paystack's Verification API","title":"pypaystack2.api"},{"location":"reference/#pypaystack2.api.apple_pay.ApplePay","text":"Bases: BaseAPI Provides a wrapper for paystack Apple Pay API The Apple Pay API allows you register your application's top-level domain or subdomain. Visit paystack api doc Source code in pypaystack2/api/apple_pay.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 class ApplePay ( BaseAPI ): \"\"\"Provides a wrapper for paystack Apple Pay API The Apple Pay API allows you register your application's top-level domain or subdomain. [Visit paystack api doc](https://paystack.com/docs/api/#apple-pay) \"\"\" def register_domain ( self , domain_name : str ) -> Response : \"\"\"Register a top-level domain or subdomain for your Apple Pay integration. Note ---- This method can only be called with one domain or subdomain at a time. Parameters ---------- domain_name: str Domain name to be registered. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/apple-pay/domain\" ) payload = { \"domainName\" : domain_name , } return self . _handle_request ( \"POST\" , url , payload ) def get_domains ( self ) -> Response : \"\"\"Fetches all registered domains on your integration. Returns an empty array if no domains have been added. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/apple-pay/domain\" ) return self . _handle_request ( \"GET\" , url ) def unregister_domain ( self , domain_name : str ) -> Response : \"\"\"Unregister a top-level domain or subdomain previously used for your Apple Pay integration. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/apple-pay/domain\" ) payload = { \"domainName\" : domain_name , } return self . _handle_request ( \"DELETE\" , url , payload )","title":"ApplePay"},{"location":"reference/#pypaystack2.api.apple_pay.ApplePay.get_domains","text":"Fetches all registered domains on your integration. Returns an empty array if no domains have been added.","title":"get_domains()"},{"location":"reference/#pypaystack2.api.apple_pay.ApplePay.get_domains--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/apple_pay.py 36 37 38 39 40 41 42 43 44 45 46 47 def get_domains ( self ) -> Response : \"\"\"Fetches all registered domains on your integration. Returns an empty array if no domains have been added. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/apple-pay/domain\" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.apple_pay.ApplePay.register_domain","text":"Register a top-level domain or subdomain for your Apple Pay integration.","title":"register_domain()"},{"location":"reference/#pypaystack2.api.apple_pay.ApplePay.register_domain--note","text":"This method can only be called with one domain or subdomain at a time.","title":"Note"},{"location":"reference/#pypaystack2.api.apple_pay.ApplePay.register_domain--parameters","text":"str Domain name to be registered.","title":"Parameters"},{"location":"reference/#pypaystack2.api.apple_pay.ApplePay.register_domain--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/apple_pay.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def register_domain ( self , domain_name : str ) -> Response : \"\"\"Register a top-level domain or subdomain for your Apple Pay integration. Note ---- This method can only be called with one domain or subdomain at a time. Parameters ---------- domain_name: str Domain name to be registered. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/apple-pay/domain\" ) payload = { \"domainName\" : domain_name , } return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.apple_pay.ApplePay.unregister_domain","text":"Unregister a top-level domain or subdomain previously used for your Apple Pay integration.","title":"unregister_domain()"},{"location":"reference/#pypaystack2.api.apple_pay.ApplePay.unregister_domain--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/apple_pay.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def unregister_domain ( self , domain_name : str ) -> Response : \"\"\"Unregister a top-level domain or subdomain previously used for your Apple Pay integration. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/apple-pay/domain\" ) payload = { \"domainName\" : domain_name , } return self . _handle_request ( \"DELETE\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge","text":"Bases: BaseAPI Provides a wrapper for paystack Bulk Charge API The Bulk Charges API allows you to create and manage multiple recurring payments from your customers. https://paystack.com/docs/api/#bulk-charge Source code in pypaystack2/api/bulk_charges.pyclass BulkCharge ( BaseAPI ): \"\"\"Provides a wrapper for paystack Bulk Charge API The Bulk Charges API allows you to create and manage multiple recurring payments from your customers. https://paystack.com/docs/api/#bulk-charge \"\"\" def initiate ( self , body : list [ dict [ str , Any ]]) -> Response : \"\"\" Send a list of dictionaries with authorization ``codes`` and ``amount`` (in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR ) so paystack can process transactions as a batch. Parameters ---------- body: list A list of dictionaries with authorization codes and amount. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/bulkcharge\" ) payload = body return self . _handle_request ( \"POST\" , url , payload ) def get_batches ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"This gets all bulk charge batches created by the integration. Parameters ---------- page:int Specify exactly what transfer you want to page. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_batch ( self , id_or_code : str ) -> Response : \"\"\" This method retrieves a specific batch code. It also returns useful information on its progress by way of the total_charges and pending_charges attributes in the Response. Parameters ---------- id_or_code:str An ID or code for the charge whose batches you want to retrieve. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) def get_charges_in_batch ( self , id_or_code : str , status : ChargeStatus , pagination = 50 , page = 1 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\" This method retrieves the charges associated with a specified batch code. Pagination parameters are available. You can also filter by status. Charge statuses can be `ChargeStatus.PENDING`, `ChargeStatus.SUCCESS` or `ChargeStatus.FAILED`. Parameters ---------- id_or_code: str An ID or code for the batch whose charges you want to retrieve. status: ChargeStatus Any of the values from the ChargeStatus enum. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what transfer you want to page. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge/ { id_or_code } /charges?perPage= { pagination } \" ) query_params = [ ( \"status\" , status ), ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def pause_batch ( self , batch_code : str ) -> Response : \"\"\"Use this method to pause processing a batch Parameters ---------- batch_code: str The batch code for the bulk charge you want to pause. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge/pause/ { batch_code } \" ) return self . _handle_request ( \"GET\" , url ) def resume_batch ( self , batch_code : str ) -> Response : \"\"\"Use this method to resume processing a batch Parameters ---------- batch_code: str The batch code for the bulk charge you want to resume. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge/resume/ { batch_code } \" ) return self . _handle_request ( \"GET\" , url )","title":"BulkCharge"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.get_batch","text":"This method retrieves a specific batch code. It also returns useful information on its progress by way of the total_charges and pending_charges attributes in the Response.","title":"get_batch()"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.get_batch--parameters","text":"id_or_code:str An ID or code for the charge whose batches you want to retrieve.","title":"Parameters"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.get_batch--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/bulk_charges.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def get_batch ( self , id_or_code : str ) -> Response : \"\"\" This method retrieves a specific batch code. It also returns useful information on its progress by way of the total_charges and pending_charges attributes in the Response. Parameters ---------- id_or_code:str An ID or code for the charge whose batches you want to retrieve. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.get_batches","text":"This gets all bulk charge batches created by the integration.","title":"get_batches()"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.get_batches--parameters","text":"page:int Specify exactly what transfer you want to page. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Optional[str] A timestamp from which to start listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21","title":"Parameters"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.get_batches--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/bulk_charges.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def get_batches ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"This gets all bulk charge batches created by the integration. Parameters ---------- page:int Specify exactly what transfer you want to page. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.get_charges_in_batch","text":"This method retrieves the charges associated with a specified batch code. Pagination parameters are available. You can also filter by status. Charge statuses can be ChargeStatus.PENDING , ChargeStatus.SUCCESS or ChargeStatus.FAILED .","title":"get_charges_in_batch()"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.get_charges_in_batch--parameters","text":"str An ID or code for the batch whose charges you want to retrieve. ChargeStatus Any of the values from the ChargeStatus enum. int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. int Specify exactly what transfer you want to page. If not specify we use a default value of 1. Optional[str] A timestamp from which to start listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21","title":"Parameters"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.get_charges_in_batch--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/bulk_charges.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 def get_charges_in_batch ( self , id_or_code : str , status : ChargeStatus , pagination = 50 , page = 1 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\" This method retrieves the charges associated with a specified batch code. Pagination parameters are available. You can also filter by status. Charge statuses can be `ChargeStatus.PENDING`, `ChargeStatus.SUCCESS` or `ChargeStatus.FAILED`. Parameters ---------- id_or_code: str An ID or code for the batch whose charges you want to retrieve. status: ChargeStatus Any of the values from the ChargeStatus enum. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what transfer you want to page. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing batches e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge/ { id_or_code } /charges?perPage= { pagination } \" ) query_params = [ ( \"status\" , status ), ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.initiate","text":"Send a list of dictionaries with authorization codes and amount (in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR ) so paystack can process transactions as a batch.","title":"initiate()"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.initiate--parameters","text":"list A list of dictionaries with authorization codes and amount.","title":"Parameters"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.initiate--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/bulk_charges.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def initiate ( self , body : list [ dict [ str , Any ]]) -> Response : \"\"\" Send a list of dictionaries with authorization ``codes`` and ``amount`` (in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR ) so paystack can process transactions as a batch. Parameters ---------- body: list A list of dictionaries with authorization codes and amount. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/bulkcharge\" ) payload = body return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.pause_batch","text":"Use this method to pause processing a batch","title":"pause_batch()"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.pause_batch--parameters","text":"str The batch code for the bulk charge you want to pause.","title":"Parameters"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.pause_batch--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/bulk_charges.py 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 def pause_batch ( self , batch_code : str ) -> Response : \"\"\"Use this method to pause processing a batch Parameters ---------- batch_code: str The batch code for the bulk charge you want to pause. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge/pause/ { batch_code } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.resume_batch","text":"Use this method to resume processing a batch","title":"resume_batch()"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.resume_batch--parameters","text":"str The batch code for the bulk charge you want to resume.","title":"Parameters"},{"location":"reference/#pypaystack2.api.bulk_charges.BulkCharge.resume_batch--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/bulk_charges.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 def resume_batch ( self , batch_code : str ) -> Response : \"\"\"Use this method to resume processing a batch Parameters ---------- batch_code: str The batch code for the bulk charge you want to resume. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bulkcharge/resume/ { batch_code } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.charge.Charge","text":"Bases: BaseAPI Provides a wrapper for paystack Charge API The Charge API allows you to configure payment channel of your choice when initiating a payment. https://paystack.com/docs/api/#charge Source code in pypaystack2/api/charge.pyclass Charge ( BaseAPI ): \"\"\"Provides a wrapper for paystack Charge API The Charge API allows you to configure payment channel of your choice when initiating a payment. https://paystack.com/docs/api/#charge \"\"\" def charge ( self , email : str , amount : int , bank : Optional [ dict [ str , Any ]] = None , auth_code : Optional [ str ] = None , pin : Optional [ str ] = None , metadata : Optional [ dict [ str , Any ]] = None , reference : Optional [ str ] = None , ussd : Optional [ dict [ str , Any ]] = None , mobile_money : Optional [ dict [ str , Any ]] = None , device_id : Optional [ str ] = None , ) -> Response : \"\"\"Initiate a payment by integrating the payment channel of your choice. Parameters ---------- email: str Customer's email address amount: int Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR bank: Optional[dict[str,Any]] Bank account to charge (don't send if charging an authorization code) auth_code: Optional[str] An authorization code to charge (don't send if charging a bank account) pin: Optional[str] 4-digit PIN (send with a non-reusable authorization code) metadata: Optional[dict[str, Any]] A dictionary of data. reference: Optional[str] Unique transaction reference. Only -, .\\\\`, = and alphanumeric characters allowed. ussd: Optional[dict[str, Any]] USSD type to charge (don't send if charging an authorization code, bank or card) mobile_money: Optional[dict[str, Any]] Mobile details (don't send if charging an authorization code, bank or card) device_id: str This is the unique identifier of the device a user uses in making payment. Only -, .\\\\`, = and alphanumeric characters allowed. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" amount = validate_amount ( amount ) payload = { \"email\" : email , \"amount\" : amount } optional_params = [ ( \"bank\" , bank ), ( \"authorization_code\" , auth_code ), ( \"pin\" , pin ), ( \"metadata\" , metadata ), ( \"reference\" , reference ), ( \"ussd\" , ussd ), ( \"mobile_money\" , mobile_money ), ( \"device_id\" , device_id ), ] payload = add_to_payload ( optional_params , payload ) url = self . _url ( \"/charge\" ) return self . _handle_request ( \"POST\" , url , payload ) def submit_pin ( self , pin : str , reference : str ) -> Response : \"\"\"Submit PIN to continue a charge Parameters ---------- pin: str PIN submitted by user reference: str Reference for transaction that requested pin Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"pin\" : pin , \"reference\" : reference } url = self . _url ( \"/charge/submit_pin\" ) return self . _handle_request ( \"POST\" , url , payload ) def submit_OTP ( self , otp : str , reference : str ) -> Response : \"\"\"Submit OTP to complete a charge Parameters ---------- otp: str OTP submitted by user reference: str Reference for ongoing transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"otp\" : otp , \"reference\" : reference } url = self . _url ( \"/charge/submit_otp\" ) return self . _handle_request ( \"POST\" , url , payload ) def submit_phone ( self , phone : str , reference : str ) -> Response : \"\"\"Submit Phone when requested Parameters ---------- phone: str Phone submitted by user reference:str Reference for ongoing transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"phone\" : phone , \"reference\" : reference } url = self . _url ( \"/charge/submit_phone\" ) return self . _handle_request ( \"POST\" , url , payload ) def submit_birthday ( self , date : str , reference : str ) -> Response : \"\"\"Submit Birthday when requested Parameters ---------- date: str Birthday submitted by user. ISO Format e.g. 2016-09-21 reference: str Reference for ongoing transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"date\" : date , \"reference\" : reference } url = self . _url ( \"/charge/submit_birthday\" ) return self . _handle_request ( \"POST\" , url , payload ) def set_address ( self , address : str , reference : str , city : str , state : str , zipcode : str , ) -> Response : \"\"\"Submit address to continue a charge Parameters ---------- address: str Address submitted by user reference: str Reference for ongoing transaction city: str City submitted by user state: str State submitted by user zipcode: str Zipcode submitted by user Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"address\" : address , \"reference\" : reference , \"city\" : city , \"state\" : state , \"zipcode\" : zipcode , } url = self . _url ( \"/charge/submit_address\" ) return self . _handle_request ( \"POST\" , url , payload ) def check_pending_charge ( self , reference : str ) -> Response : \"\"\" When you get \"pending\" as a charge status or if there was an exception when calling any of the /charge endpoints, wait 10 seconds or more, then make a check to see if its status has changed. Don't call too early as you may get a lot more pending than you should. Parameters ---------- reference: str The reference to check Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/charge/ { reference } \" ) return self . _handle_request ( \"GET\" , url )","title":"Charge"},{"location":"reference/#pypaystack2.api.charge.Charge.charge","text":"Initiate a payment by integrating the payment channel of your choice.","title":"charge()"},{"location":"reference/#pypaystack2.api.charge.Charge.charge--parameters","text":"str Customer's email address int Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR Optional[dict[str,Any]] Bank account to charge (don't send if charging an authorization code) Optional[str] An authorization code to charge (don't send if charging a bank account) Optional[str] 4-digit PIN (send with a non-reusable authorization code) Optional[dict[str, Any]] A dictionary of data. Optional[str] Unique transaction reference. Only -, .`, = and alphanumeric characters allowed. Optional[dict[str, Any]] USSD type to charge (don't send if charging an authorization code, bank or card) Optional[dict[str, Any]] Mobile details (don't send if charging an authorization code, bank or card) str This is the unique identifier of the device a user uses in making payment. Only -, .`, = and alphanumeric characters allowed.","title":"Parameters"},{"location":"reference/#pypaystack2.api.charge.Charge.charge--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/charge.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def charge ( self , email : str , amount : int , bank : Optional [ dict [ str , Any ]] = None , auth_code : Optional [ str ] = None , pin : Optional [ str ] = None , metadata : Optional [ dict [ str , Any ]] = None , reference : Optional [ str ] = None , ussd : Optional [ dict [ str , Any ]] = None , mobile_money : Optional [ dict [ str , Any ]] = None , device_id : Optional [ str ] = None , ) -> Response : \"\"\"Initiate a payment by integrating the payment channel of your choice. Parameters ---------- email: str Customer's email address amount: int Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR bank: Optional[dict[str,Any]] Bank account to charge (don't send if charging an authorization code) auth_code: Optional[str] An authorization code to charge (don't send if charging a bank account) pin: Optional[str] 4-digit PIN (send with a non-reusable authorization code) metadata: Optional[dict[str, Any]] A dictionary of data. reference: Optional[str] Unique transaction reference. Only -, .\\\\`, = and alphanumeric characters allowed. ussd: Optional[dict[str, Any]] USSD type to charge (don't send if charging an authorization code, bank or card) mobile_money: Optional[dict[str, Any]] Mobile details (don't send if charging an authorization code, bank or card) device_id: str This is the unique identifier of the device a user uses in making payment. Only -, .\\\\`, = and alphanumeric characters allowed. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" amount = validate_amount ( amount ) payload = { \"email\" : email , \"amount\" : amount } optional_params = [ ( \"bank\" , bank ), ( \"authorization_code\" , auth_code ), ( \"pin\" , pin ), ( \"metadata\" , metadata ), ( \"reference\" , reference ), ( \"ussd\" , ussd ), ( \"mobile_money\" , mobile_money ), ( \"device_id\" , device_id ), ] payload = add_to_payload ( optional_params , payload ) url = self . _url ( \"/charge\" ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.charge.Charge.check_pending_charge","text":"When you get \"pending\" as a charge status or if there was an exception when calling any of the /charge endpoints, wait 10 seconds or more, then make a check to see if its status has changed. Don't call too early as you may get a lot more pending than you should.","title":"check_pending_charge()"},{"location":"reference/#pypaystack2.api.charge.Charge.check_pending_charge--parameters","text":"str The reference to check","title":"Parameters"},{"location":"reference/#pypaystack2.api.charge.Charge.check_pending_charge--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/charge.py 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 def check_pending_charge ( self , reference : str ) -> Response : \"\"\" When you get \"pending\" as a charge status or if there was an exception when calling any of the /charge endpoints, wait 10 seconds or more, then make a check to see if its status has changed. Don't call too early as you may get a lot more pending than you should. Parameters ---------- reference: str The reference to check Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/charge/ { reference } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.charge.Charge.set_address","text":"Submit address to continue a charge","title":"set_address()"},{"location":"reference/#pypaystack2.api.charge.Charge.set_address--parameters","text":"str Address submitted by user str Reference for ongoing transaction str City submitted by user str State submitted by user str Zipcode submitted by user","title":"Parameters"},{"location":"reference/#pypaystack2.api.charge.Charge.set_address--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/charge.py 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 def set_address ( self , address : str , reference : str , city : str , state : str , zipcode : str , ) -> Response : \"\"\"Submit address to continue a charge Parameters ---------- address: str Address submitted by user reference: str Reference for ongoing transaction city: str City submitted by user state: str State submitted by user zipcode: str Zipcode submitted by user Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"address\" : address , \"reference\" : reference , \"city\" : city , \"state\" : state , \"zipcode\" : zipcode , } url = self . _url ( \"/charge/submit_address\" ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.charge.Charge.submit_OTP","text":"Submit OTP to complete a charge","title":"submit_OTP()"},{"location":"reference/#pypaystack2.api.charge.Charge.submit_OTP--parameters","text":"str OTP submitted by user str Reference for ongoing transaction","title":"Parameters"},{"location":"reference/#pypaystack2.api.charge.Charge.submit_OTP--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/charge.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def submit_OTP ( self , otp : str , reference : str ) -> Response : \"\"\"Submit OTP to complete a charge Parameters ---------- otp: str OTP submitted by user reference: str Reference for ongoing transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"otp\" : otp , \"reference\" : reference } url = self . _url ( \"/charge/submit_otp\" ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.charge.Charge.submit_birthday","text":"Submit Birthday when requested","title":"submit_birthday()"},{"location":"reference/#pypaystack2.api.charge.Charge.submit_birthday--parameters","text":"str Birthday submitted by user. ISO Format e.g. 2016-09-21 str Reference for ongoing transaction","title":"Parameters"},{"location":"reference/#pypaystack2.api.charge.Charge.submit_birthday--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/charge.py 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 def submit_birthday ( self , date : str , reference : str ) -> Response : \"\"\"Submit Birthday when requested Parameters ---------- date: str Birthday submitted by user. ISO Format e.g. 2016-09-21 reference: str Reference for ongoing transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"date\" : date , \"reference\" : reference } url = self . _url ( \"/charge/submit_birthday\" ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.charge.Charge.submit_phone","text":"Submit Phone when requested","title":"submit_phone()"},{"location":"reference/#pypaystack2.api.charge.Charge.submit_phone--parameters","text":"str Phone submitted by user reference:str Reference for ongoing transaction","title":"Parameters"},{"location":"reference/#pypaystack2.api.charge.Charge.submit_phone--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/charge.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 def submit_phone ( self , phone : str , reference : str ) -> Response : \"\"\"Submit Phone when requested Parameters ---------- phone: str Phone submitted by user reference:str Reference for ongoing transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"phone\" : phone , \"reference\" : reference } url = self . _url ( \"/charge/submit_phone\" ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.charge.Charge.submit_pin","text":"Submit PIN to continue a charge","title":"submit_pin()"},{"location":"reference/#pypaystack2.api.charge.Charge.submit_pin--parameters","text":"str PIN submitted by user str Reference for transaction that requested pin","title":"Parameters"},{"location":"reference/#pypaystack2.api.charge.Charge.submit_pin--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/charge.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def submit_pin ( self , pin : str , reference : str ) -> Response : \"\"\"Submit PIN to continue a charge Parameters ---------- pin: str PIN submitted by user reference: str Reference for transaction that requested pin Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"pin\" : pin , \"reference\" : reference } url = self . _url ( \"/charge/submit_pin\" ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.control_panel.ControlPanel","text":"Bases: BaseAPI Provides a wrapper for paystack Control Panel API The Control Panel API allows you manage some settings on your integration. https://paystack.com/docs/api/#control-panel Source code in pypaystack2/api/control_panel.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class ControlPanel ( BaseAPI ): \"\"\"Provides a wrapper for paystack Control Panel API The Control Panel API allows you manage some settings on your integration. https://paystack.com/docs/api/#control-panel \"\"\" def get_payment_session_timeout ( self ) -> Response : \"\"\"Fetch the payment session timeout on your integration Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/integration/payment_session_timeout\" ) return self . _handle_request ( \"GET\" , url ) def update_payment_session_timeout ( self , timeout : int ) -> Response : \"\"\"Update the payment session timeout on your integration Parameters ---------- timeout: int Time before stopping session (in seconds). Set to 0 to cancel session timeouts Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"timeout\" : timeout } url = self . _url ( \"/integration/payment_session_timeout\" ) return self . _handle_request ( \"PUT\" , url , payload )","title":"ControlPanel"},{"location":"reference/#pypaystack2.api.control_panel.ControlPanel.get_payment_session_timeout","text":"Fetch the payment session timeout on your integration","title":"get_payment_session_timeout()"},{"location":"reference/#pypaystack2.api.control_panel.ControlPanel.get_payment_session_timeout--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/control_panel.py 11 12 13 14 15 16 17 18 19 20 21 def get_payment_session_timeout ( self ) -> Response : \"\"\"Fetch the payment session timeout on your integration Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/integration/payment_session_timeout\" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.control_panel.ControlPanel.update_payment_session_timeout","text":"Update the payment session timeout on your integration","title":"update_payment_session_timeout()"},{"location":"reference/#pypaystack2.api.control_panel.ControlPanel.update_payment_session_timeout--parameters","text":"int Time before stopping session (in seconds). Set to 0 to cancel session timeouts","title":"Parameters"},{"location":"reference/#pypaystack2.api.control_panel.ControlPanel.update_payment_session_timeout--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/control_panel.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def update_payment_session_timeout ( self , timeout : int ) -> Response : \"\"\"Update the payment session timeout on your integration Parameters ---------- timeout: int Time before stopping session (in seconds). Set to 0 to cancel session timeouts Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"timeout\" : timeout } url = self . _url ( \"/integration/payment_session_timeout\" ) return self . _handle_request ( \"PUT\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.customers.Customer","text":"Bases: BaseAPI Provides a wrapper for paystack Customer API The Customers API allows you to create and manage customers on your integration. https://paystack.com/docs/api/#customer Source code in pypaystack2/api/customers.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 class Customer ( BaseAPI ): \"\"\"Provides a wrapper for paystack Customer API The Customers API allows you to create and manage customers on your integration. https://paystack.com/docs/api/#customer \"\"\" def create ( self , email : str , first_name : Optional [ str ] = None , last_name : Optional [ str ] = None , phone : Optional [ str ] = None , metadata : Optional [ dict [ str , Any ]] = None , ) -> Response : \"\"\"Create a customer on your integration Parameters ---------- email: str Customer's email address first_name: Optional[str] Customer's first name last_name: Optional[str] Customer's last name phone: Optional[str] Customer's phone number metadata: Optional[dict[str,Any]] A dictionary that you can attach to the customer. It can be used to store additional information in a structured format. Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- The `first_name`, `last_name` and `phone` are optional parameters. However, when creating a customer that would be assigned a Dedicated Virtual Account and your business catgeory falls under Betting, Financial services, and General Service, then these parameters become compulsory. \"\"\" url = self . _url ( \"/customer/\" ) payload = { \"email\" : email , } optional_params = ( ( \"first_name\" , first_name ), ( \"last_name\" , last_name ), ( \"phone\" , phone , ), ( \"metadata\" , metadata ), ) payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_customers ( self , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , page = 1 , pagination : int = 50 , ) -> Response : \"\"\"Fetches customers available on your integration. Parameters ---------- start_date: Optional[str] A timestamp from which to start listing customers e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing customers e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = self . _url ( f \"/customer/?perPage= { pagination } \" ) url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_customer ( self , email_or_code : str ) -> Response : \"\"\"Get details of a customer on your integration. Parameters ---------- email_or_code: str An email or customer code for the customer you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/customer/ { email_or_code } /\" ) return self . _handle_request ( \"GET\" , url ) def update ( self , code : str , first_name : str , last_name : str , phone : Optional [ str ] = None , metadata : Optional [ dict [ str , Any ]] = None , ) -> Response : \"\"\"Update a customer's details on your integration Parameters ---------- code: str Customer's code first_name: str Customer's first name last_name: str Customer's last name phone: Optional[str] Customer's phone number metadata: Optional[dict[str, Any]] A dictionary that you can attach to the customer. It can be used to store additional information in a structured format. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/customer/ { code } /\" ) payload = { \"first_name\" : first_name , \"last_name\" : last_name , } optional_params = [ ( \"phone\" , phone , ), ( \"metadata\" , metadata ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload ) def validate ( self , code : str , first_name : str , last_name : str , identification_type : Identification , identification_number : str , country : Country , bvn : str , bank_code : Optional [ str ] = None , account_number : Optional [ str ] = None , middle_name : Optional [ str ] = None , ) -> Response : \"\"\"Validate a customer's identity Parameters ---------- code: str Customer's code first_name: str Customer's first name last_name: str Customer's last name identification_type: Identification Enum of Identification e.g `Identification.BVN` identification_number: str country: Country Enum of Country e.g `Country.NIGERIA` bvn: str Customer's Bank Verification Number bank_code: Optional[str] You can get the list of Bank Codes by calling the Miscellaneous API `get_banks` method. (required if type is bank_account) account_number: Optional[str] Customer's bank account number. (required if type is bank_account) middle_name: Optional[str] Customer's middle name Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if identification_type == Identification . BANK_ACCOUNT : if bank_code is None : raise InvalidDataError ( \"`bank_code` is required if identification type is `Identification.BANK_ACCOUNT`\" ) if account_number is None : raise InvalidDataError ( \"`account_number` is required if identification type is `Identification.BANK_ACCOUNT`\" ) url = self . _url ( f \"/customer/ { code } /identification\" ) payload = { \"first_name\" : first_name , \"last_name\" : last_name , \"type\" : identification_type , \"value\" : identification_number , \"country\" : country , \"bvn\" : bvn , } optional_params = ( ( \"bank_code\" , bank_code ), ( \"account_number\" , account_number ), ( \"middle_name\" , middle_name ), ) payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def flag ( self , customer : str , risk_action : Optional [ RiskAction ] = None , ) -> Response : \"\"\"Whitelist or blacklist a customer on your integration Parameters ---------- customer: str Customer's code, or email address risk_action: Optional[RiskAction] One of the possible risk actions from the RiskAction enum e.g `RiskAction.DEFAULT` Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/customer/set_risk_action\" ) payload = { \"customer\" : customer , } optional_params = (( \"risk_action\" , risk_action ),) payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def deactivate ( self , auth_code : str , ) -> Response : \"\"\"Deactivate an authorization when the card needs to be forgotten Parameters ---------- auth_code: str Authorization code to be deactivated Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/customer/deactivate_authorization\" ) payload = { \"authorization_code\" : auth_code , } return self . _handle_request ( \"POST\" , url , payload )","title":"Customer"},{"location":"reference/#pypaystack2.api.customers.Customer.create","text":"Create a customer on your integration","title":"create()"},{"location":"reference/#pypaystack2.api.customers.Customer.create--parameters","text":"str Customer's email address Optional[str] Customer's first name Optional[str] Customer's last name Optional[str] Customer's phone number Optional[dict[str,Any]] A dictionary that you can attach to the customer. It can be used to store additional information in a structured format.","title":"Parameters"},{"location":"reference/#pypaystack2.api.customers.Customer.create--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.customers.Customer.create--note","text":"The first_name , last_name and phone are optional parameters. However, when creating a customer that would be assigned a Dedicated Virtual Account and your business catgeory falls under Betting, Financial services, and General Service, then these parameters become compulsory. Source code in pypaystack2/api/customers.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def create ( self , email : str , first_name : Optional [ str ] = None , last_name : Optional [ str ] = None , phone : Optional [ str ] = None , metadata : Optional [ dict [ str , Any ]] = None , ) -> Response : \"\"\"Create a customer on your integration Parameters ---------- email: str Customer's email address first_name: Optional[str] Customer's first name last_name: Optional[str] Customer's last name phone: Optional[str] Customer's phone number metadata: Optional[dict[str,Any]] A dictionary that you can attach to the customer. It can be used to store additional information in a structured format. Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- The `first_name`, `last_name` and `phone` are optional parameters. However, when creating a customer that would be assigned a Dedicated Virtual Account and your business catgeory falls under Betting, Financial services, and General Service, then these parameters become compulsory. \"\"\" url = self . _url ( \"/customer/\" ) payload = { \"email\" : email , } optional_params = ( ( \"first_name\" , first_name ), ( \"last_name\" , last_name ), ( \"phone\" , phone , ), ( \"metadata\" , metadata ), ) payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Note"},{"location":"reference/#pypaystack2.api.customers.Customer.deactivate","text":"Deactivate an authorization when the card needs to be forgotten","title":"deactivate()"},{"location":"reference/#pypaystack2.api.customers.Customer.deactivate--parameters","text":"str Authorization code to be deactivated","title":"Parameters"},{"location":"reference/#pypaystack2.api.customers.Customer.deactivate--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/customers.py 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 def deactivate ( self , auth_code : str , ) -> Response : \"\"\"Deactivate an authorization when the card needs to be forgotten Parameters ---------- auth_code: str Authorization code to be deactivated Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/customer/deactivate_authorization\" ) payload = { \"authorization_code\" : auth_code , } return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.customers.Customer.flag","text":"Whitelist or blacklist a customer on your integration","title":"flag()"},{"location":"reference/#pypaystack2.api.customers.Customer.flag--parameters","text":"str Customer's code, or email address Optional[RiskAction] One of the possible risk actions from the RiskAction enum e.g RiskAction.DEFAULT","title":"Parameters"},{"location":"reference/#pypaystack2.api.customers.Customer.flag--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/customers.py 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 def flag ( self , customer : str , risk_action : Optional [ RiskAction ] = None , ) -> Response : \"\"\"Whitelist or blacklist a customer on your integration Parameters ---------- customer: str Customer's code, or email address risk_action: Optional[RiskAction] One of the possible risk actions from the RiskAction enum e.g `RiskAction.DEFAULT` Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/customer/set_risk_action\" ) payload = { \"customer\" : customer , } optional_params = (( \"risk_action\" , risk_action ),) payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.customers.Customer.get_customer","text":"Get details of a customer on your integration.","title":"get_customer()"},{"location":"reference/#pypaystack2.api.customers.Customer.get_customer--parameters","text":"str An email or customer code for the customer you want to fetch","title":"Parameters"},{"location":"reference/#pypaystack2.api.customers.Customer.get_customer--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/customers.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def get_customer ( self , email_or_code : str ) -> Response : \"\"\"Get details of a customer on your integration. Parameters ---------- email_or_code: str An email or customer code for the customer you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/customer/ { email_or_code } /\" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.customers.Customer.get_customers","text":"Fetches customers available on your integration.","title":"get_customers()"},{"location":"reference/#pypaystack2.api.customers.Customer.get_customers--parameters","text":"Optional[str] A timestamp from which to start listing customers e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing customers e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. int Specify how many records you want to retrieve per page. If not specify we use a default value of 50.","title":"Parameters"},{"location":"reference/#pypaystack2.api.customers.Customer.get_customers--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/customers.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def get_customers ( self , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , page = 1 , pagination : int = 50 , ) -> Response : \"\"\"Fetches customers available on your integration. Parameters ---------- start_date: Optional[str] A timestamp from which to start listing customers e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing customers e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = self . _url ( f \"/customer/?perPage= { pagination } \" ) url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.customers.Customer.update","text":"Update a customer's details on your integration","title":"update()"},{"location":"reference/#pypaystack2.api.customers.Customer.update--parameters","text":"str Customer's code str Customer's first name str Customer's last name Optional[str] Customer's phone number Optional[dict[str, Any]] A dictionary that you can attach to the customer. It can be used to store additional information in a structured format.","title":"Parameters"},{"location":"reference/#pypaystack2.api.customers.Customer.update--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/customers.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 def update ( self , code : str , first_name : str , last_name : str , phone : Optional [ str ] = None , metadata : Optional [ dict [ str , Any ]] = None , ) -> Response : \"\"\"Update a customer's details on your integration Parameters ---------- code: str Customer's code first_name: str Customer's first name last_name: str Customer's last name phone: Optional[str] Customer's phone number metadata: Optional[dict[str, Any]] A dictionary that you can attach to the customer. It can be used to store additional information in a structured format. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/customer/ { code } /\" ) payload = { \"first_name\" : first_name , \"last_name\" : last_name , } optional_params = [ ( \"phone\" , phone , ), ( \"metadata\" , metadata ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.customers.Customer.validate","text":"Validate a customer's identity","title":"validate()"},{"location":"reference/#pypaystack2.api.customers.Customer.validate--parameters","text":"str Customer's code str Customer's first name str Customer's last name Identification Enum of Identification e.g Identification.BVN identification_number: str Country Enum of Country e.g Country.NIGERIA str Customer's Bank Verification Number Optional[str] You can get the list of Bank Codes by calling the Miscellaneous API get_banks method. (required if type is bank_account) Optional[str] Customer's bank account number. (required if type is bank_account) Optional[str] Customer's middle name","title":"Parameters"},{"location":"reference/#pypaystack2.api.customers.Customer.validate--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/customers.py 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 def validate ( self , code : str , first_name : str , last_name : str , identification_type : Identification , identification_number : str , country : Country , bvn : str , bank_code : Optional [ str ] = None , account_number : Optional [ str ] = None , middle_name : Optional [ str ] = None , ) -> Response : \"\"\"Validate a customer's identity Parameters ---------- code: str Customer's code first_name: str Customer's first name last_name: str Customer's last name identification_type: Identification Enum of Identification e.g `Identification.BVN` identification_number: str country: Country Enum of Country e.g `Country.NIGERIA` bvn: str Customer's Bank Verification Number bank_code: Optional[str] You can get the list of Bank Codes by calling the Miscellaneous API `get_banks` method. (required if type is bank_account) account_number: Optional[str] Customer's bank account number. (required if type is bank_account) middle_name: Optional[str] Customer's middle name Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if identification_type == Identification . BANK_ACCOUNT : if bank_code is None : raise InvalidDataError ( \"`bank_code` is required if identification type is `Identification.BANK_ACCOUNT`\" ) if account_number is None : raise InvalidDataError ( \"`account_number` is required if identification type is `Identification.BANK_ACCOUNT`\" ) url = self . _url ( f \"/customer/ { code } /identification\" ) payload = { \"first_name\" : first_name , \"last_name\" : last_name , \"type\" : identification_type , \"value\" : identification_number , \"country\" : country , \"bvn\" : bvn , } optional_params = ( ( \"bank_code\" , bank_code ), ( \"account_number\" , account_number ), ( \"middle_name\" , middle_name ), ) payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount","text":"Bases: BaseAPI Provides a wrapper for paystack Dedicated Virtual Account API The Dedicated Virtual Account API enables Nigerian merchants to manage unique payment accounts of their customers. https://paystack.com/docs/api/#dedicated-virtual-account","title":"DedicatedAccount"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount--note","text":"This feature is only available to businesses in Nigeria. Source code in pypaystack2/api/dedicated_accounts.pyclass DedicatedAccount ( BaseAPI ): \"\"\"Provides a wrapper for paystack Dedicated Virtual Account API The Dedicated Virtual Account API enables Nigerian merchants to manage unique payment accounts of their customers. https://paystack.com/docs/api/#dedicated-virtual-account Note ---- This feature is only available to businesses in Nigeria. \"\"\" def create ( self , customer : str , preferred_bank : Optional [ str ] = None , subaccount : Optional [ str ] = None , split_code : Optional [ str ] = None , first_name : Optional [ str ] = None , last_name : Optional [ str ] = None , phone : Optional [ str ] = None , ) -> Response : \"\"\"Create a dedicated virtual account and assign to a customer Parameters ---------- customer: str Customer ID or code preferred_bank: Optional[str] The bank slug for preferred bank. To get a list of available banks, use the Miscellaneous API ``.get_providers`` method. subaccount: Optional[str] Subaccount code of the account you want to split the transaction with split_code: Optional[str] Split code consisting of the lists of accounts you want to split the transaction with first_name: Optional[str] Customer's first name last_name: Optional[str] Customer's last name phone: Optional[str] Customer's phone number Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( \"/dedicated_account\" ) payload = { \"customer\" : customer , } optional_params = ( ( \"preferred_bank\" , preferred_bank ), ( \"subaccount\" , subaccount ), ( \"split_code\" , split_code ), ( \"first_name\" , first_name ), ( \"last_name\" , last_name ), ( \"phone\" , phone ), ) payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_dedicated_accounts ( self , active = True , currency = Currency . NGN , provider_slug : Optional [ str ] = None , bank_id : Optional [ str ] = None , customer : Optional [ str ] = None , ) -> Response : \"\"\"Fetches dedicated virtual accounts available on your integration. Parameters ---------- active: bool Status of the dedicated virtual account currency: Currency The currency of the dedicated virtual account. Only ``Currency.NGN`` is currently allowed provider_slug: Optional[str] The bank's slug in lowercase, without spaces e.g. wema-bank bank_id: Optional[str] The bank's ID e.g. 035 customer: Optional[str] The customer's ID Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" query_params = [ ( \"currency\" , currency ), ( \"provider_slug\" , provider_slug ), ( \"bank_id\" , bank_id ), ( \"customer\" , customer ), ] url = self . _url ( f \"/dedicated_account?active= { active } \" ) url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_dedicated_account ( self , dedicated_account_id : int ) -> Response : \"\"\"Get details of a dedicated virtual account on your integration. Parameters ---------- dedicated_account_id: int ID of dedicated virtual account Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/ { dedicated_account_id } \" ) return self . _handle_request ( \"GET\" , url ) def requery ( self , account_number : str , provider_slug : str , date : Optional [ str ] ) -> Response : \"\"\"Get details of a dedicated virtual account on your integration. Parameters ---------- account_number: str Virtual account number to requery provider_slug: str The bank's slug in lowercase, without spaces e.g. wema-bank date: Optional[str] The day the transfer was made in YYYY-MM-DD ISO format Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account?account_number= { account_number } \" ) query_params = [ ( \"provider_slug\" , provider_slug ), ( \"date\" , date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def deactivate ( self , dedicated_account_id : int ) -> Response : \"\"\"Deactivate a dedicated virtual account on your integration. Parameters ---------- dedicated_account_id: int ID of dedicated virtual account Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/ { dedicated_account_id } \" ) return self . _handle_request ( \"DELETE\" , url ) def split ( self , customer : str , subaccount : Optional [ str ] = None , split_code : Optional [ str ] = None , preferred_bank : Optional [ str ] = None , ) -> Response : \"\"\"Split a dedicated virtual account transaction with one or more accounts Parameters ---------- customer: str Customer ID or code subaccount: Optional[str] Subaccount code of the account you want to split the transaction with split_code: Optional[str] Split code consisting of the lists of accounts you want to split the transaction with preferred_bank: Optional[str] The bank slug for preferred bank. To get a list of available banks, use the Miscellaneous API ``.get_providers`` method Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/split\" ) payload = { \"customer\" : customer } optional_params = [ ( \"subaccount\" , subaccount ), ( \"split_code\" , split_code ), ( \"preferred_bank\" , preferred_bank ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def remove_split ( self , account_number : str ) -> Response : \"\"\" If you've previously set up split payment for transactions on a dedicated virtual account, you can remove it with this method Parameters ---------- account_number: str Dedicated virtual account number Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/split\" ) payload = { \"account_number\" : account_number , } return self . _handle_request ( \"DELETE\" , url , payload ) def get_providers ( self ) -> Response : \"\"\"Get available bank providers for a dedicated virtual account Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank` as the `preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/available_providers\" ) return self . _handle_request ( \"GET\" , url )","title":"Note"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.create","text":"Create a dedicated virtual account and assign to a customer","title":"create()"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.create--parameters","text":"str Customer ID or code Optional[str] The bank slug for preferred bank. To get a list of available banks, use the Miscellaneous API .get_providers method. Optional[str] Subaccount code of the account you want to split the transaction with Optional[str] Split code consisting of the lists of accounts you want to split the transaction with Optional[str] Customer's first name Optional[str] Customer's last name Optional[str] Customer's phone number","title":"Parameters"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.create--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.create--note","text":"This feature is only available to businesses in Nigeria. Paystack currently supports Access Bank and Wema Bank. To create Dedicated Virtual Accounts using your test secret key, use test-bank as the preferred_bank You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ Source code in pypaystack2/api/dedicated_accounts.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def create ( self , customer : str , preferred_bank : Optional [ str ] = None , subaccount : Optional [ str ] = None , split_code : Optional [ str ] = None , first_name : Optional [ str ] = None , last_name : Optional [ str ] = None , phone : Optional [ str ] = None , ) -> Response : \"\"\"Create a dedicated virtual account and assign to a customer Parameters ---------- customer: str Customer ID or code preferred_bank: Optional[str] The bank slug for preferred bank. To get a list of available banks, use the Miscellaneous API ``.get_providers`` method. subaccount: Optional[str] Subaccount code of the account you want to split the transaction with split_code: Optional[str] Split code consisting of the lists of accounts you want to split the transaction with first_name: Optional[str] Customer's first name last_name: Optional[str] Customer's last name phone: Optional[str] Customer's phone number Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( \"/dedicated_account\" ) payload = { \"customer\" : customer , } optional_params = ( ( \"preferred_bank\" , preferred_bank ), ( \"subaccount\" , subaccount ), ( \"split_code\" , split_code ), ( \"first_name\" , first_name ), ( \"last_name\" , last_name ), ( \"phone\" , phone ), ) payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Note"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.deactivate","text":"Deactivate a dedicated virtual account on your integration.","title":"deactivate()"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.deactivate--parameters","text":"int ID of dedicated virtual account","title":"Parameters"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.deactivate--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.deactivate--note","text":"This feature is only available to businesses in Nigeria. Paystack currently supports Access Bank and Wema Bank. To create Dedicated Virtual Accounts using your test secret key, use test-bank as the preferred_bank You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ Source code in pypaystack2/api/dedicated_accounts.py 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 def deactivate ( self , dedicated_account_id : int ) -> Response : \"\"\"Deactivate a dedicated virtual account on your integration. Parameters ---------- dedicated_account_id: int ID of dedicated virtual account Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/ { dedicated_account_id } \" ) return self . _handle_request ( \"DELETE\" , url )","title":"Note"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.get_dedicated_account","text":"Get details of a dedicated virtual account on your integration.","title":"get_dedicated_account()"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.get_dedicated_account--parameters","text":"dedicated_account_id: int ID of dedicated virtual account","title":"Parameters"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.get_dedicated_account--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.get_dedicated_account--note","text":"This feature is only available to businesses in Nigeria. Paystack currently supports Access Bank and Wema Bank. To create Dedicated Virtual Accounts using your test secret key, use test-bank as the preferred_bank You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ Source code in pypaystack2/api/dedicated_accounts.py 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 def get_dedicated_account ( self , dedicated_account_id : int ) -> Response : \"\"\"Get details of a dedicated virtual account on your integration. Parameters ---------- dedicated_account_id: int ID of dedicated virtual account Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/ { dedicated_account_id } \" ) return self . _handle_request ( \"GET\" , url )","title":"Note"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.get_dedicated_accounts","text":"Fetches dedicated virtual accounts available on your integration.","title":"get_dedicated_accounts()"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.get_dedicated_accounts--parameters","text":"bool Status of the dedicated virtual account Currency The currency of the dedicated virtual account. Only Currency.NGN is currently allowed Optional[str] The bank's slug in lowercase, without spaces e.g. wema-bank Optional[str] The bank's ID e.g. 035 Optional[str] The customer's ID","title":"Parameters"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.get_dedicated_accounts--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.get_dedicated_accounts--note","text":"This feature is only available to businesses in Nigeria. Paystack currently supports Access Bank and Wema Bank. To create Dedicated Virtual Accounts using your test secret key, use test-bank as the preferred_bank You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ Source code in pypaystack2/api/dedicated_accounts.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 def get_dedicated_accounts ( self , active = True , currency = Currency . NGN , provider_slug : Optional [ str ] = None , bank_id : Optional [ str ] = None , customer : Optional [ str ] = None , ) -> Response : \"\"\"Fetches dedicated virtual accounts available on your integration. Parameters ---------- active: bool Status of the dedicated virtual account currency: Currency The currency of the dedicated virtual account. Only ``Currency.NGN`` is currently allowed provider_slug: Optional[str] The bank's slug in lowercase, without spaces e.g. wema-bank bank_id: Optional[str] The bank's ID e.g. 035 customer: Optional[str] The customer's ID Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" query_params = [ ( \"currency\" , currency ), ( \"provider_slug\" , provider_slug ), ( \"bank_id\" , bank_id ), ( \"customer\" , customer ), ] url = self . _url ( f \"/dedicated_account?active= { active } \" ) url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Note"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.get_providers","text":"Get available bank providers for a dedicated virtual account","title":"get_providers()"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.get_providers--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.get_providers--note","text":"This feature is only available to businesses in Nigeria. Paystack currently supports Access Bank and Wema Bank. To create Dedicated Virtual Accounts using your test secret key, use test-bank` as the `preferred_bank You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ Source code in pypaystack2/api/dedicated_accounts.py 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 def get_providers ( self ) -> Response : \"\"\"Get available bank providers for a dedicated virtual account Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank` as the `preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/available_providers\" ) return self . _handle_request ( \"GET\" , url )","title":"Note"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.remove_split","text":"If you've previously set up split payment for transactions on a dedicated virtual account, you can remove it with this method","title":"remove_split()"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.remove_split--parameters","text":"str Dedicated virtual account number","title":"Parameters"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.remove_split--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.remove_split--note","text":"This feature is only available to businesses in Nigeria. Paystack currently supports Access Bank and Wema Bank. To create Dedicated Virtual Accounts using your test secret key, use test-bank as the preferred_bank You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ Source code in pypaystack2/api/dedicated_accounts.py 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 def remove_split ( self , account_number : str ) -> Response : \"\"\" If you've previously set up split payment for transactions on a dedicated virtual account, you can remove it with this method Parameters ---------- account_number: str Dedicated virtual account number Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/split\" ) payload = { \"account_number\" : account_number , } return self . _handle_request ( \"DELETE\" , url , payload )","title":"Note"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.requery","text":"Get details of a dedicated virtual account on your integration.","title":"requery()"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.requery--parameters","text":"str Virtual account number to requery str The bank's slug in lowercase, without spaces e.g. wema-bank Optional[str] The day the transfer was made in YYYY-MM-DD ISO format","title":"Parameters"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.requery--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.requery--note","text":"This feature is only available to businesses in Nigeria. Paystack currently supports Access Bank and Wema Bank. To create Dedicated Virtual Accounts using your test secret key, use test-bank as the preferred_bank You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ Source code in pypaystack2/api/dedicated_accounts.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 def requery ( self , account_number : str , provider_slug : str , date : Optional [ str ] ) -> Response : \"\"\"Get details of a dedicated virtual account on your integration. Parameters ---------- account_number: str Virtual account number to requery provider_slug: str The bank's slug in lowercase, without spaces e.g. wema-bank date: Optional[str] The day the transfer was made in YYYY-MM-DD ISO format Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account?account_number= { account_number } \" ) query_params = [ ( \"provider_slug\" , provider_slug ), ( \"date\" , date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Note"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.split","text":"Split a dedicated virtual account transaction with one or more accounts","title":"split()"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.split--parameters","text":"str Customer ID or code Optional[str] Subaccount code of the account you want to split the transaction with Optional[str] Split code consisting of the lists of accounts you want to split the transaction with Optional[str] The bank slug for preferred bank. To get a list of available banks, use the Miscellaneous API .get_providers method","title":"Parameters"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.split--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.dedicated_accounts.DedicatedAccount.split--note","text":"This feature is only available to businesses in Nigeria. Paystack currently supports Access Bank and Wema Bank. To create Dedicated Virtual Accounts using your test secret key, use test-bank as the preferred_bank You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ Source code in pypaystack2/api/dedicated_accounts.py 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 def split ( self , customer : str , subaccount : Optional [ str ] = None , split_code : Optional [ str ] = None , preferred_bank : Optional [ str ] = None , ) -> Response : \"\"\"Split a dedicated virtual account transaction with one or more accounts Parameters ---------- customer: str Customer ID or code subaccount: Optional[str] Subaccount code of the account you want to split the transaction with split_code: Optional[str] Split code consisting of the lists of accounts you want to split the transaction with preferred_bank: Optional[str] The bank slug for preferred bank. To get a list of available banks, use the Miscellaneous API ``.get_providers`` method Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- * This feature is only available to businesses in Nigeria. * Paystack currently supports Access Bank and Wema Bank. * To create Dedicated Virtual Accounts using your test secret key, use ``test-bank`` as the ``preferred_bank`` You can also make a transfer to the test virtual accounts using paystack's demo bank app. https://demobank.paystackintegrations.com/ \"\"\" url = self . _url ( f \"/dedicated_account/split\" ) payload = { \"customer\" : customer } optional_params = [ ( \"subaccount\" , subaccount ), ( \"split_code\" , split_code ), ( \"preferred_bank\" , preferred_bank ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Note"},{"location":"reference/#pypaystack2.api.disputes.Dispute","text":"Bases: BaseAPI Provides a wrapper for paystack Disputes API The Disputes API allows you manage transaction disputes on your integration. https://paystack.com/docs/api/#dispute Source code in pypaystack2/api/disputes.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 class Dispute ( BaseAPI ): \"\"\"Provides a wrapper for paystack Disputes API The Disputes API allows you manage transaction disputes on your integration. https://paystack.com/docs/api/#dispute \"\"\" def get_disputes ( self , start_date : str , end_date : str , pagination = 50 , page = 1 , transaction : Optional [ str ] = None , status : Optional [ DisputeStatus ] = None , ) -> Response : \"\"\"Fetches disputes filed against you Parameters ---------- start_date: str A timestamp from which to start listing dispute e.g. 2016-09-21 end_date: str A timestamp at which to stop listing dispute e.g. 2016-09-21 pagination : int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what dispute you want to page. If not specify we use a default value of 1. transaction: Optional[str] Transaction Id status: Optional[DisputeStatus] Any of DisputeStatus enum values. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"transaction\" , transaction ), ( \"status\" , status ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_dispute ( self , id : str ) -> Response : \"\"\"Get more details about a dispute. Parameters ---------- id: str The dispute ID you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute/ { id } \" ) return self . _handle_request ( \"GET\" , url ) def get_transaction_disputes ( self , id : str ) -> Response : \"\"\"This method retrieves disputes for a particular transaction Parameters ---------- id: str The transaction ID you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute/transaction/ { id } \" ) return self . _handle_request ( \"GET\" , url ) def update_dispute ( self , id : str , refund_amount : int , uploaded_filename : Optional [ str ] ) -> Response : \"\"\"Update details of a dispute on your integration Parameters ---------- id: str Dispute ID refund_amount: int the amount to refund, in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR uploaded_filename: Optional[str] filename of attachment returned via response from upload url(GET /dispute/:id/upload_url) Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" refund_amount = validate_amount ( refund_amount ) payload = { \"refund_amount\" : refund_amount } payload = add_to_payload ([( \"uploaded_filename\" , uploaded_filename )], payload ) url = self . _url ( f \"/dispute/ { id } \" ) return self . _handle_request ( \"PUT\" , url , payload ) def add_evidence ( self , id : str , customer_email : str , customer_name : str , customer_phone : str , service_details : str , delivery_address : Optional [ str ] = None , delivery_date : Optional [ str ] = None , ) -> Response : \"\"\"Provide evidence for a dispute Parameters ---------- id: str Dispute ID customer_email: str Customer email customer_name: str Customer name customer_phone: str Customer phone service_details: str Details of service involved delivery_address: Optional[str] Delivery Address delivery_date: Optional[str] ISO 8601 representation of delivery date (YYYY-MM-DD) Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"customer_email\" : customer_email , \"customer_name\" : customer_name , \"customer_phone\" : customer_phone , \"service_details\" : service_details , } optional_params = [ ( \"delivery_address\" , delivery_address ), ( \"delivery_date\" , delivery_date ), ] payload = add_to_payload ( optional_params , payload ) url = self . _url ( f \"dispute/ { id } /evidence\" ) return self . _handle_request ( \"POST\" , url , payload ) def get_upload_URL ( self , id : str , upload_filename : str ) -> Response : \"\"\"Get URL to upload a dispute evidence. Parameters ---------- id: str Dispute Id upload_filename: str The file name, with its extension, that you want to upload. e.g. filename.pdf Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute/ { id } /upload_url?upload_filename= { upload_filename } \" ) return self . _handle_request ( \"GET\" , url ) def resolve_dispute ( self , id : str , resolution : Resolution , message : str , refund_amount : int , uploaded_filename : str , evidence : Optional [ int ] = None , ) -> Response : \"\"\"Resolve a dispute on your integration Parameters ---------- id: str Dispute ID resolution: Resolution Any of the Resolution enum value. message: str Reason for resolving refund_amount: int the amount to refund, in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR uploaded_filename: str filename of attachment returned via response from upload url(GET /dispute/:id/upload_url) evidence: Optional[int] Evidence ID for fraud claims Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" refund_amount = validate_amount ( refund_amount ) payload = { \"resolution\" : resolution , \"message\" : message , \"refund_amount\" : refund_amount , \"uploaded_filename\" : uploaded_filename , } payload = add_to_payload ([( \"evidence\" , evidence )], payload ) url = self . _url ( f \"/dispute/ { id } /resolve\" ) return self . _handle_request ( \"PUT\" , url , payload ) def export_disputes ( self , start_date : str , end_date : str , pagination = 50 , page = 1 , transaction : Optional [ str ] = None , status : Optional [ DisputeStatus ] = None , ) -> Response : \"\"\"Export disputes available on your integration. Parameters ---------- start_date: str A timestamp from which to start listing dispute e.g. 2016-09-21 end_date: str A timestamp at which to stop listing dispute e.g. 2016-09-21 pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what dispute you want to page. If not specify we use a default value of 1. transaction: Optional[str] Transaction Id status: Optional[DisputeStatus] Any value from the DisputeStatus enum Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute/export?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"transaction\" , transaction ), ( \"status\" , status ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Dispute"},{"location":"reference/#pypaystack2.api.disputes.Dispute.add_evidence","text":"Provide evidence for a dispute","title":"add_evidence()"},{"location":"reference/#pypaystack2.api.disputes.Dispute.add_evidence--parameters","text":"str Dispute ID str Customer email str Customer name str Customer phone str Details of service involved Optional[str] Delivery Address Optional[str] ISO 8601 representation of delivery date (YYYY-MM-DD)","title":"Parameters"},{"location":"reference/#pypaystack2.api.disputes.Dispute.add_evidence--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/disputes.py 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 def add_evidence ( self , id : str , customer_email : str , customer_name : str , customer_phone : str , service_details : str , delivery_address : Optional [ str ] = None , delivery_date : Optional [ str ] = None , ) -> Response : \"\"\"Provide evidence for a dispute Parameters ---------- id: str Dispute ID customer_email: str Customer email customer_name: str Customer name customer_phone: str Customer phone service_details: str Details of service involved delivery_address: Optional[str] Delivery Address delivery_date: Optional[str] ISO 8601 representation of delivery date (YYYY-MM-DD) Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"customer_email\" : customer_email , \"customer_name\" : customer_name , \"customer_phone\" : customer_phone , \"service_details\" : service_details , } optional_params = [ ( \"delivery_address\" , delivery_address ), ( \"delivery_date\" , delivery_date ), ] payload = add_to_payload ( optional_params , payload ) url = self . _url ( f \"dispute/ { id } /evidence\" ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.disputes.Dispute.export_disputes","text":"Export disputes available on your integration.","title":"export_disputes()"},{"location":"reference/#pypaystack2.api.disputes.Dispute.export_disputes--parameters","text":"str A timestamp from which to start listing dispute e.g. 2016-09-21 str A timestamp at which to stop listing dispute e.g. 2016-09-21 int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. int Specify exactly what dispute you want to page. If not specify we use a default value of 1. Optional[str] Transaction Id Optional[DisputeStatus] Any value from the DisputeStatus enum","title":"Parameters"},{"location":"reference/#pypaystack2.api.disputes.Dispute.export_disputes--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/disputes.py 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 def export_disputes ( self , start_date : str , end_date : str , pagination = 50 , page = 1 , transaction : Optional [ str ] = None , status : Optional [ DisputeStatus ] = None , ) -> Response : \"\"\"Export disputes available on your integration. Parameters ---------- start_date: str A timestamp from which to start listing dispute e.g. 2016-09-21 end_date: str A timestamp at which to stop listing dispute e.g. 2016-09-21 pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what dispute you want to page. If not specify we use a default value of 1. transaction: Optional[str] Transaction Id status: Optional[DisputeStatus] Any value from the DisputeStatus enum Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute/export?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"transaction\" , transaction ), ( \"status\" , status ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.disputes.Dispute.get_dispute","text":"Get more details about a dispute.","title":"get_dispute()"},{"location":"reference/#pypaystack2.api.disputes.Dispute.get_dispute--parameters","text":"str The dispute ID you want to fetch","title":"Parameters"},{"location":"reference/#pypaystack2.api.disputes.Dispute.get_dispute--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/disputes.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def get_dispute ( self , id : str ) -> Response : \"\"\"Get more details about a dispute. Parameters ---------- id: str The dispute ID you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute/ { id } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.disputes.Dispute.get_disputes","text":"Fetches disputes filed against you","title":"get_disputes()"},{"location":"reference/#pypaystack2.api.disputes.Dispute.get_disputes--parameters","text":"str A timestamp from which to start listing dispute e.g. 2016-09-21 str A timestamp at which to stop listing dispute e.g. 2016-09-21 int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. int Specify exactly what dispute you want to page. If not specify we use a default value of 1. Optional[str] Transaction Id Optional[DisputeStatus] Any of DisputeStatus enum values.","title":"Parameters"},{"location":"reference/#pypaystack2.api.disputes.Dispute.get_disputes--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/disputes.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def get_disputes ( self , start_date : str , end_date : str , pagination = 50 , page = 1 , transaction : Optional [ str ] = None , status : Optional [ DisputeStatus ] = None , ) -> Response : \"\"\"Fetches disputes filed against you Parameters ---------- start_date: str A timestamp from which to start listing dispute e.g. 2016-09-21 end_date: str A timestamp at which to stop listing dispute e.g. 2016-09-21 pagination : int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what dispute you want to page. If not specify we use a default value of 1. transaction: Optional[str] Transaction Id status: Optional[DisputeStatus] Any of DisputeStatus enum values. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"transaction\" , transaction ), ( \"status\" , status ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.disputes.Dispute.get_transaction_disputes","text":"This method retrieves disputes for a particular transaction","title":"get_transaction_disputes()"},{"location":"reference/#pypaystack2.api.disputes.Dispute.get_transaction_disputes--parameters","text":"str The transaction ID you want to fetch","title":"Parameters"},{"location":"reference/#pypaystack2.api.disputes.Dispute.get_transaction_disputes--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/disputes.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def get_transaction_disputes ( self , id : str ) -> Response : \"\"\"This method retrieves disputes for a particular transaction Parameters ---------- id: str The transaction ID you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute/transaction/ { id } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.disputes.Dispute.get_upload_URL","text":"Get URL to upload a dispute evidence.","title":"get_upload_URL()"},{"location":"reference/#pypaystack2.api.disputes.Dispute.get_upload_URL--parameters","text":"str Dispute Id str The file name, with its extension, that you want to upload. e.g. filename.pdf","title":"Parameters"},{"location":"reference/#pypaystack2.api.disputes.Dispute.get_upload_URL--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/disputes.py 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 def get_upload_URL ( self , id : str , upload_filename : str ) -> Response : \"\"\"Get URL to upload a dispute evidence. Parameters ---------- id: str Dispute Id upload_filename: str The file name, with its extension, that you want to upload. e.g. filename.pdf Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/dispute/ { id } /upload_url?upload_filename= { upload_filename } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.disputes.Dispute.resolve_dispute","text":"Resolve a dispute on your integration","title":"resolve_dispute()"},{"location":"reference/#pypaystack2.api.disputes.Dispute.resolve_dispute--parameters","text":"str Dispute ID Resolution Any of the Resolution enum value. str Reason for resolving int the amount to refund, in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR str filename of attachment returned via response from upload url(GET /dispute/:id/upload_url) Optional[int] Evidence ID for fraud claims","title":"Parameters"},{"location":"reference/#pypaystack2.api.disputes.Dispute.resolve_dispute--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/disputes.py 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 def resolve_dispute ( self , id : str , resolution : Resolution , message : str , refund_amount : int , uploaded_filename : str , evidence : Optional [ int ] = None , ) -> Response : \"\"\"Resolve a dispute on your integration Parameters ---------- id: str Dispute ID resolution: Resolution Any of the Resolution enum value. message: str Reason for resolving refund_amount: int the amount to refund, in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR uploaded_filename: str filename of attachment returned via response from upload url(GET /dispute/:id/upload_url) evidence: Optional[int] Evidence ID for fraud claims Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" refund_amount = validate_amount ( refund_amount ) payload = { \"resolution\" : resolution , \"message\" : message , \"refund_amount\" : refund_amount , \"uploaded_filename\" : uploaded_filename , } payload = add_to_payload ([( \"evidence\" , evidence )], payload ) url = self . _url ( f \"/dispute/ { id } /resolve\" ) return self . _handle_request ( \"PUT\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.disputes.Dispute.update_dispute","text":"Update details of a dispute on your integration","title":"update_dispute()"},{"location":"reference/#pypaystack2.api.disputes.Dispute.update_dispute--parameters","text":"str Dispute ID int the amount to refund, in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR Optional[str] filename of attachment returned via response from upload url(GET /dispute/:id/upload_url)","title":"Parameters"},{"location":"reference/#pypaystack2.api.disputes.Dispute.update_dispute--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/disputes.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 def update_dispute ( self , id : str , refund_amount : int , uploaded_filename : Optional [ str ] ) -> Response : \"\"\"Update details of a dispute on your integration Parameters ---------- id: str Dispute ID refund_amount: int the amount to refund, in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR uploaded_filename: Optional[str] filename of attachment returned via response from upload url(GET /dispute/:id/upload_url) Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" refund_amount = validate_amount ( refund_amount ) payload = { \"refund_amount\" : refund_amount } payload = add_to_payload ([( \"uploaded_filename\" , uploaded_filename )], payload ) url = self . _url ( f \"/dispute/ { id } \" ) return self . _handle_request ( \"PUT\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.invoices.Invoice","text":"Bases: BaseAPI Provides a wrapper for paystack Invoices API The Invoices API allows you to issue out and manage payment requests. https://paystack.com/docs/api/#invoice Source code in pypaystack2/api/invoices.pyclass Invoice ( BaseAPI ): \"\"\"Provides a wrapper for paystack Invoices API The Invoices API allows you to issue out and manage payment requests. https://paystack.com/docs/api/#invoice \"\"\" def create ( self , customer : str , amount : int , due_date : Optional [ str ] = None , description : Optional [ str ] = None , line_items : Optional [ list [ dict [ str , Any ]]] = None , tax : Optional [ list [ dict [ str , Any ]]] = None , currency : Optional [ Currency ] = None , send_notification : Optional [ bool ] = None , draft : Optional [ bool ] = None , has_invoice : Optional [ bool ] = None , invoice_number : Optional [ int ] = None , split_code : Optional [ str ] = None , ) -> Response : \"\"\"Create an invoice for payment on your integration Parameters ---------- customer: str Customer id or code amount: int Payment request amount. It should be used when line items and tax values aren't specified. due_date: Optional[str] ISO 8601 representation of request due date description: Optional[str] A short description of the payment request line_items: Optional[list[dict[str,Any]]] List of line items int the format [{\"name\":\"item 1\", \"amount\":2000, \"quantity\": 1}] tax: Optional[list[dict[str,Any]]] List of taxes to be charged in the format [{\"name\":\"VAT\", \"amount\":2000}] currency: Optional[Currency] Any value from Currency enum. default ``Currency.NGN`` send_notification: Optional[bool] Indicates whether Paystack sends an email notification to customer. Defaults to ``True`` draft: Optional[bool] Indicate if request should be saved as draft. Defaults to ``False`` and overrides send_notification has_invoice: Optional[bool] Set to ``True`` to create a draft invoice (adds an auto incrementing invoice number if none is provided) even if there are no line_items or tax passed invoice_number: Optional[int] Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point. split_code: Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/paymentrequest\" ) payload = { \"customer\" : customer , \"amount\" : amount } optional_params = [ ( \"due_date\" , due_date ), ( \"description\" , description ), ( \"line_items\" , line_items ), ( \"tax\" , tax ), ( \"currency\" , currency ), ( \"send_notification\" , send_notification ), ( \"draft\" , draft ), ( \"has_invoice\" , has_invoice ), ( \"invoice_number\" , invoice_number ), ( \"split_code\" , split_code ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_invoices ( self , customer : str , status : InvoiceStatus , currency : Currency , include_archive = False , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetches the invoice available on your integration. Parameters ---------- customer: str Filter by customer ID status: InvoiceStatus Filter by invoice status. Any value from enum of ``InvoiceStatus`` currency: Currency Filter by currency. Any value from enum of ``Currency`` include_archive: bool Show archived invoices. page: int Specify exactly what invoice you want to page. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing invoice e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing invoice e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest?perPage= { pagination } \" ) query_params = [ ( \"customer\" , customer ), ( \"status\" , status ), ( \"currency\" , currency ), ( \"include_archive\" , include_archive ), ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_invoice ( self , id_or_code : str ) -> Response : \"\"\"Get details of an invoice on your integration. Parameters ---------- id_or_code: str The invoice ID or code you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) def verify_invoice ( self , code : str ) -> Response : \"\"\"Verify details of an invoice on your integration. Parameters ---------- code: str Invoice code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/verify/ { code } \" ) return self . _handle_request ( \"GET\" , url ) def send_notification ( self , code : str ) -> Response : \"\"\"Send notification of an invoice to your customers Parameters ---------- code: str Invoice code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/notify/ { code } \" ) return self . _handle_request ( \"POST\" , url ) def get_total ( self ) -> Response : \"\"\"Get invoice metrics for dashboard Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/totals\" ) return self . _handle_request ( \"GET\" , url ) def finalize_invoice ( self , code : str ) -> Response : \"\"\"Finalize a Draft Invoice Parameters ---------- code: str Invoice Code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/finalize/ { code } \" ) return self . _handle_request ( \"POST\" , url ) def update_invoice ( self , id_or_code : str , customer : str , amount : int , due_date : Optional [ str ] = None , description : Optional [ str ] = None , line_items : Optional [ list [ dict [ str , Any ]]] = None , tax : Optional [ list [ dict [ str , Any ]]] = None , currency : Optional [ Currency ] = None , send_notification : Optional [ bool ] = None , draft : Optional [ bool ] = None , invoice_number : Optional [ int ] = None , split_code : Optional [ str ] = None , ): \"\"\"Update an invoice details on your integration Parameters ---------- id_or_code: str Invoice ID or slug customer: str Customer id or code amount: int Payment request amount. Only useful if line items and tax values are ignored. method will throw a friendly warning in the response if neither is available. due_date: Optional[str] ISO 8601 representation of request due date description: Optional[str] A short description of the payment request line_items: Optional[list[dict[str,Any]]] List of line items in the format [{\"name\":\"item 1\", \"amount\":2000}] tax: Optional[list[dict[str,Any]]] List of taxes to be charged in the format [{\"name\":\"VAT\", \"amount\":2000}] currency: Optional[Currency] Specify the currency of the invoice. Any value from the ``Currency`` enum send_notification: Optional[bool] Indicates whether Paystack sends an email notification to customer. Defaults to ``True`` draft: Optional[bool] Indicate if request should be saved as draft. Defaults to false and overrides send_notification invoice_number: Optional[int] Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point. split_code: Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" amount = validate_amount ( amount ) url = self . _url ( f \"/paymentrequest/ { id_or_code } \" ) payload = { \"customer\" : customer , \"amount\" : amount , } optional_params = [ ( \"due_date\" , due_date ), ( \"description\" , description ), ( \"line_items\" , line_items ), ( \"tax\" , tax ), ( \"currency\" , currency ), ( \"send_notification\" , send_notification ), ( \"draft\" , draft ), ( \"invoice_number\" , invoice_number ), ( \"split_code\" , split_code ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload ) def archive_invoice ( self , code : str ): \"\"\"Used to archive an invoice. Invoice will no longer be fetched on list or returned on verify. Parameters ---------- code: str Invoice ID Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/archive/ { code } \" ) return self . _handle_request ( \"POST\" , url )","title":"Invoice"},{"location":"reference/#pypaystack2.api.invoices.Invoice.archive_invoice","text":"Used to archive an invoice. Invoice will no longer be fetched on list or returned on verify.","title":"archive_invoice()"},{"location":"reference/#pypaystack2.api.invoices.Invoice.archive_invoice--parameters","text":"str Invoice ID","title":"Parameters"},{"location":"reference/#pypaystack2.api.invoices.Invoice.archive_invoice--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 def archive_invoice ( self , code : str ): \"\"\"Used to archive an invoice. Invoice will no longer be fetched on list or returned on verify. Parameters ---------- code: str Invoice ID Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/archive/ { code } \" ) return self . _handle_request ( \"POST\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.invoices.Invoice.create","text":"Create an invoice for payment on your integration","title":"create()"},{"location":"reference/#pypaystack2.api.invoices.Invoice.create--parameters","text":"str Customer id or code int Payment request amount. It should be used when line items and tax values aren't specified. Optional[str] ISO 8601 representation of request due date Optional[str] A short description of the payment request Optional[list[dict[str,Any]]] List of line items int the format [{\"name\":\"item 1\", \"amount\":2000, \"quantity\": 1}] Optional[list[dict[str,Any]]] List of taxes to be charged in the format [{\"name\":\"VAT\", \"amount\":2000}] Optional[Currency] Any value from Currency enum. default Currency.NGN Optional[bool] Indicates whether Paystack sends an email notification to customer. Defaults to True Optional[bool] Indicate if request should be saved as draft. Defaults to False and overrides send_notification Optional[bool] Set to True to create a draft invoice (adds an auto incrementing invoice number if none is provided) even if there are no line_items or tax passed Optional[int] Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point. Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w","title":"Parameters"},{"location":"reference/#pypaystack2.api.invoices.Invoice.create--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 def create ( self , customer : str , amount : int , due_date : Optional [ str ] = None , description : Optional [ str ] = None , line_items : Optional [ list [ dict [ str , Any ]]] = None , tax : Optional [ list [ dict [ str , Any ]]] = None , currency : Optional [ Currency ] = None , send_notification : Optional [ bool ] = None , draft : Optional [ bool ] = None , has_invoice : Optional [ bool ] = None , invoice_number : Optional [ int ] = None , split_code : Optional [ str ] = None , ) -> Response : \"\"\"Create an invoice for payment on your integration Parameters ---------- customer: str Customer id or code amount: int Payment request amount. It should be used when line items and tax values aren't specified. due_date: Optional[str] ISO 8601 representation of request due date description: Optional[str] A short description of the payment request line_items: Optional[list[dict[str,Any]]] List of line items int the format [{\"name\":\"item 1\", \"amount\":2000, \"quantity\": 1}] tax: Optional[list[dict[str,Any]]] List of taxes to be charged in the format [{\"name\":\"VAT\", \"amount\":2000}] currency: Optional[Currency] Any value from Currency enum. default ``Currency.NGN`` send_notification: Optional[bool] Indicates whether Paystack sends an email notification to customer. Defaults to ``True`` draft: Optional[bool] Indicate if request should be saved as draft. Defaults to ``False`` and overrides send_notification has_invoice: Optional[bool] Set to ``True`` to create a draft invoice (adds an auto incrementing invoice number if none is provided) even if there are no line_items or tax passed invoice_number: Optional[int] Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point. split_code: Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/paymentrequest\" ) payload = { \"customer\" : customer , \"amount\" : amount } optional_params = [ ( \"due_date\" , due_date ), ( \"description\" , description ), ( \"line_items\" , line_items ), ( \"tax\" , tax ), ( \"currency\" , currency ), ( \"send_notification\" , send_notification ), ( \"draft\" , draft ), ( \"has_invoice\" , has_invoice ), ( \"invoice_number\" , invoice_number ), ( \"split_code\" , split_code ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.invoices.Invoice.finalize_invoice","text":"Finalize a Draft Invoice","title":"finalize_invoice()"},{"location":"reference/#pypaystack2.api.invoices.Invoice.finalize_invoice--parameters","text":"str Invoice Code","title":"Parameters"},{"location":"reference/#pypaystack2.api.invoices.Invoice.finalize_invoice--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 def finalize_invoice ( self , code : str ) -> Response : \"\"\"Finalize a Draft Invoice Parameters ---------- code: str Invoice Code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/finalize/ { code } \" ) return self . _handle_request ( \"POST\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.invoices.Invoice.get_invoice","text":"Get details of an invoice on your integration.","title":"get_invoice()"},{"location":"reference/#pypaystack2.api.invoices.Invoice.get_invoice--parameters","text":"str The invoice ID or code you want to fetch","title":"Parameters"},{"location":"reference/#pypaystack2.api.invoices.Invoice.get_invoice--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 def get_invoice ( self , id_or_code : str ) -> Response : \"\"\"Get details of an invoice on your integration. Parameters ---------- id_or_code: str The invoice ID or code you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.invoices.Invoice.get_invoices","text":"Fetches the invoice available on your integration.","title":"get_invoices()"},{"location":"reference/#pypaystack2.api.invoices.Invoice.get_invoices--parameters","text":"str Filter by customer ID InvoiceStatus Filter by invoice status. Any value from enum of InvoiceStatus Currency Filter by currency. Any value from enum of Currency bool Show archived invoices. int Specify exactly what invoice you want to page. If not specify we use a default value of 1. int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Optional[str] A timestamp from which to start listing invoice e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing invoice e.g. 2016-09-24T00:00:05.000Z, 2016-09-21","title":"Parameters"},{"location":"reference/#pypaystack2.api.invoices.Invoice.get_invoices--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 def get_invoices ( self , customer : str , status : InvoiceStatus , currency : Currency , include_archive = False , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetches the invoice available on your integration. Parameters ---------- customer: str Filter by customer ID status: InvoiceStatus Filter by invoice status. Any value from enum of ``InvoiceStatus`` currency: Currency Filter by currency. Any value from enum of ``Currency`` include_archive: bool Show archived invoices. page: int Specify exactly what invoice you want to page. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing invoice e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing invoice e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest?perPage= { pagination } \" ) query_params = [ ( \"customer\" , customer ), ( \"status\" , status ), ( \"currency\" , currency ), ( \"include_archive\" , include_archive ), ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.invoices.Invoice.get_total","text":"Get invoice metrics for dashboard","title":"get_total()"},{"location":"reference/#pypaystack2.api.invoices.Invoice.get_total--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 199 200 201 202 203 204 205 206 207 208 209 def get_total ( self ) -> Response : \"\"\"Get invoice metrics for dashboard Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/totals\" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.invoices.Invoice.send_notification","text":"Send notification of an invoice to your customers","title":"send_notification()"},{"location":"reference/#pypaystack2.api.invoices.Invoice.send_notification--parameters","text":"str Invoice code","title":"Parameters"},{"location":"reference/#pypaystack2.api.invoices.Invoice.send_notification--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 def send_notification ( self , code : str ) -> Response : \"\"\"Send notification of an invoice to your customers Parameters ---------- code: str Invoice code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/notify/ { code } \" ) return self . _handle_request ( \"POST\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.invoices.Invoice.update_invoice","text":"Update an invoice details on your integration","title":"update_invoice()"},{"location":"reference/#pypaystack2.api.invoices.Invoice.update_invoice--parameters","text":"str Invoice ID or slug str Customer id or code int Payment request amount. Only useful if line items and tax values are ignored. method will throw a friendly warning in the response if neither is available. Optional[str] ISO 8601 representation of request due date Optional[str] A short description of the payment request Optional[list[dict[str,Any]]] List of line items in the format [{\"name\":\"item 1\", \"amount\":2000}] Optional[list[dict[str,Any]]] List of taxes to be charged in the format [{\"name\":\"VAT\", \"amount\":2000}] Optional[Currency] Specify the currency of the invoice. Any value from the Currency enum Optional[bool] Indicates whether Paystack sends an email notification to customer. Defaults to True Optional[bool] Indicate if request should be saved as draft. Defaults to false and overrides send_notification Optional[int] Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point. Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w","title":"Parameters"},{"location":"reference/#pypaystack2.api.invoices.Invoice.update_invoice--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 def update_invoice ( self , id_or_code : str , customer : str , amount : int , due_date : Optional [ str ] = None , description : Optional [ str ] = None , line_items : Optional [ list [ dict [ str , Any ]]] = None , tax : Optional [ list [ dict [ str , Any ]]] = None , currency : Optional [ Currency ] = None , send_notification : Optional [ bool ] = None , draft : Optional [ bool ] = None , invoice_number : Optional [ int ] = None , split_code : Optional [ str ] = None , ): \"\"\"Update an invoice details on your integration Parameters ---------- id_or_code: str Invoice ID or slug customer: str Customer id or code amount: int Payment request amount. Only useful if line items and tax values are ignored. method will throw a friendly warning in the response if neither is available. due_date: Optional[str] ISO 8601 representation of request due date description: Optional[str] A short description of the payment request line_items: Optional[list[dict[str,Any]]] List of line items in the format [{\"name\":\"item 1\", \"amount\":2000}] tax: Optional[list[dict[str,Any]]] List of taxes to be charged in the format [{\"name\":\"VAT\", \"amount\":2000}] currency: Optional[Currency] Specify the currency of the invoice. Any value from the ``Currency`` enum send_notification: Optional[bool] Indicates whether Paystack sends an email notification to customer. Defaults to ``True`` draft: Optional[bool] Indicate if request should be saved as draft. Defaults to false and overrides send_notification invoice_number: Optional[int] Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point. split_code: Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" amount = validate_amount ( amount ) url = self . _url ( f \"/paymentrequest/ { id_or_code } \" ) payload = { \"customer\" : customer , \"amount\" : amount , } optional_params = [ ( \"due_date\" , due_date ), ( \"description\" , description ), ( \"line_items\" , line_items ), ( \"tax\" , tax ), ( \"currency\" , currency ), ( \"send_notification\" , send_notification ), ( \"draft\" , draft ), ( \"invoice_number\" , invoice_number ), ( \"split_code\" , split_code ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.invoices.Invoice.verify_invoice","text":"Verify details of an invoice on your integration.","title":"verify_invoice()"},{"location":"reference/#pypaystack2.api.invoices.Invoice.verify_invoice--parameters","text":"str Invoice code","title":"Parameters"},{"location":"reference/#pypaystack2.api.invoices.Invoice.verify_invoice--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/invoices.py 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 def verify_invoice ( self , code : str ) -> Response : \"\"\"Verify details of an invoice on your integration. Parameters ---------- code: str Invoice code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/paymentrequest/verify/ { code } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.miscellaneous.Miscellaneous","text":"Bases: BaseAPI Provides a wrapper for paystack Miscellaneous API The Miscellaneous API are supporting APIs that can be used to provide more details to other APIs. https://paystack.com/docs/api/#miscellaneous Source code in pypaystack2/api/miscellaneous.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 class Miscellaneous ( BaseAPI ): \"\"\"Provides a wrapper for paystack Miscellaneous API The Miscellaneous API are supporting APIs that can be used to provide more details to other APIs. https://paystack.com/docs/api/#miscellaneous \"\"\" def get_banks ( self , country : Country , use_cursor : bool = False , next : Optional [ str ] = None , previous : Optional [ str ] = None , gateway : Optional [ Gateway ] = None , type : Optional [ BankType ] = None , currency : Optional [ Currency ] = None , pagination = 50 , ) -> Response : \"\"\"Get a list of all supported banks and their properties Parameters ---------- country: Country The country from which to obtain the list of supported banks. any value from the ``Country`` enum. use_cursor: bool Flag to enable cursor pagination. next: Optional[str] A cursor that indicates your place in the list. It can be used to fetch the next page of the list previous: Optional[str] A cursor that indicates your place in the list. It should be used to fetch the previous page of the list after an intial next request gateway: Optional[Gateway] The gateway type of the bank. Any value from the ``Gateway`` enum. type: Optional[BankType] Type of financial channel. For Ghanaian channels, please use either mobile_money for mobile money channels OR ghipps for bank channels currency: Optional[Currency] Any value from the Currency enum. pagination: int The number of objects to return per page. Defaults to 50, and limited to 100 records per page. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" country = Country . get_full ( country ) url = self . _url ( f \"/bank?perPage= { pagination } \" ) query_params = [ ( \"country\" , country ), ( \"use_cursor\" , use_cursor ), ( \"next\" , next ), ( \"previous\" , previous ), ( \"gateway\" , gateway ), ( \"type\" , type ), ( \"currency\" , currency ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_providers ( self , pay_with_bank_transfer : bool = False , ) -> Response : \"\"\"Get a list of all providers for Dedicated Virtual Account Parameters ---------- pay_with_bank_transfer: bool A flag to filter for available providers Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bank?pay_with_bank_transfer= { pay_with_bank_transfer } \" ) return self . _handle_request ( \"GET\" , url ) def get_countries ( self ) -> Response : \"\"\"Gets a list of Countries that Paystack currently supports Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/country\" ) return self . _handle_request ( \"GET\" , url ) def get_states ( self , country : Country ): \"\"\"Get a list of states for a country for address verification. Parameters ---------- country: Country Any value from the country enum. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/address_verification/states?country= { country } \" ) return self . _handle_request ( \"GET\" , url )","title":"Miscellaneous"},{"location":"reference/#pypaystack2.api.miscellaneous.Miscellaneous.get_banks","text":"Get a list of all supported banks and their properties","title":"get_banks()"},{"location":"reference/#pypaystack2.api.miscellaneous.Miscellaneous.get_banks--parameters","text":"Country The country from which to obtain the list of supported banks. any value from the Country enum. bool Flag to enable cursor pagination. Optional[str] A cursor that indicates your place in the list. It can be used to fetch the next page of the list Optional[str] A cursor that indicates your place in the list. It should be used to fetch the previous page of the list after an intial next request Optional[Gateway] The gateway type of the bank. Any value from the Gateway enum. Optional[BankType] Type of financial channel. For Ghanaian channels, please use either mobile_money for mobile money channels OR ghipps for bank channels Optional[Currency] Any value from the Currency enum. int The number of objects to return per page. Defaults to 50, and limited to 100 records per page.","title":"Parameters"},{"location":"reference/#pypaystack2.api.miscellaneous.Miscellaneous.get_banks--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/miscellaneous.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def get_banks ( self , country : Country , use_cursor : bool = False , next : Optional [ str ] = None , previous : Optional [ str ] = None , gateway : Optional [ Gateway ] = None , type : Optional [ BankType ] = None , currency : Optional [ Currency ] = None , pagination = 50 , ) -> Response : \"\"\"Get a list of all supported banks and their properties Parameters ---------- country: Country The country from which to obtain the list of supported banks. any value from the ``Country`` enum. use_cursor: bool Flag to enable cursor pagination. next: Optional[str] A cursor that indicates your place in the list. It can be used to fetch the next page of the list previous: Optional[str] A cursor that indicates your place in the list. It should be used to fetch the previous page of the list after an intial next request gateway: Optional[Gateway] The gateway type of the bank. Any value from the ``Gateway`` enum. type: Optional[BankType] Type of financial channel. For Ghanaian channels, please use either mobile_money for mobile money channels OR ghipps for bank channels currency: Optional[Currency] Any value from the Currency enum. pagination: int The number of objects to return per page. Defaults to 50, and limited to 100 records per page. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" country = Country . get_full ( country ) url = self . _url ( f \"/bank?perPage= { pagination } \" ) query_params = [ ( \"country\" , country ), ( \"use_cursor\" , use_cursor ), ( \"next\" , next ), ( \"previous\" , previous ), ( \"gateway\" , gateway ), ( \"type\" , type ), ( \"currency\" , currency ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.miscellaneous.Miscellaneous.get_countries","text":"Gets a list of Countries that Paystack currently supports","title":"get_countries()"},{"location":"reference/#pypaystack2.api.miscellaneous.Miscellaneous.get_countries--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/miscellaneous.py 97 98 99 100 101 102 103 104 105 106 107 def get_countries ( self ) -> Response : \"\"\"Gets a list of Countries that Paystack currently supports Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/country\" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.miscellaneous.Miscellaneous.get_providers","text":"Get a list of all providers for Dedicated Virtual Account","title":"get_providers()"},{"location":"reference/#pypaystack2.api.miscellaneous.Miscellaneous.get_providers--parameters","text":"bool A flag to filter for available providers","title":"Parameters"},{"location":"reference/#pypaystack2.api.miscellaneous.Miscellaneous.get_providers--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/miscellaneous.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def get_providers ( self , pay_with_bank_transfer : bool = False , ) -> Response : \"\"\"Get a list of all providers for Dedicated Virtual Account Parameters ---------- pay_with_bank_transfer: bool A flag to filter for available providers Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/bank?pay_with_bank_transfer= { pay_with_bank_transfer } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.miscellaneous.Miscellaneous.get_states","text":"Get a list of states for a country for address verification.","title":"get_states()"},{"location":"reference/#pypaystack2.api.miscellaneous.Miscellaneous.get_states--parameters","text":"Country Any value from the country enum.","title":"Parameters"},{"location":"reference/#pypaystack2.api.miscellaneous.Miscellaneous.get_states--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/miscellaneous.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 def get_states ( self , country : Country ): \"\"\"Get a list of states for a country for address verification. Parameters ---------- country: Country Any value from the country enum. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/address_verification/states?country= { country } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.payment_pages.Page","text":"Bases: BaseAPI Provides a wrapper for paystack Payment Pages API The Payment Pages API provides a quick and secure way to collect payment for products. https://paystack.com/docs/api/#page Source code in pypaystack2/api/payment_pages.pyclass Page ( BaseAPI ): \"\"\"Provides a wrapper for paystack Payment Pages API The Payment Pages API provides a quick and secure way to collect payment for products. https://paystack.com/docs/api/#page \"\"\" def create ( self , name : str , description : Optional [ str ] = None , amount : Optional [ int ] = None , slug : Optional [ str ] = None , metadata : Optional [ str ] = None , redirect_url : Optional [ str ] = None , custom_fields : Optional [ list ] = None , ) -> Response : \"\"\"Create a payment page on your integration Parameters ---------- name: str Name of page description: Optional[str] A description for this page amount: Optional[int] Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` slug: Optional[str] URL slug you would like to be associated with this page. Page will be accessible at ``https://paystack.com/pay/[slug]`` metadata: Optional[str] Extra data to configure the payment page including subaccount, logo image, transaction charge redirect_url: Optional[str] If you would like Paystack to redirect someplace upon successful payment, specify the URL here. custom_fields: Optional[list] If you would like to accept custom fields, specify them here. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/page\" ) payload = { \"name\" : name } optional_params = [ ( \"description\" , description ), ( \"amount\" , amount ), ( \"slug\" , slug ), ( \"metadata\" , metadata ), ( \"redirect_url\" , redirect_url ), ( \"custom_fields\" , custom_fields ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_pages ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetch payment pages available on your integration. Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing page e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing page e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page?perPage=\" + str ( pagination )) query_params = [ ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_page ( self , id_or_slug : str ): \"\"\"Get details of a payment page on your integration. Parameters ---------- id_or_slug: str The page ``ID`` or ``slug`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page/ { id_or_slug } \" ) return self . _handle_request ( \"GET\" , url ) def update ( self , id_or_slug : str , name : str , description : str , amount : int , active : Optional [ bool ] = None , ) -> Response : \"\"\"Get details of a payment page on your integration. Parameters ---------- id_or_slug: str The page ``ID`` or ``slug`` you want to fetch name: str Name of page description: str A description for the page amount: int Default amount you want to accept using this page. If none is set, customer is free to provide any amount of their choice. The latter scenario is useful for accepting donations active: Optional[bool] Set to ``False`` to deactivate page url Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page/ { id_or_slug } \" ) payload = { \"name\" : name , \"description\" : description , } optional_params = [ ( \"amount\" , amount ), ( \"active\" , active ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload ) def check_slug_available ( self , slug : str ) -> Response : \"\"\"Check the availability of a slug for a payment page. Parameters ---------- slug: str URL slug to be confirmed Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page/check_slug_availability/ { slug } \" ) return self . _handle_request ( \"GET\" , url ) def add_products ( self , id : str , products : list [ int ]): \"\"\"Add products to a payment page Parameters ---------- id: str Id of the payment page products: list[int] Ids of all the products Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page/ { id } /product\" ) payload = { \"product\" : products } return self . _handle_request ( \"POST\" , url , payload )","title":"Page"},{"location":"reference/#pypaystack2.api.payment_pages.Page.add_products","text":"Add products to a payment page","title":"add_products()"},{"location":"reference/#pypaystack2.api.payment_pages.Page.add_products--parameters","text":"str Id of the payment page list[int] Ids of all the products","title":"Parameters"},{"location":"reference/#pypaystack2.api.payment_pages.Page.add_products--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/payment_pages.py 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 def add_products ( self , id : str , products : list [ int ]): \"\"\"Add products to a payment page Parameters ---------- id: str Id of the payment page products: list[int] Ids of all the products Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page/ { id } /product\" ) payload = { \"product\" : products } return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.payment_pages.Page.check_slug_available","text":"Check the availability of a slug for a payment page.","title":"check_slug_available()"},{"location":"reference/#pypaystack2.api.payment_pages.Page.check_slug_available--parameters","text":"str URL slug to be confirmed","title":"Parameters"},{"location":"reference/#pypaystack2.api.payment_pages.Page.check_slug_available--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/payment_pages.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 def check_slug_available ( self , slug : str ) -> Response : \"\"\"Check the availability of a slug for a payment page. Parameters ---------- slug: str URL slug to be confirmed Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page/check_slug_availability/ { slug } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.payment_pages.Page.create","text":"Create a payment page on your integration","title":"create()"},{"location":"reference/#pypaystack2.api.payment_pages.Page.create--parameters","text":"str Name of page Optional[str] A description for this page Optional[int] Amount should be in kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR Optional[str] URL slug you would like to be associated with this page. Page will be accessible at https://paystack.com/pay/[slug] Optional[str] Extra data to configure the payment page including subaccount, logo image, transaction charge Optional[str] If you would like Paystack to redirect someplace upon successful payment, specify the URL here. Optional[list] If you would like to accept custom fields, specify them here.","title":"Parameters"},{"location":"reference/#pypaystack2.api.payment_pages.Page.create--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/payment_pages.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def create ( self , name : str , description : Optional [ str ] = None , amount : Optional [ int ] = None , slug : Optional [ str ] = None , metadata : Optional [ str ] = None , redirect_url : Optional [ str ] = None , custom_fields : Optional [ list ] = None , ) -> Response : \"\"\"Create a payment page on your integration Parameters ---------- name: str Name of page description: Optional[str] A description for this page amount: Optional[int] Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` slug: Optional[str] URL slug you would like to be associated with this page. Page will be accessible at ``https://paystack.com/pay/[slug]`` metadata: Optional[str] Extra data to configure the payment page including subaccount, logo image, transaction charge redirect_url: Optional[str] If you would like Paystack to redirect someplace upon successful payment, specify the URL here. custom_fields: Optional[list] If you would like to accept custom fields, specify them here. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/page\" ) payload = { \"name\" : name } optional_params = [ ( \"description\" , description ), ( \"amount\" , amount ), ( \"slug\" , slug ), ( \"metadata\" , metadata ), ( \"redirect_url\" , redirect_url ), ( \"custom_fields\" , custom_fields ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.payment_pages.Page.get_page","text":"Get details of a payment page on your integration.","title":"get_page()"},{"location":"reference/#pypaystack2.api.payment_pages.Page.get_page--parameters","text":"str The page ID or slug you want to fetch","title":"Parameters"},{"location":"reference/#pypaystack2.api.payment_pages.Page.get_page--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/payment_pages.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 def get_page ( self , id_or_slug : str ): \"\"\"Get details of a payment page on your integration. Parameters ---------- id_or_slug: str The page ``ID`` or ``slug`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page/ { id_or_slug } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.payment_pages.Page.get_pages","text":"Fetch payment pages available on your integration.","title":"get_pages()"},{"location":"reference/#pypaystack2.api.payment_pages.Page.get_pages--parameters","text":"int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Optional[str] A timestamp from which to start listing page e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing page e.g. 2016-09-24T00:00:05.000Z, 2016-09-21","title":"Parameters"},{"location":"reference/#pypaystack2.api.payment_pages.Page.get_pages--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/payment_pages.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def get_pages ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetch payment pages available on your integration. Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing page e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing page e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page?perPage=\" + str ( pagination )) query_params = [ ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.payment_pages.Page.update","text":"Get details of a payment page on your integration.","title":"update()"},{"location":"reference/#pypaystack2.api.payment_pages.Page.update--parameters","text":"str The page ID or slug you want to fetch str Name of page str A description for the page int Default amount you want to accept using this page. If none is set, customer is free to provide any amount of their choice. The latter scenario is useful for accepting donations Optional[bool] Set to False to deactivate page url","title":"Parameters"},{"location":"reference/#pypaystack2.api.payment_pages.Page.update--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/payment_pages.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 def update ( self , id_or_slug : str , name : str , description : str , amount : int , active : Optional [ bool ] = None , ) -> Response : \"\"\"Get details of a payment page on your integration. Parameters ---------- id_or_slug: str The page ``ID`` or ``slug`` you want to fetch name: str Name of page description: str A description for the page amount: int Default amount you want to accept using this page. If none is set, customer is free to provide any amount of their choice. The latter scenario is useful for accepting donations active: Optional[bool] Set to ``False`` to deactivate page url Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/page/ { id_or_slug } \" ) payload = { \"name\" : name , \"description\" : description , } optional_params = [ ( \"amount\" , amount ), ( \"active\" , active ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.plans.Plan","text":"Bases: BaseAPI Provides a wrapper for paystack Plans API The Plans API allows you create and manage installment payment options on your integration. https://paystack.com/docs/api/#plan Source code in pypaystack2/api/plans.pyclass Plan ( BaseAPI ): \"\"\"Provides a wrapper for paystack Plans API The Plans API allows you create and manage installment payment options on your integration. https://paystack.com/docs/api/#plan \"\"\" def create ( self , name : str , amount : int , interval : Interval , description : Optional [ str ] = None , currency : Optional [ Currency ] = None , invoice_limit : Optional [ int ] = None , send_invoices : bool = False , send_sms : bool = False , ) -> Response : \"\"\"Create a plan on your integration Parameters ---------- name: str Name of plan amount: int Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` interval: Interval Any value from the ``Interval`` enum. description: Optional[str] A description for this plan currency: Optional[Currency] Currency in which amount is set. Any of the value from the ``Currency`` enum invoice_limit: Optional[int] Number of invoices to raise during subscription to this plan. Can be overridden by specifying an ``invoice_limit`` while subscribing send_invoices: bool Set to ``False`` if you don't want invoices to be sent to your customers send_sms: bool Set to ``False`` if you don't want text messages to be sent to your customers Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" interval = validate_interval ( interval ) amount = validate_amount ( amount ) url = self . _url ( \"/plan/\" ) payload = { \"name\" : name , \"amount\" : amount , \"interval\" : interval , } optional_params = [ ( \"send_invoices\" , send_invoices ), ( \"send_sms\" , send_sms ), ( \"description\" , description ), ( \"currency\" , currency ), ( \"invoice_limit\" , invoice_limit ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_plans ( self , page = 1 , pagination = 50 , status : Optional [ PlanStatus ] = None , interval : Optional [ Interval ] = None , amount : Optional [ int ] = None , ) -> Response : \"\"\"Fetch plans available on your integration. Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. status: Optional[PlanStatus] Filter list by plans with specified status interval: Optional[Interval] Filter list by plans with specified interval amount: Optional[int] Filter list by plans with specified amount ( kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR``) Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if amount : amount = validate_amount ( amount ) url = self . _url ( f \"/plan/?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"status\" , status ), ( \"interval\" , interval ), ( \"amount\" , amount ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_plan ( self , id_or_code : str ) -> Response : \"\"\"Get details of a plan on your integration. Parameters ---------- id_or_code: str The plan ``ID`` or ``code`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/plan/ {} /\" . format ( id_or_code )) return self . _handle_request ( \"GET\" , url ) def update ( self , id_or_code : str , name : str , amount : int , interval : Interval , description : Optional [ str ] = None , currency : Optional [ Currency ] = None , invoice_limit : Optional [ int ] = None , send_invoices : bool = False , send_sms : bool = False , ) -> Response : \"\"\" Parameters ---------- id_or_code: str Plan's ID or code name: str Name of plan amount: int Amount should be in kobo if currency is ``Currency.NGN`` and pesewas for ``Currency.GHS`` interval: Interval Any value from the ``Interval`` enum. description: Optional[str] A description for this plan. currency: Optional[Currency] Any value from the ``Currency`` enum. invoice_limit: Optional[int] Number of invoices to raise during subscription to this plan. Can be overridden by specifying an ``invoice_limit`` while subscribing. send_invoices: bool Set to ``False`` if you don't want invoices to be sent to your customers send_sms: bool Set to ``False`` if you don't want text messages to be sent to your customers Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" interval = validate_interval ( interval ) amount = validate_amount ( amount ) url = self . _url ( \"/plan/ {} /\" . format ( id_or_code )) payload = { \"name\" : name , \"amount\" : amount , \"interval\" : interval , } optional_params = [ ( \"send_invoices\" , send_invoices ), ( \"send_sms\" , send_sms ), ( \"description\" , description ), ( \"currency\" , currency ), ( \"invoice_limit\" , invoice_limit ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload )","title":"Plan"},{"location":"reference/#pypaystack2.api.plans.Plan.create","text":"Create a plan on your integration","title":"create()"},{"location":"reference/#pypaystack2.api.plans.Plan.create--parameters","text":"str Name of plan int Amount should be in kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR Interval Any value from the Interval enum. Optional[str] A description for this plan Optional[Currency] Currency in which amount is set. Any of the value from the Currency enum Optional[int] Number of invoices to raise during subscription to this plan. Can be overridden by specifying an invoice_limit while subscribing bool Set to False if you don't want invoices to be sent to your customers bool Set to False if you don't want text messages to be sent to your customers","title":"Parameters"},{"location":"reference/#pypaystack2.api.plans.Plan.create--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/plans.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def create ( self , name : str , amount : int , interval : Interval , description : Optional [ str ] = None , currency : Optional [ Currency ] = None , invoice_limit : Optional [ int ] = None , send_invoices : bool = False , send_sms : bool = False , ) -> Response : \"\"\"Create a plan on your integration Parameters ---------- name: str Name of plan amount: int Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` interval: Interval Any value from the ``Interval`` enum. description: Optional[str] A description for this plan currency: Optional[Currency] Currency in which amount is set. Any of the value from the ``Currency`` enum invoice_limit: Optional[int] Number of invoices to raise during subscription to this plan. Can be overridden by specifying an ``invoice_limit`` while subscribing send_invoices: bool Set to ``False`` if you don't want invoices to be sent to your customers send_sms: bool Set to ``False`` if you don't want text messages to be sent to your customers Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" interval = validate_interval ( interval ) amount = validate_amount ( amount ) url = self . _url ( \"/plan/\" ) payload = { \"name\" : name , \"amount\" : amount , \"interval\" : interval , } optional_params = [ ( \"send_invoices\" , send_invoices ), ( \"send_sms\" , send_sms ), ( \"description\" , description ), ( \"currency\" , currency ), ( \"invoice_limit\" , invoice_limit ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.plans.Plan.get_plan","text":"Get details of a plan on your integration.","title":"get_plan()"},{"location":"reference/#pypaystack2.api.plans.Plan.get_plan--parameters","text":"str The plan ID or code you want to fetch","title":"Parameters"},{"location":"reference/#pypaystack2.api.plans.Plan.get_plan--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/plans.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 def get_plan ( self , id_or_code : str ) -> Response : \"\"\"Get details of a plan on your integration. Parameters ---------- id_or_code: str The plan ``ID`` or ``code`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/plan/ {} /\" . format ( id_or_code )) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.plans.Plan.get_plans","text":"Fetch plans available on your integration.","title":"get_plans()"},{"location":"reference/#pypaystack2.api.plans.Plan.get_plans--parameters","text":"int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Optional[PlanStatus] Filter list by plans with specified status Optional[Interval] Filter list by plans with specified interval Optional[int] Filter list by plans with specified amount ( kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR )","title":"Parameters"},{"location":"reference/#pypaystack2.api.plans.Plan.get_plans--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/plans.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def get_plans ( self , page = 1 , pagination = 50 , status : Optional [ PlanStatus ] = None , interval : Optional [ Interval ] = None , amount : Optional [ int ] = None , ) -> Response : \"\"\"Fetch plans available on your integration. Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination:int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. status: Optional[PlanStatus] Filter list by plans with specified status interval: Optional[Interval] Filter list by plans with specified interval amount: Optional[int] Filter list by plans with specified amount ( kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR``) Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if amount : amount = validate_amount ( amount ) url = self . _url ( f \"/plan/?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"status\" , status ), ( \"interval\" , interval ), ( \"amount\" , amount ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.plans.Plan.update","text":"","title":"update()"},{"location":"reference/#pypaystack2.api.plans.Plan.update--parameters","text":"str Plan's ID or code str Name of plan int Amount should be in kobo if currency is Currency.NGN and pesewas for Currency.GHS Interval Any value from the Interval enum. Optional[str] A description for this plan. Optional[Currency] Any value from the Currency enum. Optional[int] Number of invoices to raise during subscription to this plan. Can be overridden by specifying an invoice_limit while subscribing. bool Set to False if you don't want invoices to be sent to your customers bool Set to False if you don't want text messages to be sent to your customers","title":"Parameters"},{"location":"reference/#pypaystack2.api.plans.Plan.update--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/plans.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 def update ( self , id_or_code : str , name : str , amount : int , interval : Interval , description : Optional [ str ] = None , currency : Optional [ Currency ] = None , invoice_limit : Optional [ int ] = None , send_invoices : bool = False , send_sms : bool = False , ) -> Response : \"\"\" Parameters ---------- id_or_code: str Plan's ID or code name: str Name of plan amount: int Amount should be in kobo if currency is ``Currency.NGN`` and pesewas for ``Currency.GHS`` interval: Interval Any value from the ``Interval`` enum. description: Optional[str] A description for this plan. currency: Optional[Currency] Any value from the ``Currency`` enum. invoice_limit: Optional[int] Number of invoices to raise during subscription to this plan. Can be overridden by specifying an ``invoice_limit`` while subscribing. send_invoices: bool Set to ``False`` if you don't want invoices to be sent to your customers send_sms: bool Set to ``False`` if you don't want text messages to be sent to your customers Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" interval = validate_interval ( interval ) amount = validate_amount ( amount ) url = self . _url ( \"/plan/ {} /\" . format ( id_or_code )) payload = { \"name\" : name , \"amount\" : amount , \"interval\" : interval , } optional_params = [ ( \"send_invoices\" , send_invoices ), ( \"send_sms\" , send_sms ), ( \"description\" , description ), ( \"currency\" , currency ), ( \"invoice_limit\" , invoice_limit ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.products.Product","text":"Bases: BaseAPI Provides a wrapper for paystack Products API The Products API allows you to create and manage inventories on your integration. https://paystack.com/docs/api/#product Source code in pypaystack2/api/products.pyclass Product ( BaseAPI ): \"\"\"Provides a wrapper for paystack Products API The Products API allows you to create and manage inventories on your integration. https://paystack.com/docs/api/#product \"\"\" def create ( self , name : str , description : str , price : int , currency : Currency , unlimited : Optional [ bool ] = None , quantity : Optional [ int ] = None , ) -> Response : \"\"\"Create a product on your integration Parameters ---------- name: str Name of product description: str A description for this product price: int Price should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` currency: Currency Any value from the ``Currency`` enum unlimited: Optional[bool] Set to ``True`` if the product has unlimited stock. Leave as ``False`` if the product has limited stock quantity: Optional[int] Number of products in stock. Use if unlimited is ``False`` Returns ------- Response A named tuple containing the response gotten from paystack's server. Raises ------ InvalidDataError When unlimited is set to True and quantity has a value. \"\"\" if unlimited is True and quantity is not None : raise InvalidDataError ( \"You can't have unlimited set to True and have a quantity value.\" ) url = self . _url ( \"/product\" ) payload = { \"name\" : name , \"description\" : description , \"price\" : price , \"currency\" : currency , } optional_params = [ ( \"unlimited\" , unlimited ), ( \"quantity\" , quantity ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_products ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetches products available on your integration. Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing product e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] timestamp at which to stop listing product e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/product?perPage=\" + str ( pagination )) query_params = [ ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_product ( self , id : str ) -> Response : \"\"\"Get details of a product on your integration. Parameters ---------- id: str The product ``ID`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/product/ { id } \" ) return self . _handle_request ( \"GET\" , url ) def update ( self , id : str , name : str , description : str , price : int , currency : Currency , unlimited : Optional [ bool ] = None , quantity : Optional [ int ] = None , ) -> Response : \"\"\"Update a product details on your integration Parameters ---------- id: str Product ID name: str Name of product description: str A description for this product price: int Price should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is GHS, and cents, if currency is ``Currency.ZAR`` currency: Currency Any value from the ``Currency`` enum unlimited: Optional[bool] Set to ``True`` if the product has unlimited stock. Leave as ``False`` if the product has limited stock quantity: Optional[int] Number of products in stock. Use if unlimited is ``False`` Returns ------- Response A named tuple containing the response gotten from paystack's server. Raises ------ InvalidDataError When unlimited is set to True and quantity has a value. \"\"\" if unlimited is True and quantity is not None : raise InvalidDataError ( \"You can't have unlimited set to True and quantity have a value.\" ) url = self . _url ( f \"/product/ { id } \" ) payload = { \"name\" : name , \"description\" : description , \"price\" : price , \"currency\" : currency , } optional_params = [ ( \"unlimited\" , unlimited ), ( \"quantity\" , quantity ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload )","title":"Product"},{"location":"reference/#pypaystack2.api.products.Product.create","text":"Create a product on your integration","title":"create()"},{"location":"reference/#pypaystack2.api.products.Product.create--parameters","text":"str Name of product str A description for this product int Price should be in kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR Currency Any value from the Currency enum Optional[bool] Set to True if the product has unlimited stock. Leave as False if the product has limited stock Optional[int] Number of products in stock. Use if unlimited is False","title":"Parameters"},{"location":"reference/#pypaystack2.api.products.Product.create--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.products.Product.create--raises","text":"InvalidDataError When unlimited is set to True and quantity has a value. Source code in pypaystack2/api/products.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def create ( self , name : str , description : str , price : int , currency : Currency , unlimited : Optional [ bool ] = None , quantity : Optional [ int ] = None , ) -> Response : \"\"\"Create a product on your integration Parameters ---------- name: str Name of product description: str A description for this product price: int Price should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` currency: Currency Any value from the ``Currency`` enum unlimited: Optional[bool] Set to ``True`` if the product has unlimited stock. Leave as ``False`` if the product has limited stock quantity: Optional[int] Number of products in stock. Use if unlimited is ``False`` Returns ------- Response A named tuple containing the response gotten from paystack's server. Raises ------ InvalidDataError When unlimited is set to True and quantity has a value. \"\"\" if unlimited is True and quantity is not None : raise InvalidDataError ( \"You can't have unlimited set to True and have a quantity value.\" ) url = self . _url ( \"/product\" ) payload = { \"name\" : name , \"description\" : description , \"price\" : price , \"currency\" : currency , } optional_params = [ ( \"unlimited\" , unlimited ), ( \"quantity\" , quantity ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Raises"},{"location":"reference/#pypaystack2.api.products.Product.get_product","text":"Get details of a product on your integration.","title":"get_product()"},{"location":"reference/#pypaystack2.api.products.Product.get_product--parameters","text":"str The product ID you want to fetch","title":"Parameters"},{"location":"reference/#pypaystack2.api.products.Product.get_product--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/products.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def get_product ( self , id : str ) -> Response : \"\"\"Get details of a product on your integration. Parameters ---------- id: str The product ``ID`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/product/ { id } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.products.Product.get_products","text":"Fetches products available on your integration.","title":"get_products()"},{"location":"reference/#pypaystack2.api.products.Product.get_products--parameters","text":"int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Optional[str] A timestamp from which to start listing product e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] timestamp at which to stop listing product e.g. 2016-09-24T00:00:05.000Z, 2016-09-21","title":"Parameters"},{"location":"reference/#pypaystack2.api.products.Product.get_products--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/products.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def get_products ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetches products available on your integration. Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing product e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] timestamp at which to stop listing product e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/product?perPage=\" + str ( pagination )) query_params = [ ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.products.Product.update","text":"Update a product details on your integration","title":"update()"},{"location":"reference/#pypaystack2.api.products.Product.update--parameters","text":"str Product ID str Name of product str A description for this product int Price should be in kobo if currency is Currency.NGN , pesewas, if currency is GHS, and cents, if currency is Currency.ZAR Currency Any value from the Currency enum Optional[bool] Set to True if the product has unlimited stock. Leave as False if the product has limited stock Optional[int] Number of products in stock. Use if unlimited is False","title":"Parameters"},{"location":"reference/#pypaystack2.api.products.Product.update--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.products.Product.update--raises","text":"InvalidDataError When unlimited is set to True and quantity has a value. Source code in pypaystack2/api/products.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 def update ( self , id : str , name : str , description : str , price : int , currency : Currency , unlimited : Optional [ bool ] = None , quantity : Optional [ int ] = None , ) -> Response : \"\"\"Update a product details on your integration Parameters ---------- id: str Product ID name: str Name of product description: str A description for this product price: int Price should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is GHS, and cents, if currency is ``Currency.ZAR`` currency: Currency Any value from the ``Currency`` enum unlimited: Optional[bool] Set to ``True`` if the product has unlimited stock. Leave as ``False`` if the product has limited stock quantity: Optional[int] Number of products in stock. Use if unlimited is ``False`` Returns ------- Response A named tuple containing the response gotten from paystack's server. Raises ------ InvalidDataError When unlimited is set to True and quantity has a value. \"\"\" if unlimited is True and quantity is not None : raise InvalidDataError ( \"You can't have unlimited set to True and quantity have a value.\" ) url = self . _url ( f \"/product/ { id } \" ) payload = { \"name\" : name , \"description\" : description , \"price\" : price , \"currency\" : currency , } optional_params = [ ( \"unlimited\" , unlimited ), ( \"quantity\" , quantity ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload )","title":"Raises"},{"location":"reference/#pypaystack2.api.refunds.Refund","text":"Bases: BaseAPI Provides a wrapper for paystack Refunds API The Refunds API allows you to create and manage transaction refunds. https://paystack.com/docs/api/#refund Source code in pypaystack2/api/refunds.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 class Refund ( BaseAPI ): \"\"\"Provides a wrapper for paystack Refunds API The Refunds API allows you to create and manage transaction refunds. https://paystack.com/docs/api/#refund \"\"\" def create ( self , transaction : str , amount : Optional [ int ] = None , currency : Optional [ Currency ] = None , customer_note : Optional [ str ] = None , merchant_note : Optional [ str ] = None , ) -> Response : \"\"\"Initiate a refund on your integration Parameters ---------- transaction: str Transaction reference or id amount: Optional[int] Amount ( in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR ) to be refunded to the customer. Amount is optional(defaults to original transaction amount) and cannot be more than the original transaction amount currency: Optional[Currency] Any value from the ``Currency`` enum customer_note: Optional[str] Customer reason merchant_note: Optional[str] Merchant reason Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if amount is not None : amount = validate_amount ( amount ) url = self . _url ( \"/refund\" ) payload = { \"transaction\" : transaction } optional_params = [ ( \"amount\" , amount ), ( \"currency\" , currency ), ( \"customer_note\" , customer_note ), ( \"merchant_note\" , merchant_note ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_refunds ( self , reference : str , currency : Currency , pagination = 50 , page = 1 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetch refunds available on your integration. Parameters ---------- reference: str Identifier for transaction to be refunded currency: Currency Any value from the ``Currency`` enum pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what refund you want to page. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing refund e.g. 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing refund e.g. 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/refund?perPage= { pagination } \" ) query_params = [ ( \"reference\" , reference ), ( \"currency\" , currency ), ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_refund ( self , reference : str ) -> Response : \"\"\"Get details of a refund on your integration. Parameters ---------- reference: str Identifier for transaction to be refunded Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/refund/ { reference } \" ) return self . _handle_request ( \"GET\" , url )","title":"Refund"},{"location":"reference/#pypaystack2.api.refunds.Refund.create","text":"Initiate a refund on your integration","title":"create()"},{"location":"reference/#pypaystack2.api.refunds.Refund.create--parameters","text":"str Transaction reference or id Optional[int] Amount ( in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR ) to be refunded to the customer. Amount is optional(defaults to original transaction amount) and cannot be more than the original transaction amount Optional[Currency] Any value from the Currency enum Optional[str] Customer reason Optional[str] Merchant reason","title":"Parameters"},{"location":"reference/#pypaystack2.api.refunds.Refund.create--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/refunds.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def create ( self , transaction : str , amount : Optional [ int ] = None , currency : Optional [ Currency ] = None , customer_note : Optional [ str ] = None , merchant_note : Optional [ str ] = None , ) -> Response : \"\"\"Initiate a refund on your integration Parameters ---------- transaction: str Transaction reference or id amount: Optional[int] Amount ( in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR ) to be refunded to the customer. Amount is optional(defaults to original transaction amount) and cannot be more than the original transaction amount currency: Optional[Currency] Any value from the ``Currency`` enum customer_note: Optional[str] Customer reason merchant_note: Optional[str] Merchant reason Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if amount is not None : amount = validate_amount ( amount ) url = self . _url ( \"/refund\" ) payload = { \"transaction\" : transaction } optional_params = [ ( \"amount\" , amount ), ( \"currency\" , currency ), ( \"customer_note\" , customer_note ), ( \"merchant_note\" , merchant_note ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.refunds.Refund.get_refund","text":"Get details of a refund on your integration.","title":"get_refund()"},{"location":"reference/#pypaystack2.api.refunds.Refund.get_refund--parameters","text":"str Identifier for transaction to be refunded","title":"Parameters"},{"location":"reference/#pypaystack2.api.refunds.Refund.get_refund--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/refunds.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 def get_refund ( self , reference : str ) -> Response : \"\"\"Get details of a refund on your integration. Parameters ---------- reference: str Identifier for transaction to be refunded Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/refund/ { reference } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.refunds.Refund.get_refunds","text":"Fetch refunds available on your integration.","title":"get_refunds()"},{"location":"reference/#pypaystack2.api.refunds.Refund.get_refunds--parameters","text":"str Identifier for transaction to be refunded Currency Any value from the Currency enum int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. int Specify exactly what refund you want to page. If not specify we use a default value of 1. Optional[str] A timestamp from which to start listing refund e.g. 2016-09-21 Optional[str] A timestamp at which to stop listing refund e.g. 2016-09-21","title":"Parameters"},{"location":"reference/#pypaystack2.api.refunds.Refund.get_refunds--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/refunds.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def get_refunds ( self , reference : str , currency : Currency , pagination = 50 , page = 1 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetch refunds available on your integration. Parameters ---------- reference: str Identifier for transaction to be refunded currency: Currency Any value from the ``Currency`` enum pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what refund you want to page. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing refund e.g. 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing refund e.g. 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/refund?perPage= { pagination } \" ) query_params = [ ( \"reference\" , reference ), ( \"currency\" , currency ), ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.settlements.Settlement","text":"Bases: BaseAPI Provides a wrapper for paystack Settlement API The Settlements API allows you gain insights into payouts made by Paystack to your bank account. https://paystack.com/docs/api/#settlement Source code in pypaystack2/api/settlements.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 class Settlement ( BaseAPI ): \"\"\"Provides a wrapper for paystack Settlement API The Settlements API allows you gain insights into payouts made by Paystack to your bank account. https://paystack.com/docs/api/#settlement \"\"\" def get_settlements ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , subaccount : Optional [ str ] = None , ) -> Response : \"\"\"Fetch settlements made to your settlement accounts. page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing settlements e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing settlements e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 subaccount: Optional[str] Provide a subaccount ID to export only settlements for that subaccount. Set to ``none`` to export only transactions for the account. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/settlement?perPage= { pagination } \" ) query_params = [ ( \"subaccount\" , subaccount ), ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_settlement_transactions ( self , id : int , pagination = 50 , page = 1 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Get the transactions that make up a particular settlement Parameters ---------- id: int The settlement ID in which you want to fetch its transactions pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing settlement transactions e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing settlement transactions e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/settlement/ { id } /transactions?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Settlement"},{"location":"reference/#pypaystack2.api.settlements.Settlement.get_settlement_transactions","text":"Get the transactions that make up a particular settlement","title":"get_settlement_transactions()"},{"location":"reference/#pypaystack2.api.settlements.Settlement.get_settlement_transactions--parameters","text":"int The settlement ID in which you want to fetch its transactions int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. Optional[str] A timestamp from which to start listing settlement transactions e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing settlement transactions e.g. 2016-09-24T00:00:05.000Z, 2016-09-21","title":"Parameters"},{"location":"reference/#pypaystack2.api.settlements.Settlement.get_settlement_transactions--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/settlements.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def get_settlement_transactions ( self , id : int , pagination = 50 , page = 1 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Get the transactions that make up a particular settlement Parameters ---------- id: int The settlement ID in which you want to fetch its transactions pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing settlement transactions e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing settlement transactions e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/settlement/ { id } /transactions?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.settlements.Settlement.get_settlements","text":"Fetch settlements made to your settlement accounts. int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Optional[str] A timestamp from which to start listing settlements e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing settlements e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] Provide a subaccount ID to export only settlements for that subaccount. Set to none to export only transactions for the account.","title":"get_settlements()"},{"location":"reference/#pypaystack2.api.settlements.Settlement.get_settlements--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/settlements.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def get_settlements ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , subaccount : Optional [ str ] = None , ) -> Response : \"\"\"Fetch settlements made to your settlement accounts. page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing settlements e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing settlements e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 subaccount: Optional[str] Provide a subaccount ID to export only settlements for that subaccount. Set to ``none`` to export only transactions for the account. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/settlement?perPage= { pagination } \" ) query_params = [ ( \"subaccount\" , subaccount ), ( \"page\" , page ), ( \"start_date\" , start_date ), ( \"end_date\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.splits.Split","text":"Bases: BaseAPI Provides a wrapper for paystack Transaction Splits API The Transaction Splits API enables merchants split the settlement for a transaction across their payout account, and one or more Subaccounts. https://paystack.com/docs/api/#split Source code in pypaystack2/api/splits.pyclass Split ( BaseAPI ): \"\"\"Provides a wrapper for paystack Transaction Splits API The Transaction Splits API enables merchants split the settlement for a transaction across their payout account, and one or more Subaccounts. https://paystack.com/docs/api/#split \"\"\" def create ( self , name : str , type : SplitType , currency : Currency , subaccounts : list [ dict [ str , Any ]], bearer_type : Bearer , bearer_subaccount : str , ) -> Response : \"\"\"Create a split payment on your integration Parameters ---------- name: str Name of the transaction split type: SplitType The type of transaction split you want to create. Any value from the ``SplitType`` enum currency: Currency Any value from the ``Currency`` enum subaccounts: list[dict[str,Any]] A list of dictionaries containing subaccount code and number of shares: ``[{subaccount: 'ACT_xxxxxxxxxx', share: xxx},{...}]`` bearer_type: Bearer Any value from the ``Bearer`` enum bearer_subaccount: str Subaccount code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/split\" ) payload = { \"name\" : name , \"type\" : type , \"currency\" : currency , \"subaccounts\" : subaccounts , \"bearer_type\" : bearer_type , \"bearer_subaccount\" : bearer_subaccount , } return self . _handle_request ( \"POST\" , url , payload ) def get_splits ( self , name : str , sort_by : Optional [ str ], page : Optional [ int ], start_date : Optional [ str ], end_date : Optional [ str ], active : bool = True , pagination = 50 , ) -> Response : \"\"\"Get/search for the transaction splits available on your integration. Parameters ---------- name: str The name of the split sort_by: Optional[str] Sort by name, defaults to createdAt date page: Optional[int] Page number to view. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing splits e.g. 2019-09-24T00:00:05.000Z, 2019-09-21 end_date: Optional[str] A timestamp at which to stop listing splits e.g. 2019-09-24T00:00:05.000Z, 2019-09-21 active: bool pagination: int Number of splits per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/split?perPage= { pagination } \" ) query_params = [ ( \"name\" , name ), ( \"sort_by\" , sort_by ), ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"active\" , active ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_split ( self , id : str ) -> Response : \"\"\"Get details of a split on your integration. Parameters ---------- id: str The id of the split Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/split/ { id } /\" ) return self . _handle_request ( \"GET\" , url ) def update ( self , id : str , name : str , active : bool , bearer_type : Optional [ Bearer ], bearer_subaccount : Optional [ str ], ) -> Response : \"\"\"Update a transaction split details on your integration Parameters ---------- id: str Split ID name: str Name of the transaction split active: bool bearer_type: Optional[Bearer] Any value from the Bearer enum bearer_subaccount: Optional[str] Subaccount code of a subaccount in the split group. This should be specified only if the bearer_type is ``Bearer.subaccount`` Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if bearer_subaccount : if bearer_type != Bearer . SUBACCOUNT : raise InvalidDataError ( \"`bearer_subaccount` can only have a value if `bearer_type` is `Bearer.SUBACCOUNT`\" ) payload = { \"name\" : name , \"active\" : active , } optional_params = [ ( \"bearer_type\" , bearer_type ), ( \"bearer_subaccount\" , bearer_subaccount ), ] payload = add_to_payload ( optional_params , payload ) url = self . _url ( f \"/split/ { id } /\" ) return self . _handle_request ( \"PUT\" , url , payload ) def add_or_update ( self , id : str , subaccount : str , share : int ) -> Response : \"\"\" Add a Subaccount to a Transaction Split, or update the share of an existing Subaccount in a Transaction Split Parameters ---------- id: str Split Id subaccount: str This is the subaccount code share: int This is the transaction share for the subaccount Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" share = validate_amount ( share ) payload = { \"subaccount\" : subaccount , \"share\" : share } url = self . _url ( f \"/split/ { id } /subaccount/add\" ) return self . _handle_request ( \"POST\" , url , payload ) def remove ( self , id : str , subaccount : str ): \"\"\"Remove a subaccount from a transaction split Parameters ---------- id: str Split Id subaccount: str This is the sub account code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"subaccount\" : subaccount } url = self . _url ( f \"/split/ { id } /subaccount/remove\" ) return self . _handle_request ( \"POST\" , url , payload )","title":"Split"},{"location":"reference/#pypaystack2.api.splits.Split.add_or_update","text":"Add a Subaccount to a Transaction Split, or update the share of an existing Subaccount in a Transaction Split","title":"add_or_update()"},{"location":"reference/#pypaystack2.api.splits.Split.add_or_update--parameters","text":"id: str Split Id subaccount: str This is the subaccount code share: int This is the transaction share for the subaccount","title":"Parameters"},{"location":"reference/#pypaystack2.api.splits.Split.add_or_update--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/splits.py 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 def add_or_update ( self , id : str , subaccount : str , share : int ) -> Response : \"\"\" Add a Subaccount to a Transaction Split, or update the share of an existing Subaccount in a Transaction Split Parameters ---------- id: str Split Id subaccount: str This is the subaccount code share: int This is the transaction share for the subaccount Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" share = validate_amount ( share ) payload = { \"subaccount\" : subaccount , \"share\" : share } url = self . _url ( f \"/split/ { id } /subaccount/add\" ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.splits.Split.create","text":"Create a split payment on your integration","title":"create()"},{"location":"reference/#pypaystack2.api.splits.Split.create--parameters","text":"str Name of the transaction split SplitType The type of transaction split you want to create. Any value from the SplitType enum Currency Any value from the Currency enum list[dict[str,Any]] A list of dictionaries containing subaccount code and number of shares: [{subaccount: 'ACT_xxxxxxxxxx', share: xxx},{...}] Bearer Any value from the Bearer enum str Subaccount code","title":"Parameters"},{"location":"reference/#pypaystack2.api.splits.Split.create--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/splits.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 def create ( self , name : str , type : SplitType , currency : Currency , subaccounts : list [ dict [ str , Any ]], bearer_type : Bearer , bearer_subaccount : str , ) -> Response : \"\"\"Create a split payment on your integration Parameters ---------- name: str Name of the transaction split type: SplitType The type of transaction split you want to create. Any value from the ``SplitType`` enum currency: Currency Any value from the ``Currency`` enum subaccounts: list[dict[str,Any]] A list of dictionaries containing subaccount code and number of shares: ``[{subaccount: 'ACT_xxxxxxxxxx', share: xxx},{...}]`` bearer_type: Bearer Any value from the ``Bearer`` enum bearer_subaccount: str Subaccount code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/split\" ) payload = { \"name\" : name , \"type\" : type , \"currency\" : currency , \"subaccounts\" : subaccounts , \"bearer_type\" : bearer_type , \"bearer_subaccount\" : bearer_subaccount , } return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.splits.Split.get_split","text":"Get details of a split on your integration.","title":"get_split()"},{"location":"reference/#pypaystack2.api.splits.Split.get_split--parameters","text":"str The id of the split","title":"Parameters"},{"location":"reference/#pypaystack2.api.splits.Split.get_split--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/splits.py 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 def get_split ( self , id : str ) -> Response : \"\"\"Get details of a split on your integration. Parameters ---------- id: str The id of the split Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/split/ { id } /\" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.splits.Split.get_splits","text":"Get/search for the transaction splits available on your integration.","title":"get_splits()"},{"location":"reference/#pypaystack2.api.splits.Split.get_splits--parameters","text":"str The name of the split Optional[str] Sort by name, defaults to createdAt date Optional[int] Page number to view. If not specify we use a default value of 1. Optional[str] A timestamp from which to start listing splits e.g. 2019-09-24T00:00:05.000Z, 2019-09-21 Optional[str] A timestamp at which to stop listing splits e.g. 2019-09-24T00:00:05.000Z, 2019-09-21 active: bool int Number of splits per page. If not specify we use a default value of 50.","title":"Parameters"},{"location":"reference/#pypaystack2.api.splits.Split.get_splits--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/splits.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def get_splits ( self , name : str , sort_by : Optional [ str ], page : Optional [ int ], start_date : Optional [ str ], end_date : Optional [ str ], active : bool = True , pagination = 50 , ) -> Response : \"\"\"Get/search for the transaction splits available on your integration. Parameters ---------- name: str The name of the split sort_by: Optional[str] Sort by name, defaults to createdAt date page: Optional[int] Page number to view. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing splits e.g. 2019-09-24T00:00:05.000Z, 2019-09-21 end_date: Optional[str] A timestamp at which to stop listing splits e.g. 2019-09-24T00:00:05.000Z, 2019-09-21 active: bool pagination: int Number of splits per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/split?perPage= { pagination } \" ) query_params = [ ( \"name\" , name ), ( \"sort_by\" , sort_by ), ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"active\" , active ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.splits.Split.remove","text":"Remove a subaccount from a transaction split","title":"remove()"},{"location":"reference/#pypaystack2.api.splits.Split.remove--parameters","text":"str Split Id str This is the sub account code","title":"Parameters"},{"location":"reference/#pypaystack2.api.splits.Split.remove--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/splits.py 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 def remove ( self , id : str , subaccount : str ): \"\"\"Remove a subaccount from a transaction split Parameters ---------- id: str Split Id subaccount: str This is the sub account code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"subaccount\" : subaccount } url = self . _url ( f \"/split/ { id } /subaccount/remove\" ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.splits.Split.update","text":"Update a transaction split details on your integration","title":"update()"},{"location":"reference/#pypaystack2.api.splits.Split.update--parameters","text":"str Split ID str Name of the transaction split active: bool Optional[Bearer] Any value from the Bearer enum Optional[str] Subaccount code of a subaccount in the split group. This should be specified only if the bearer_type is Bearer.subaccount","title":"Parameters"},{"location":"reference/#pypaystack2.api.splits.Split.update--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/splits.py 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 def update ( self , id : str , name : str , active : bool , bearer_type : Optional [ Bearer ], bearer_subaccount : Optional [ str ], ) -> Response : \"\"\"Update a transaction split details on your integration Parameters ---------- id: str Split ID name: str Name of the transaction split active: bool bearer_type: Optional[Bearer] Any value from the Bearer enum bearer_subaccount: Optional[str] Subaccount code of a subaccount in the split group. This should be specified only if the bearer_type is ``Bearer.subaccount`` Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if bearer_subaccount : if bearer_type != Bearer . SUBACCOUNT : raise InvalidDataError ( \"`bearer_subaccount` can only have a value if `bearer_type` is `Bearer.SUBACCOUNT`\" ) payload = { \"name\" : name , \"active\" : active , } optional_params = [ ( \"bearer_type\" , bearer_type ), ( \"bearer_subaccount\" , bearer_subaccount ), ] payload = add_to_payload ( optional_params , payload ) url = self . _url ( f \"/split/ { id } /\" ) return self . _handle_request ( \"PUT\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.subaccounts.SubAccount","text":"Bases: BaseAPI Provides a wrapper for paystack Subaccounts API The Subaccounts API allows you to create and manage subaccounts on your integration. Subaccounts can be used to split payment between two accounts (your main account and a sub account). https://paystack.com/docs/api/#subaccount Source code in pypaystack2/api/subaccounts.pyclass SubAccount ( BaseAPI ): \"\"\"Provides a wrapper for paystack Subaccounts API The Subaccounts API allows you to create and manage subaccounts on your integration. Subaccounts can be used to split payment between two accounts (your main account and a sub account). https://paystack.com/docs/api/#subaccount \"\"\" def create ( self , business_name : str , settlement_bank : str , account_number : str , percentage_charge : float , description : str , primary_contact_email : Optional [ str ] = None , primary_contact_name : Optional [ str ] = None , primary_contact_phone : Optional [ str ] = None , metadata : Optional [ dict [ str , Any ]] = None , ) -> Response : \"\"\"Create a subacount on your integration. Parameters ---------- business_name: str Name of business for subaccount settlement_bank: str Bank Code for the bank. You can get the list of Bank Codes by calling the ``.get_banks`` method from the Miscellaneous API wrapper account_number: str Bank Account Number percentage_charge: float The default percentage charged when receiving on behalf of this subaccount description: str A description for this subaccount primary_contact_email: Optional[str] A contact email for the subaccount primary_contact_name: Optional[str] A name for the contact person for this subaccount primary_contact_phone: Optional[str] A phone number to call for this subaccount metadata: Optional[list[dict[str,Any]]] Add a custom_fields attribute which has a list of dictionaries if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: ``{\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]}`` Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/subaccount\" ) payload = { \"business_name\" : business_name , \"settlement_bank\" : settlement_bank , \"account_number\" : account_number , \"percentage_charge\" : percentage_charge , \"description\" : description , } optional_params = [ ( \"primary_contact_email\" , primary_contact_email ), ( \"primary_contact_name\" , primary_contact_name ), ( \"primary_contact_phone\" , primary_contact_phone ), ( \"metadata\" , metadata ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_subaccounts ( self , start_date : str , end_date : str , page = 1 , pagination = 50 ) -> Response : \"\"\"Fetch subaccounts available on your integration. Parameters ---------- start_date: str A timestamp from which to start listing subaccounts e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: str A timestamp at which to stop listing subaccounts e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subaccount?perPage= { pagination } \" ) query_params = [ ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"page\" , page ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_subaccount ( self , id_or_code : str ) -> Response : \"\"\"Get details of a subaccount on your integration. Parameters ---------- id_or_code: str The subaccount ``ID`` or ``code`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subaccount/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) def update ( self , id_or_code : str , business_name : str , settlement_bank : str , account_number : Optional [ str ] = None , active : Optional [ bool ] = None , percentage_charge : Optional [ float ] = None , description : Optional [ str ] = None , primary_contact_email : Optional [ str ] = None , primary_contact_name : Optional [ str ] = None , primary_contact_phone : Optional [ str ] = None , settlement_schedule : Optional [ Schedule ] = None , metadata : Optional [ dict [ str , Any ]] = None , ) -> Response : \"\"\"Update a subaccount details on your integration. id_or_code: str Subaccount's ID or code business_name: str Name of business for subaccount settlement_bank: str Bank Code for the bank. You can get the list of Bank Codes by calling the ``.get_banks`` method from the Miscellaneous API wrapper account_number: Optional[str] Bank Account Number active: Optional[bool] Activate or deactivate a subaccount. percentage_charge: Optional[float] The default percentage charged when receiving on behalf of this subaccount description: Optional[str] A description for this subaccount primary_contact_email: Optional[str] A contact email for the subaccount primary_contact_name: Optional[str] A name for the contact person for this subaccount primary_contact_phone: Optional[str] A phone number to call for this subaccount settlement_schedule: Optional[Schedule] ``Schedule.AUTO`` means payout is T+1 and manual means payout to the subaccount should only be made when requested. Defaults to ``Schedule.AUTO`` metadata: Optional[dict[str,Any]] Add a custom_fields attribute which has a list of dictionaries if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: ``{\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]}`` Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"id_or_code\" : id_or_code , \"business_name\" : business_name , \"settlement_bank\" : settlement_bank , } optional_params = [ ( \"account_number\" , account_number ), ( \"active\" , active ), ( \"percentage_charge\" , percentage_charge ), ( \"description\" , description ), ( \"primary_contact_email\" , primary_contact_email ), ( \"primary_contact_name\" , primary_contact_name ), ( \"primary_contact_phone\" , primary_contact_phone ), ( \"settlement_schedule\" , settlement_schedule ), ( \"metadata\" , metadata ), ] payload = add_to_payload ( optional_params , payload ) url = self . _url ( f \"/subaccount/ { id_or_code } \" ) return self . _handle_request ( \"PUT\" , url , payload )","title":"SubAccount"},{"location":"reference/#pypaystack2.api.subaccounts.SubAccount.create","text":"Create a subacount on your integration.","title":"create()"},{"location":"reference/#pypaystack2.api.subaccounts.SubAccount.create--parameters","text":"str Name of business for subaccount str Bank Code for the bank. You can get the list of Bank Codes by calling the .get_banks method from the Miscellaneous API wrapper str Bank Account Number float The default percentage charged when receiving on behalf of this subaccount str A description for this subaccount Optional[str] A contact email for the subaccount Optional[str] A name for the contact person for this subaccount Optional[str] A phone number to call for this subaccount Optional[list[dict[str,Any]]] Add a custom_fields attribute which has a list of dictionaries if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: {\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]}","title":"Parameters"},{"location":"reference/#pypaystack2.api.subaccounts.SubAccount.create--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subaccounts.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def create ( self , business_name : str , settlement_bank : str , account_number : str , percentage_charge : float , description : str , primary_contact_email : Optional [ str ] = None , primary_contact_name : Optional [ str ] = None , primary_contact_phone : Optional [ str ] = None , metadata : Optional [ dict [ str , Any ]] = None , ) -> Response : \"\"\"Create a subacount on your integration. Parameters ---------- business_name: str Name of business for subaccount settlement_bank: str Bank Code for the bank. You can get the list of Bank Codes by calling the ``.get_banks`` method from the Miscellaneous API wrapper account_number: str Bank Account Number percentage_charge: float The default percentage charged when receiving on behalf of this subaccount description: str A description for this subaccount primary_contact_email: Optional[str] A contact email for the subaccount primary_contact_name: Optional[str] A name for the contact person for this subaccount primary_contact_phone: Optional[str] A phone number to call for this subaccount metadata: Optional[list[dict[str,Any]]] Add a custom_fields attribute which has a list of dictionaries if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: ``{\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]}`` Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/subaccount\" ) payload = { \"business_name\" : business_name , \"settlement_bank\" : settlement_bank , \"account_number\" : account_number , \"percentage_charge\" : percentage_charge , \"description\" : description , } optional_params = [ ( \"primary_contact_email\" , primary_contact_email ), ( \"primary_contact_name\" , primary_contact_name ), ( \"primary_contact_phone\" , primary_contact_phone ), ( \"metadata\" , metadata ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.subaccounts.SubAccount.get_subaccount","text":"Get details of a subaccount on your integration.","title":"get_subaccount()"},{"location":"reference/#pypaystack2.api.subaccounts.SubAccount.get_subaccount--parameters","text":"str The subaccount ID or code you want to fetch","title":"Parameters"},{"location":"reference/#pypaystack2.api.subaccounts.SubAccount.get_subaccount--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subaccounts.py 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def get_subaccount ( self , id_or_code : str ) -> Response : \"\"\"Get details of a subaccount on your integration. Parameters ---------- id_or_code: str The subaccount ``ID`` or ``code`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subaccount/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.subaccounts.SubAccount.get_subaccounts","text":"Fetch subaccounts available on your integration.","title":"get_subaccounts()"},{"location":"reference/#pypaystack2.api.subaccounts.SubAccount.get_subaccounts--parameters","text":"str A timestamp from which to start listing subaccounts e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 str A timestamp at which to stop listing subaccounts e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. int Specify how many records you want to retrieve per page. If not specify we use a default value of 50.","title":"Parameters"},{"location":"reference/#pypaystack2.api.subaccounts.SubAccount.get_subaccounts--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subaccounts.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def get_subaccounts ( self , start_date : str , end_date : str , page = 1 , pagination = 50 ) -> Response : \"\"\"Fetch subaccounts available on your integration. Parameters ---------- start_date: str A timestamp from which to start listing subaccounts e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: str A timestamp at which to stop listing subaccounts e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subaccount?perPage= { pagination } \" ) query_params = [ ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"page\" , page ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.subaccounts.SubAccount.update","text":"Update a subaccount details on your integration. str Subaccount's ID or code str Name of business for subaccount str Bank Code for the bank. You can get the list of Bank Codes by calling the .get_banks method from the Miscellaneous API wrapper Optional[str] Bank Account Number Optional[bool] Activate or deactivate a subaccount. Optional[float] The default percentage charged when receiving on behalf of this subaccount Optional[str] A description for this subaccount Optional[str] A contact email for the subaccount Optional[str] A name for the contact person for this subaccount Optional[str] A phone number to call for this subaccount Optional[Schedule] Schedule.AUTO means payout is T+1 and manual means payout to the subaccount should only be made when requested. Defaults to Schedule.AUTO Optional[dict[str,Any]] Add a custom_fields attribute which has a list of dictionaries if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: {\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]}","title":"update()"},{"location":"reference/#pypaystack2.api.subaccounts.SubAccount.update--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subaccounts.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 def update ( self , id_or_code : str , business_name : str , settlement_bank : str , account_number : Optional [ str ] = None , active : Optional [ bool ] = None , percentage_charge : Optional [ float ] = None , description : Optional [ str ] = None , primary_contact_email : Optional [ str ] = None , primary_contact_name : Optional [ str ] = None , primary_contact_phone : Optional [ str ] = None , settlement_schedule : Optional [ Schedule ] = None , metadata : Optional [ dict [ str , Any ]] = None , ) -> Response : \"\"\"Update a subaccount details on your integration. id_or_code: str Subaccount's ID or code business_name: str Name of business for subaccount settlement_bank: str Bank Code for the bank. You can get the list of Bank Codes by calling the ``.get_banks`` method from the Miscellaneous API wrapper account_number: Optional[str] Bank Account Number active: Optional[bool] Activate or deactivate a subaccount. percentage_charge: Optional[float] The default percentage charged when receiving on behalf of this subaccount description: Optional[str] A description for this subaccount primary_contact_email: Optional[str] A contact email for the subaccount primary_contact_name: Optional[str] A name for the contact person for this subaccount primary_contact_phone: Optional[str] A phone number to call for this subaccount settlement_schedule: Optional[Schedule] ``Schedule.AUTO`` means payout is T+1 and manual means payout to the subaccount should only be made when requested. Defaults to ``Schedule.AUTO`` metadata: Optional[dict[str,Any]] Add a custom_fields attribute which has a list of dictionaries if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: ``{\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]}`` Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"id_or_code\" : id_or_code , \"business_name\" : business_name , \"settlement_bank\" : settlement_bank , } optional_params = [ ( \"account_number\" , account_number ), ( \"active\" , active ), ( \"percentage_charge\" , percentage_charge ), ( \"description\" , description ), ( \"primary_contact_email\" , primary_contact_email ), ( \"primary_contact_name\" , primary_contact_name ), ( \"primary_contact_phone\" , primary_contact_phone ), ( \"settlement_schedule\" , settlement_schedule ), ( \"metadata\" , metadata ), ] payload = add_to_payload ( optional_params , payload ) url = self . _url ( f \"/subaccount/ { id_or_code } \" ) return self . _handle_request ( \"PUT\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription","text":"Bases: BaseAPI Provides a wrapper for paystack Subscriptions API The Subscriptions API allows you to create and manage recurring payment on your integration. https://paystack.com/docs/api/#subscription Source code in pypaystack2/api/subscriptions.pyclass Subscription ( BaseAPI ): \"\"\"Provides a wrapper for paystack Subscriptions API The Subscriptions API allows you to create and manage recurring payment on your integration. https://paystack.com/docs/api/#subscription \"\"\" def create ( self , customer : str , plan : str , authorization : str , start_date : Optional [ str ] = None , ) -> Response : \"\"\"Create a subscription on your integration Parameters ---------- customer: str Customer's email address or customer code plan: str Plan code authorization: str If customer has multiple authorizations, you can set the desired authorization you wish to use for this subscription here. If this is not supplied, the customer's most recent authorization would be used start_date: Optional[str] Set the date for the first debit. (ISO 8601 format) e.g. 2017-05-16T00:30:13+01:00 Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Email Token paystack creates an email token on each subscription to allow customers cancel their subscriptions from within the invoices sent to their mailboxes. Since they are not authorized, the email tokens are what we use to authenticate the requests over the API. \"\"\" url = self . _url ( \"/subscription\" ) payload = { \"customer\" : customer , \"plan\" : plan , \"authorization\" : authorization } optional_params = [ ( \"start_date\" , start_date ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_subscriptions ( self , page = 1 , pagination = 50 , customer : Optional [ int ] = None , plan : Optional [ int ] = None , ) -> Response : \"\"\"Fetch subscriptions available on your integration. Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. customer: Optional[int] Filter by Customer ID plan: Optional[int] Filter by Plan ID Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/plan/?perPage=\" + str ( pagination )) query_params = [ ( \"page\" , page ), ( \"customer\" , customer ), ( \"plan\" , plan ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_subscription ( self , id_or_code : str ) -> Response : \"\"\"Fetch details of a subscription on your integration. Parameters ---------- id_or_code: str The subscription ``ID`` or ``code`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subscription/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) def enable ( self , code : str , token : str ) -> Response : \"\"\"Enable a subscription on your integration Parameters ---------- code: str Subscription code token: str Email token Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/subscription/enable\" ) payload = { \"code\" : code , \"token\" : token , } return self . _handle_request ( \"POST\" , url , payload ) def disable ( self , code : str , token : str ) -> Response : \"\"\"Disable a subscription on your integration Parameters ---------- code: str Subscription code token: str Email token Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/subscription/disable\" ) payload = { \"code\" : code , \"token\" : token , } return self . _handle_request ( \"POST\" , url , payload ) def get_update_link ( self , code : str ) -> Response : \"\"\"Generate a link for updating the card on a subscription Parameters ---------- code: str Subscription code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subscription/ { code } /manage/link/\" ) return self . _handle_request ( \"GET\" , url ) def send_update_link ( self , code : str ) -> Response : \"\"\"Email a customer a link for updating the card on their subscription Parameters ---------- code: str Subscription code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subscription/ { code } /manage/email/\" ) payload = { \"code\" : \"code\" } return self . _handle_request ( \"POST\" , url , payload )","title":"Subscription"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.create","text":"Create a subscription on your integration","title":"create()"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.create--parameters","text":"str Customer's email address or customer code str Plan code str If customer has multiple authorizations, you can set the desired authorization you wish to use for this subscription here. If this is not supplied, the customer's most recent authorization would be used Optional[str] Set the date for the first debit. (ISO 8601 format) e.g. 2017-05-16T00:30:13+01:00","title":"Parameters"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.create--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.create--note","text":"Email Token paystack creates an email token on each subscription to allow customers cancel their subscriptions from within the invoices sent to their mailboxes. Since they are not authorized, the email tokens are what we use to authenticate the requests over the API. Source code in pypaystack2/api/subscriptions.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def create ( self , customer : str , plan : str , authorization : str , start_date : Optional [ str ] = None , ) -> Response : \"\"\"Create a subscription on your integration Parameters ---------- customer: str Customer's email address or customer code plan: str Plan code authorization: str If customer has multiple authorizations, you can set the desired authorization you wish to use for this subscription here. If this is not supplied, the customer's most recent authorization would be used start_date: Optional[str] Set the date for the first debit. (ISO 8601 format) e.g. 2017-05-16T00:30:13+01:00 Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Email Token paystack creates an email token on each subscription to allow customers cancel their subscriptions from within the invoices sent to their mailboxes. Since they are not authorized, the email tokens are what we use to authenticate the requests over the API. \"\"\" url = self . _url ( \"/subscription\" ) payload = { \"customer\" : customer , \"plan\" : plan , \"authorization\" : authorization } optional_params = [ ( \"start_date\" , start_date ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Note"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.disable","text":"Disable a subscription on your integration","title":"disable()"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.disable--parameters","text":"str Subscription code str Email token","title":"Parameters"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.disable--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subscriptions.py 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 def disable ( self , code : str , token : str ) -> Response : \"\"\"Disable a subscription on your integration Parameters ---------- code: str Subscription code token: str Email token Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/subscription/disable\" ) payload = { \"code\" : code , \"token\" : token , } return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.enable","text":"Enable a subscription on your integration","title":"enable()"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.enable--parameters","text":"str Subscription code str Email token","title":"Parameters"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.enable--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subscriptions.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 def enable ( self , code : str , token : str ) -> Response : \"\"\"Enable a subscription on your integration Parameters ---------- code: str Subscription code token: str Email token Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/subscription/enable\" ) payload = { \"code\" : code , \"token\" : token , } return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.get_subscription","text":"Fetch details of a subscription on your integration.","title":"get_subscription()"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.get_subscription--parameters","text":"str The subscription ID or code you want to fetch","title":"Parameters"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.get_subscription--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subscriptions.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 def get_subscription ( self , id_or_code : str ) -> Response : \"\"\"Fetch details of a subscription on your integration. Parameters ---------- id_or_code: str The subscription ``ID`` or ``code`` you want to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subscription/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.get_subscriptions","text":"Fetch subscriptions available on your integration.","title":"get_subscriptions()"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.get_subscriptions--parameters","text":"int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Optional[int] Filter by Customer ID Optional[int] Filter by Plan ID","title":"Parameters"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.get_subscriptions--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subscriptions.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def get_subscriptions ( self , page = 1 , pagination = 50 , customer : Optional [ int ] = None , plan : Optional [ int ] = None , ) -> Response : \"\"\"Fetch subscriptions available on your integration. Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. customer: Optional[int] Filter by Customer ID plan: Optional[int] Filter by Plan ID Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/plan/?perPage=\" + str ( pagination )) query_params = [ ( \"page\" , page ), ( \"customer\" , customer ), ( \"plan\" , plan ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.get_update_link","text":"Generate a link for updating the card on a subscription","title":"get_update_link()"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.get_update_link--parameters","text":"str Subscription code","title":"Parameters"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.get_update_link--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subscriptions.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 def get_update_link ( self , code : str ) -> Response : \"\"\"Generate a link for updating the card on a subscription Parameters ---------- code: str Subscription code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subscription/ { code } /manage/link/\" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.send_update_link","text":"Email a customer a link for updating the card on their subscription","title":"send_update_link()"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.send_update_link--parameters","text":"str Subscription code","title":"Parameters"},{"location":"reference/#pypaystack2.api.subscriptions.Subscription.send_update_link--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/subscriptions.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 def send_update_link ( self , code : str ) -> Response : \"\"\"Email a customer a link for updating the card on their subscription Parameters ---------- code: str Subscription code Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/subscription/ { code } /manage/email/\" ) payload = { \"code\" : \"code\" } return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.transactions.Transaction","text":"Bases: BaseAPI Provides a wrapper for paystack Transactions API The Transactions API allows you create and manage payments on your integration. https://paystack.com/docs/api/#transaction Source code in pypaystack2/api/transactions.pyclass Transaction ( BaseAPI ): \"\"\"Provides a wrapper for paystack Transactions API The Transactions API allows you create and manage payments on your integration. https://paystack.com/docs/api/#transaction \"\"\" def initialize ( self , amount : int , email : str , currency : Optional [ Currency ] = None , reference : Optional [ str ] = None , callback_url : Optional [ str ] = None , plan : Optional [ str ] = None , invoice_limit : Optional [ int ] = None , metadata : Optional [ dict [ str , Any ]] = None , channels : Optional [ list [ Channel ]] = None , split_code : Optional [ str ] = None , subaccount : Optional [ str ] = None , transfer_charge : Optional [ int ] = None , bearer : Optional [ Bearer ] = None , ) -> Response : \"\"\"Initialize a transaction from your backend Parameters ---------- amount: int Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` email: str Customer's email address currency: Optional[Currency] Any value from the ``Currency`` enum. reference: Optional[str] Unique transaction reference. Only ``-, ., =`` and alphanumeric characters allowed. callback_url: Optional[str] Fully qualified url, e.g. ``https://example.com/`` . Use this to override the callback url provided on the dashboard for this transaction plan: Optional[str] If transaction is to create a subscription to a predefined plan, provide plan code here. This would invalidate the value provided in ``amount`` invoice_limit: Optional[int] Number of times to charge customer during subscription to plan metadata: Optional[dict[str,Any]] A dictionary of additional info. check out this link for more information. https://paystack.com/docs/payments/metadata channels: Optional[list[Channel]] A list of ``Channel`` enum values to control what channels you want to make available to the user to make a payment with split_code: Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w subaccount: Optional[str] The code for the subaccount that owns the payment. e.g. ACCT_8f4s1eq7ml6rlzj transfer_charge: Optional[int] An amount used to override the split configuration for a single split payment. If set, the amount specified goes to the main account regardless of the split configuration. bearer: Optional[Bearer] Any value from the ``Bearer`` enum. Who bears Paystack charges? Returns ------- Response A named tuple containing the response gotten from paystack's server. Raises ------ InvalidDataError When email is not provided. \"\"\" amount = validate_amount ( amount ) if not email : raise InvalidDataError ( \"Customer's Email is required for initialization\" ) url = self . _url ( \"/transaction/initialize\" ) payload = { \"email\" : email , \"amount\" : amount , } optional_params = [ ( \"currency\" , currency ), ( \"reference\" , reference ), ( \"callback_url\" , callback_url ), ( \"plan\" , plan ), ( \"invoice_limit\" , invoice_limit ), ( \"metadata\" , metadata ), ( \"channels\" , channels ), ( \"split_code\" , split_code ), ( \"subaccount\" , subaccount ), ( \"transfer_charge\" , transfer_charge ), ( \"bearer\" , bearer ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def verify ( self , reference : str ) -> Response : \"\"\"Confirm the status of a transaction Parameters ---------- reference: str The transaction reference used to intiate the transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" reference = str ( reference ) url = self . _url ( f \"/transaction/verify/ { reference } \" ) return self . _handle_request ( \"GET\" , url ) def get_transactions ( self , customer : Optional [ int ] = None , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , status : Optional [ TransactionStatus ] = None , page : Optional [ int ] = None , amount : Optional [ int ] = None , pagination = 50 , ) -> Response : \"\"\"Fetch transactions carried out on your integration. Parameters ---------- customer: Optional[int] Specify an ID for the customer whose transactions you want to retrieve start_date: Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 status: Optional[TransactionStatus] Filter transactions by status. any value from the ``TransactionStatus`` enum page: Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. amount: Optional[int] Filter transactions by amount. Specify the amount (in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR``) pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transaction/?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"customer\" , customer ), ( \"status\" , status ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"amount\" , amount ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_transaction ( self , id : str ) -> Response : \"\"\"Get details of a transaction carried out on your integration. Parameters ---------- id: str An ID for the transaction to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transaction/ { id } /\" ) return self . _handle_request ( \"GET\" , url ) def charge ( self , amount : int , email : str , auth_code : str , reference : Optional [ str ] = None , currency : Optional [ Currency ] = None , metadata : Optional [ dict [ str , Any ]] = None , channels : Optional [ list [ Channel ]] = None , subaccount : Optional [ str ] = None , transaction_charge : Optional [ int ] = None , bearer : Optional [ Bearer ] = None , queue : bool = False , ) -> Response : \"\"\" All authorizations marked as reusable can be charged with this endpoint whenever you need to receive payments. Parameters ---------- amount: int email: str Customer's email address auth_code: str Valid authorization code to charge reference: Optional[str] Unique transaction reference. Only ``-, ., =`` and alphanumeric characters allowed. currency: Optional[Currency] Currency in which amount should be charged. Any value from the ``Currency`` enum. metadata: Optional[dict[str,Any]] Add a custom_fields attribute which has an array of objects if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: ``{\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]}`` channels: Optional[list[Channel]] A list of ``Channel`` enum values to control what channels you want to make available to the user to make a payment with subaccount: Optional[str] The code for the subaccount that owns the payment. e.g. ACCT_8f4s1eq7ml6rlzj transaction_charge: Optional[int] A flat fee to charge the subaccount for this transaction (in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR). This overrides the split percentage set when the subaccount was created. Ideally, you will need to use this if you are splitting in flat rates (since subaccount creation only allows for percentage split). e.g. 7000 for a 70 naira bearer: Optional[Bearer] Who bears Paystack charges? any value from the ``Beaer`` enum queue: bool If you are making a scheduled charge call, it is a good idea to queue them so the processing system does not get overloaded causing transaction processing errors. Set ``queue=True`` to take advantage of our queued charging. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" amount = validate_amount ( amount ) if not email : raise InvalidDataError ( \"Customer's Email is required to charge\" ) if not auth_code : raise InvalidDataError ( \"Customer's Auth code is required to charge\" ) url = self . _url ( \"/transaction/charge_authorization\" ) payload = { \"authorization_code\" : auth_code , \"email\" : email , \"amount\" : amount , } optional_params = [ ( \"reference\" , reference ), ( \"currency\" , currency ), ( \"metadata\" , metadata ), ( \"channels\" , channels ), ( \"subaccount\" , subaccount ), ( \"transaction_charge\" , transaction_charge ), ( \"bearer\" , bearer ), ( \"queue\" , queue ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def check_authorization ( self , amount : int , email : str , auth_code : str , currency : Optional [ Currency ] = None , ) -> Response : \"\"\"All Mastercard and Visa authorizations can be checked with this endpoint to know if they have funds for the payment you seek. This method should be used when you do not know the exact amount to charge a card when rendering a service. It should be used to check if a card has enough funds based on a maximum range value. It is well suited: - Ride hailing services - Logistics services You shouldn't use this method to check a card for sufficient funds if you are going to charge the user immediately. This is because we hold funds when this endpoint is called which can lead to an insufficient funds error. Parameters ---------- amount: int Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` email: str Customer's email address auth_code: str Valid authorization code to charge currency: Optional[Currency] Currency in which amount should be charged. Any value from the ``Currency`` enum. Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- This feature is only available to businesses in Nigeria. \"\"\" amount = validate_amount ( amount ) if not email : raise InvalidDataError ( \"Customer's Email is required to charge\" ) if not auth_code : raise InvalidDataError ( \"Customer's Auth code is required to charge\" ) url = self . _url ( \"/transaction/check_authorization\" ) payload = { \"authorization_code\" : auth_code , \"email\" : email , \"amount\" : amount , } optional_params = [ ( \"currency\" , currency ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_timeline ( self , id_or_ref : str ) -> Response : \"\"\"View the timeline of a transaction Parameters ---------- id_or_ref: str The ID or the reference of the transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transaction/timeline/ { id_or_ref } \" ) return self . _handle_request ( \"GET\" , url ) def totals ( self , page : Optional [ int ] = None , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , pagination = 50 , ): \"\"\"Total amount received on your account Parameters ---------- page: Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transaction/totals/?perPage= { pagination } \" ) url = url + f \"&page= { page } \" if page else url url = url + f \"&from= { start_date } \" if start_date else url url = url + f \"&page= { end_date } \" if end_date else url return self . _handle_request ( \"GET\" , url ) def export ( self , page : Optional [ int ] = None , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , customer : Optional [ int ] = None , status : Optional [ TransactionStatus ] = None , currency : Optional [ Currency ] = None , amount : Optional [ int ] = None , settled : Optional [ bool ] = None , settlement : Optional [ int ] = None , payment_page : Optional [ int ] = None , pagination = 50 , ) -> Response : \"\"\"Fetch transactions carried out on your integration. Parameters ---------- page: Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 customer: Optional[int] Specify an ID for the customer whose transactions you want to retrieve status: Optional[TransactionStatus] Filter transactions by status. Any value from the ``TransactionStatus`` enum currency: Optional[Currency] Specify the transaction currency to export. Any value from the ``Currency`` enum amount: Optional[int] Filter transactions by amount. Specify the amount, in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` settled: Optional[bool] Set to ``True`` to export only settled transactions. ``False`` for pending transactions. Leave undefined to export all transactions settlement: Optional[int] An ID for the settlement whose transactions we should export payment_page: Optional[int] Specify a payment page's id to export only transactions conducted on said page pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if amount : amount = validate_amount ( amount ) url = self . _url ( f \"/transaction/export/?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"customer\" , customer ), ( \"status\" , status ), ( \"currency\" , currency ), ( \"settled\" , settled ), ( \"settlement\" , settlement ), ( \"payment_page\" , payment_page ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def partial_debit ( self , auth_code : str , currency : Currency , amount : int , email : str , reference : Optional [ str ] = None , at_least : Optional [ int ] = None , ): \"\"\"Retrieve part of a payment from a customer Parameters ---------- auth_code: str Authorization Code currency: Currency Specify the currency you want to debit. Any value from the ``Currency`` enum. amount: int Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` email: str Customer's email address (attached to the authorization code) reference: Optional[str] Unique transaction reference. Only `-, ., =` and alphanumeric characters allowed. at_least: Optional[int] Minimum amount to charge Returns ------- Response A named tuple containing the response gotten from paystack's server. Raises ------ InvalidDataError - When Customer's email is not provided. - When Customer's auth code is not provided. \"\"\" amount = validate_amount ( amount ) if at_least : at_least = validate_amount ( at_least ) if not email : raise InvalidDataError ( \"Customer's Email is required to charge\" ) if not auth_code : raise InvalidDataError ( \"Customer's Auth code is required to charge\" ) url = self . _url ( \"/transaction/partial_debit\" ) payload = { \"authorization_code\" : auth_code , \"currency\" : currency , \"amount\" : amount , \"email\" : email , } optional_params = [( \"reference\" , reference ), ( \"at_least\" , at_least )] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def get_transfer_banks ( self ): # TODO: Deprecate. it's available in Miscellaneous API \"\"\"Fetch transfer banks Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Deprecation Notice it's available in Miscellaneous API wrapper. may be removed in future release \"\"\" url = self . _url ( \"/bank\" ) return self . _handle_request ( \"GET\" , url ) def create_transfer_customer ( self , bank_code : str , account_number : int , account_name : str ) -> Response : # TODO: Deprecate. it's available in TransferReceipt API \"\"\"Create a transfer customer Parameters ---------- bank_code account_number account_name Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ----- Deprecation Notice it's available in TransferReceipt API wrapper. may be removed in future release \"\"\" url = self . _url ( \"/transferrecipient\" ) payload = { \"type\" : \"nuban\" , \"currency\" : \"NGN\" , \"bank_code\" : bank_code , \"account_number\" : account_number , \"name\" : account_name , } return self . _handle_request ( \"POST\" , url , payload ) def transfer ( self , recipient_code : str , amount : int , reason : str , reference : Optional [ str ] = None , ) -> Response : # TODO: Deprecate. it's available in Transfer API \"\"\"Initiates transfer to a customer Parameters ---------- recipient_code amount reason reference Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Deprecation Notice it's available in Transfer API wrapper. may be removed in future release \"\"\" amount = validate_amount ( amount ) url = self . _url ( \"/transfer\" ) payload = { \"amount\" : amount , \"reason\" : reason , \"recipient\" : recipient_code , \"source\" : \"balance\" , \"currency\" : \"NGN\" , } if reference : payload . update ({ \"reference\" : reference }) return self . _handle_request ( \"POST\" , url , payload )","title":"Transaction"},{"location":"reference/#pypaystack2.api.transactions.Transaction.charge","text":"All authorizations marked as reusable can be charged with this endpoint whenever you need to receive payments.","title":"charge()"},{"location":"reference/#pypaystack2.api.transactions.Transaction.charge--parameters","text":"amount: int str Customer's email address str Valid authorization code to charge Optional[str] Unique transaction reference. Only -, ., = and alphanumeric characters allowed. Optional[Currency] Currency in which amount should be charged. Any value from the Currency enum. Optional[dict[str,Any]] Add a custom_fields attribute which has an array of objects if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: {\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]} Optional[list[Channel]] A list of Channel enum values to control what channels you want to make available to the user to make a payment with Optional[str] The code for the subaccount that owns the payment. e.g. ACCT_8f4s1eq7ml6rlzj Optional[int] A flat fee to charge the subaccount for this transaction (in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR). This overrides the split percentage set when the subaccount was created. Ideally, you will need to use this if you are splitting in flat rates (since subaccount creation only allows for percentage split). e.g. 7000 for a 70 naira Optional[Bearer] Who bears Paystack charges? any value from the Beaer enum bool If you are making a scheduled charge call, it is a good idea to queue them so the processing system does not get overloaded causing transaction processing errors. Set queue=True to take advantage of our queued charging.","title":"Parameters"},{"location":"reference/#pypaystack2.api.transactions.Transaction.charge--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transactions.py 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 def charge ( self , amount : int , email : str , auth_code : str , reference : Optional [ str ] = None , currency : Optional [ Currency ] = None , metadata : Optional [ dict [ str , Any ]] = None , channels : Optional [ list [ Channel ]] = None , subaccount : Optional [ str ] = None , transaction_charge : Optional [ int ] = None , bearer : Optional [ Bearer ] = None , queue : bool = False , ) -> Response : \"\"\" All authorizations marked as reusable can be charged with this endpoint whenever you need to receive payments. Parameters ---------- amount: int email: str Customer's email address auth_code: str Valid authorization code to charge reference: Optional[str] Unique transaction reference. Only ``-, ., =`` and alphanumeric characters allowed. currency: Optional[Currency] Currency in which amount should be charged. Any value from the ``Currency`` enum. metadata: Optional[dict[str,Any]] Add a custom_fields attribute which has an array of objects if you would like the fields to be added to your transaction when displayed on the dashboard. Sample: ``{\"custom_fields\":[{\"display_name\":\"Cart ID\", \"variable_name\": \"cart_id\",\"value\": \"8393\"}]}`` channels: Optional[list[Channel]] A list of ``Channel`` enum values to control what channels you want to make available to the user to make a payment with subaccount: Optional[str] The code for the subaccount that owns the payment. e.g. ACCT_8f4s1eq7ml6rlzj transaction_charge: Optional[int] A flat fee to charge the subaccount for this transaction (in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR). This overrides the split percentage set when the subaccount was created. Ideally, you will need to use this if you are splitting in flat rates (since subaccount creation only allows for percentage split). e.g. 7000 for a 70 naira bearer: Optional[Bearer] Who bears Paystack charges? any value from the ``Beaer`` enum queue: bool If you are making a scheduled charge call, it is a good idea to queue them so the processing system does not get overloaded causing transaction processing errors. Set ``queue=True`` to take advantage of our queued charging. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" amount = validate_amount ( amount ) if not email : raise InvalidDataError ( \"Customer's Email is required to charge\" ) if not auth_code : raise InvalidDataError ( \"Customer's Auth code is required to charge\" ) url = self . _url ( \"/transaction/charge_authorization\" ) payload = { \"authorization_code\" : auth_code , \"email\" : email , \"amount\" : amount , } optional_params = [ ( \"reference\" , reference ), ( \"currency\" , currency ), ( \"metadata\" , metadata ), ( \"channels\" , channels ), ( \"subaccount\" , subaccount ), ( \"transaction_charge\" , transaction_charge ), ( \"bearer\" , bearer ), ( \"queue\" , queue ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.transactions.Transaction.check_authorization","text":"All Mastercard and Visa authorizations can be checked with this endpoint to know if they have funds for the payment you seek. This method should be used when you do not know the exact amount to charge a card when rendering a service. It should be used to check if a card has enough funds based on a maximum range value. It is well suited Ride hailing services Logistics services You shouldn't use this method to check a card for sufficient funds if you are going to charge the user immediately. This is because we hold funds when this endpoint is called which can lead to an insufficient funds error.","title":"check_authorization()"},{"location":"reference/#pypaystack2.api.transactions.Transaction.check_authorization--parameters","text":"int Amount should be in kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR str Customer's email address str Valid authorization code to charge Optional[Currency] Currency in which amount should be charged. Any value from the Currency enum.","title":"Parameters"},{"location":"reference/#pypaystack2.api.transactions.Transaction.check_authorization--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.transactions.Transaction.check_authorization--note","text":"This feature is only available to businesses in Nigeria. Source code in pypaystack2/api/transactions.py 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 def check_authorization ( self , amount : int , email : str , auth_code : str , currency : Optional [ Currency ] = None , ) -> Response : \"\"\"All Mastercard and Visa authorizations can be checked with this endpoint to know if they have funds for the payment you seek. This method should be used when you do not know the exact amount to charge a card when rendering a service. It should be used to check if a card has enough funds based on a maximum range value. It is well suited: - Ride hailing services - Logistics services You shouldn't use this method to check a card for sufficient funds if you are going to charge the user immediately. This is because we hold funds when this endpoint is called which can lead to an insufficient funds error. Parameters ---------- amount: int Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` email: str Customer's email address auth_code: str Valid authorization code to charge currency: Optional[Currency] Currency in which amount should be charged. Any value from the ``Currency`` enum. Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- This feature is only available to businesses in Nigeria. \"\"\" amount = validate_amount ( amount ) if not email : raise InvalidDataError ( \"Customer's Email is required to charge\" ) if not auth_code : raise InvalidDataError ( \"Customer's Auth code is required to charge\" ) url = self . _url ( \"/transaction/check_authorization\" ) payload = { \"authorization_code\" : auth_code , \"email\" : email , \"amount\" : amount , } optional_params = [ ( \"currency\" , currency ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Note"},{"location":"reference/#pypaystack2.api.transactions.Transaction.create_transfer_customer","text":"Create a transfer customer","title":"create_transfer_customer()"},{"location":"reference/#pypaystack2.api.transactions.Transaction.create_transfer_customer--parameters","text":"bank_code account_number account_name","title":"Parameters"},{"location":"reference/#pypaystack2.api.transactions.Transaction.create_transfer_customer--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.transactions.Transaction.create_transfer_customer--note","text":"Deprecation Notice it's available in TransferReceipt API wrapper. may be removed in future release Source code in pypaystack2/api/transactions.py 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 def create_transfer_customer ( self , bank_code : str , account_number : int , account_name : str ) -> Response : # TODO: Deprecate. it's available in TransferReceipt API \"\"\"Create a transfer customer Parameters ---------- bank_code account_number account_name Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ----- Deprecation Notice it's available in TransferReceipt API wrapper. may be removed in future release \"\"\" url = self . _url ( \"/transferrecipient\" ) payload = { \"type\" : \"nuban\" , \"currency\" : \"NGN\" , \"bank_code\" : bank_code , \"account_number\" : account_number , \"name\" : account_name , } return self . _handle_request ( \"POST\" , url , payload )","title":"Note"},{"location":"reference/#pypaystack2.api.transactions.Transaction.export","text":"Fetch transactions carried out on your integration.","title":"export()"},{"location":"reference/#pypaystack2.api.transactions.Transaction.export--parameters","text":"Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[int] Specify an ID for the customer whose transactions you want to retrieve Optional[TransactionStatus] Filter transactions by status. Any value from the TransactionStatus enum Optional[Currency] Specify the transaction currency to export. Any value from the Currency enum Optional[int] Filter transactions by amount. Specify the amount, in kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR Optional[bool] Set to True to export only settled transactions. False for pending transactions. Leave undefined to export all transactions Optional[int] An ID for the settlement whose transactions we should export Optional[int] Specify a payment page's id to export only transactions conducted on said page int Specify how many records you want to retrieve per page. If not specify we use a default value of 50.","title":"Parameters"},{"location":"reference/#pypaystack2.api.transactions.Transaction.export--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transactions.py 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 def export ( self , page : Optional [ int ] = None , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , customer : Optional [ int ] = None , status : Optional [ TransactionStatus ] = None , currency : Optional [ Currency ] = None , amount : Optional [ int ] = None , settled : Optional [ bool ] = None , settlement : Optional [ int ] = None , payment_page : Optional [ int ] = None , pagination = 50 , ) -> Response : \"\"\"Fetch transactions carried out on your integration. Parameters ---------- page: Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 customer: Optional[int] Specify an ID for the customer whose transactions you want to retrieve status: Optional[TransactionStatus] Filter transactions by status. Any value from the ``TransactionStatus`` enum currency: Optional[Currency] Specify the transaction currency to export. Any value from the ``Currency`` enum amount: Optional[int] Filter transactions by amount. Specify the amount, in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` settled: Optional[bool] Set to ``True`` to export only settled transactions. ``False`` for pending transactions. Leave undefined to export all transactions settlement: Optional[int] An ID for the settlement whose transactions we should export payment_page: Optional[int] Specify a payment page's id to export only transactions conducted on said page pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" if amount : amount = validate_amount ( amount ) url = self . _url ( f \"/transaction/export/?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"customer\" , customer ), ( \"status\" , status ), ( \"currency\" , currency ), ( \"settled\" , settled ), ( \"settlement\" , settlement ), ( \"payment_page\" , payment_page ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.transactions.Transaction.get_timeline","text":"View the timeline of a transaction","title":"get_timeline()"},{"location":"reference/#pypaystack2.api.transactions.Transaction.get_timeline--parameters","text":"str The ID or the reference of the transaction","title":"Parameters"},{"location":"reference/#pypaystack2.api.transactions.Transaction.get_timeline--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transactions.py 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 def get_timeline ( self , id_or_ref : str ) -> Response : \"\"\"View the timeline of a transaction Parameters ---------- id_or_ref: str The ID or the reference of the transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transaction/timeline/ { id_or_ref } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.transactions.Transaction.get_transaction","text":"Get details of a transaction carried out on your integration.","title":"get_transaction()"},{"location":"reference/#pypaystack2.api.transactions.Transaction.get_transaction--parameters","text":"str An ID for the transaction to fetch","title":"Parameters"},{"location":"reference/#pypaystack2.api.transactions.Transaction.get_transaction--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transactions.py 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 def get_transaction ( self , id : str ) -> Response : \"\"\"Get details of a transaction carried out on your integration. Parameters ---------- id: str An ID for the transaction to fetch Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transaction/ { id } /\" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.transactions.Transaction.get_transactions","text":"Fetch transactions carried out on your integration.","title":"get_transactions()"},{"location":"reference/#pypaystack2.api.transactions.Transaction.get_transactions--parameters","text":"Optional[int] Specify an ID for the customer whose transactions you want to retrieve Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[TransactionStatus] Filter transactions by status. any value from the TransactionStatus enum Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. Optional[int] Filter transactions by amount. Specify the amount (in kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR ) int Specify how many records you want to retrieve per page. If not specify we use a default value of 50.","title":"Parameters"},{"location":"reference/#pypaystack2.api.transactions.Transaction.get_transactions--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transactions.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 def get_transactions ( self , customer : Optional [ int ] = None , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , status : Optional [ TransactionStatus ] = None , page : Optional [ int ] = None , amount : Optional [ int ] = None , pagination = 50 , ) -> Response : \"\"\"Fetch transactions carried out on your integration. Parameters ---------- customer: Optional[int] Specify an ID for the customer whose transactions you want to retrieve start_date: Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 status: Optional[TransactionStatus] Filter transactions by status. any value from the ``TransactionStatus`` enum page: Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. amount: Optional[int] Filter transactions by amount. Specify the amount (in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR``) pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transaction/?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"customer\" , customer ), ( \"status\" , status ), ( \"from\" , start_date ), ( \"to\" , end_date ), ( \"amount\" , amount ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.transactions.Transaction.get_transfer_banks","text":"Fetch transfer banks","title":"get_transfer_banks()"},{"location":"reference/#pypaystack2.api.transactions.Transaction.get_transfer_banks--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.transactions.Transaction.get_transfer_banks--note","text":"Deprecation Notice it's available in Miscellaneous API wrapper. may be removed in future release Source code in pypaystack2/api/transactions.py 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 def get_transfer_banks ( self ): # TODO: Deprecate. it's available in Miscellaneous API \"\"\"Fetch transfer banks Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Deprecation Notice it's available in Miscellaneous API wrapper. may be removed in future release \"\"\" url = self . _url ( \"/bank\" ) return self . _handle_request ( \"GET\" , url )","title":"Note"},{"location":"reference/#pypaystack2.api.transactions.Transaction.initialize","text":"Initialize a transaction from your backend","title":"initialize()"},{"location":"reference/#pypaystack2.api.transactions.Transaction.initialize--parameters","text":"int Amount should be in kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR str Customer's email address Optional[Currency] Any value from the Currency enum. Optional[str] Unique transaction reference. Only -, ., = and alphanumeric characters allowed. Optional[str] Fully qualified url, e.g. https://example.com/ . Use this to override the callback url provided on the dashboard for this transaction Optional[str] If transaction is to create a subscription to a predefined plan, provide plan code here. This would invalidate the value provided in amount Optional[int] Number of times to charge customer during subscription to plan Optional[dict[str,Any]] A dictionary of additional info. check out this link for more information. https://paystack.com/docs/payments/metadata Optional[list[Channel]] A list of Channel enum values to control what channels you want to make available to the user to make a payment with Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w Optional[str] The code for the subaccount that owns the payment. e.g. ACCT_8f4s1eq7ml6rlzj Optional[int] An amount used to override the split configuration for a single split payment. If set, the amount specified goes to the main account regardless of the split configuration. Optional[Bearer] Any value from the Bearer enum. Who bears Paystack charges?","title":"Parameters"},{"location":"reference/#pypaystack2.api.transactions.Transaction.initialize--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.transactions.Transaction.initialize--raises","text":"InvalidDataError When email is not provided. Source code in pypaystack2/api/transactions.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def initialize ( self , amount : int , email : str , currency : Optional [ Currency ] = None , reference : Optional [ str ] = None , callback_url : Optional [ str ] = None , plan : Optional [ str ] = None , invoice_limit : Optional [ int ] = None , metadata : Optional [ dict [ str , Any ]] = None , channels : Optional [ list [ Channel ]] = None , split_code : Optional [ str ] = None , subaccount : Optional [ str ] = None , transfer_charge : Optional [ int ] = None , bearer : Optional [ Bearer ] = None , ) -> Response : \"\"\"Initialize a transaction from your backend Parameters ---------- amount: int Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` email: str Customer's email address currency: Optional[Currency] Any value from the ``Currency`` enum. reference: Optional[str] Unique transaction reference. Only ``-, ., =`` and alphanumeric characters allowed. callback_url: Optional[str] Fully qualified url, e.g. ``https://example.com/`` . Use this to override the callback url provided on the dashboard for this transaction plan: Optional[str] If transaction is to create a subscription to a predefined plan, provide plan code here. This would invalidate the value provided in ``amount`` invoice_limit: Optional[int] Number of times to charge customer during subscription to plan metadata: Optional[dict[str,Any]] A dictionary of additional info. check out this link for more information. https://paystack.com/docs/payments/metadata channels: Optional[list[Channel]] A list of ``Channel`` enum values to control what channels you want to make available to the user to make a payment with split_code: Optional[str] The split code of the transaction split. e.g. SPL_98WF13Eb3w subaccount: Optional[str] The code for the subaccount that owns the payment. e.g. ACCT_8f4s1eq7ml6rlzj transfer_charge: Optional[int] An amount used to override the split configuration for a single split payment. If set, the amount specified goes to the main account regardless of the split configuration. bearer: Optional[Bearer] Any value from the ``Bearer`` enum. Who bears Paystack charges? Returns ------- Response A named tuple containing the response gotten from paystack's server. Raises ------ InvalidDataError When email is not provided. \"\"\" amount = validate_amount ( amount ) if not email : raise InvalidDataError ( \"Customer's Email is required for initialization\" ) url = self . _url ( \"/transaction/initialize\" ) payload = { \"email\" : email , \"amount\" : amount , } optional_params = [ ( \"currency\" , currency ), ( \"reference\" , reference ), ( \"callback_url\" , callback_url ), ( \"plan\" , plan ), ( \"invoice_limit\" , invoice_limit ), ( \"metadata\" , metadata ), ( \"channels\" , channels ), ( \"split_code\" , split_code ), ( \"subaccount\" , subaccount ), ( \"transfer_charge\" , transfer_charge ), ( \"bearer\" , bearer ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Raises"},{"location":"reference/#pypaystack2.api.transactions.Transaction.partial_debit","text":"Retrieve part of a payment from a customer","title":"partial_debit()"},{"location":"reference/#pypaystack2.api.transactions.Transaction.partial_debit--parameters","text":"str Authorization Code Currency Specify the currency you want to debit. Any value from the Currency enum. int Amount should be in kobo if currency is Currency.NGN , pesewas, if currency is Currency.GHS , and cents, if currency is Currency.ZAR str Customer's email address (attached to the authorization code) Optional[str] Unique transaction reference. Only -, ., = and alphanumeric characters allowed. Optional[int] Minimum amount to charge","title":"Parameters"},{"location":"reference/#pypaystack2.api.transactions.Transaction.partial_debit--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.transactions.Transaction.partial_debit--raises","text":"InvalidDataError - When Customer's email is not provided. - When Customer's auth code is not provided. Source code in pypaystack2/api/transactions.py 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 def partial_debit ( self , auth_code : str , currency : Currency , amount : int , email : str , reference : Optional [ str ] = None , at_least : Optional [ int ] = None , ): \"\"\"Retrieve part of a payment from a customer Parameters ---------- auth_code: str Authorization Code currency: Currency Specify the currency you want to debit. Any value from the ``Currency`` enum. amount: int Amount should be in kobo if currency is ``Currency.NGN``, pesewas, if currency is ``Currency.GHS``, and cents, if currency is ``Currency.ZAR`` email: str Customer's email address (attached to the authorization code) reference: Optional[str] Unique transaction reference. Only `-, ., =` and alphanumeric characters allowed. at_least: Optional[int] Minimum amount to charge Returns ------- Response A named tuple containing the response gotten from paystack's server. Raises ------ InvalidDataError - When Customer's email is not provided. - When Customer's auth code is not provided. \"\"\" amount = validate_amount ( amount ) if at_least : at_least = validate_amount ( at_least ) if not email : raise InvalidDataError ( \"Customer's Email is required to charge\" ) if not auth_code : raise InvalidDataError ( \"Customer's Auth code is required to charge\" ) url = self . _url ( \"/transaction/partial_debit\" ) payload = { \"authorization_code\" : auth_code , \"currency\" : currency , \"amount\" : amount , \"email\" : email , } optional_params = [( \"reference\" , reference ), ( \"at_least\" , at_least )] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Raises"},{"location":"reference/#pypaystack2.api.transactions.Transaction.totals","text":"Total amount received on your account","title":"totals()"},{"location":"reference/#pypaystack2.api.transactions.Transaction.totals--parameters","text":"Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 int Specify how many records you want to retrieve per page. If not specify we use a default value of 50.","title":"Parameters"},{"location":"reference/#pypaystack2.api.transactions.Transaction.totals--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transactions.py 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 def totals ( self , page : Optional [ int ] = None , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , pagination = 50 , ): \"\"\"Total amount received on your account Parameters ---------- page: Optional[int] Specify exactly what page you want to retrieve. If not specify we use a default value of 1. start_date: Optional[str] A timestamp from which to start listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing transaction e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 pagination: int Specify how many records you want to retrieve per page. If not specify we use a default value of 50. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transaction/totals/?perPage= { pagination } \" ) url = url + f \"&page= { page } \" if page else url url = url + f \"&from= { start_date } \" if start_date else url url = url + f \"&page= { end_date } \" if end_date else url return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.transactions.Transaction.transfer","text":"Initiates transfer to a customer","title":"transfer()"},{"location":"reference/#pypaystack2.api.transactions.Transaction.transfer--parameters","text":"recipient_code amount reason reference","title":"Parameters"},{"location":"reference/#pypaystack2.api.transactions.Transaction.transfer--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.transactions.Transaction.transfer--note","text":"Deprecation Notice it's available in Transfer API wrapper. may be removed in future release Source code in pypaystack2/api/transactions.py 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 def transfer ( self , recipient_code : str , amount : int , reason : str , reference : Optional [ str ] = None , ) -> Response : # TODO: Deprecate. it's available in Transfer API \"\"\"Initiates transfer to a customer Parameters ---------- recipient_code amount reason reference Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Deprecation Notice it's available in Transfer API wrapper. may be removed in future release \"\"\" amount = validate_amount ( amount ) url = self . _url ( \"/transfer\" ) payload = { \"amount\" : amount , \"reason\" : reason , \"recipient\" : recipient_code , \"source\" : \"balance\" , \"currency\" : \"NGN\" , } if reference : payload . update ({ \"reference\" : reference }) return self . _handle_request ( \"POST\" , url , payload )","title":"Note"},{"location":"reference/#pypaystack2.api.transactions.Transaction.verify","text":"Confirm the status of a transaction","title":"verify()"},{"location":"reference/#pypaystack2.api.transactions.Transaction.verify--parameters","text":"str The transaction reference used to intiate the transaction","title":"Parameters"},{"location":"reference/#pypaystack2.api.transactions.Transaction.verify--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transactions.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def verify ( self , reference : str ) -> Response : \"\"\"Confirm the status of a transaction Parameters ---------- reference: str The transaction reference used to intiate the transaction Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" reference = str ( reference ) url = self . _url ( f \"/transaction/verify/ { reference } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient","text":"Bases: BaseAPI Provides a wrapper for paystack Transfer Receipts API The Transfer Recipients API allows you to create and manage beneficiaries that you send money to. https://paystack.com/docs/api/#transfer-recipient","title":"TransferRecipient"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient--note","text":"Feature Availability This feature is only available to businesses in Nigeria and Ghana. Source code in pypaystack2/api/transfer_recipients.pyclass TransferRecipient ( BaseAPI ): \"\"\"Provides a wrapper for paystack Transfer Receipts API The Transfer Recipients API allows you to create and manage beneficiaries that you send money to. https://paystack.com/docs/api/#transfer-recipient Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" def create ( self , type : TRType , name : str , account_number : str , bank_code : Optional [ str ] = None , description : Optional [ str ] = None , currency : Optional [ Currency ] = None , auth_code : Optional [ str ] = None , metadata : Optional [ Mapping ] = None , ) -> Response : \"\"\" Creates a new recipient. A duplicate account number will lead to the retrieval of the existing record. Parameters ---------- type: TRType Recipient Type. any value from the ``TRType`` enum name: str A name for the recipient account_number: str Required if ``type`` is ``TRType.NUBAN`` or ``TRType.BASA`` bank_code: Optional[str] Required if ``type`` is ``TRType.NUBAN`` or ``TRType.BASA``. You can get the list of Bank Codes by calling the ``.get_banks`` method from the Miscellaneous API wrapper. description: Optional[str] currency: Optional[Currency] auth_code: Optional[str] metadata: Optional[Mapping] Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" # FIXME: type is a keyword arg, might replace # if it raises issues. if type == TRType . NUBAN or type == TRType . BASA : if bank_code is None : raise InvalidDataError ( \"`bank_code` is required if type is `TRType.NUBAN` or `TRType.BASA`\" ) url = self . _url ( \"/transferrecipient\" ) payload = { \"type\" : type , \"name\" : name , \"account_number\" : account_number , } optional_params = [ ( \"bank_code\" , bank_code ), ( \"description\" , description ), ( \"currency\" , currency ), ( \"authorization_code\" , auth_code ), ( \"metadata\" , metadata ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def bulk_create ( self , batch : list ) -> Response : # TODO: create a pydantic model # for batch using the fields below. # type: TRType, # name: str, # account_number: str, # bank_code: Optional[str] = None, # description: Optional[str] = None, # currency: Optional[utils.Currency] = None, # auth_code: Optional[str] = None, # metadata: Optional[Mapping] = None, \"\"\" Create multiple transfer recipients in batches. A duplicate account number will lead to the retrieval of the existing record. Parameters ---------- batch: list A list of dictionaries of transfer recipients. Each dictionary should contain ``type``, ``name``, and ``bank_code``. Any Create Transfer Recipient param can also be passed. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" # FIXME: type is a keyword arg, might replace # if it raises issues. for tr in batch : if tr . type == TRType . NUBAN or tr . type == TRType . BASA : if tr . bank_code is None : raise InvalidDataError ( \"`bank_code` is required if type is `TRType.NUBAN` or `TRType.BASA`\" ) url = self . _url ( \"/transferrecipient/bulk\" ) payload = { \"batch\" : batch , } return self . _handle_request ( \"POST\" , url , payload ) def get_transfer_receipts ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetch transfer recipients available on your integration Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specified we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing transfer recipients e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing transfer recipients e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transferrecipient?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_transfer_receipt ( self , id_or_code : str ) -> Response : \"\"\"Fetch the details of a transfer recipient Parameters ---------- id_or_code: str An ID or code for the recipient whose details you want to receive. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transferrecipient/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) def update ( self , id_or_code : str , name : str , email : Optional [ str ] = None ) -> Response : \"\"\" Update an existing recipient. An duplicate account number will lead to the retrieval of the existing record. Parameters ---------- id_or_code: str Transfer Recipient's ID or code name: str A name for the recipient email: Optional[str] Email address of the recipient Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transferrecipient/ { id_or_code } \" ) payload = { \"name\" : name } optional_params = { \"email\" : email } payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload ) def delete ( self , id_or_code : str ) -> Response : \"\"\"Deletes a transfer recipient (sets the transfer recipient to inactive) Parameters ---------- id_or_code: str An ID or code for the recipient who you want to delete. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transferrecipient/ { id_or_code } \" ) return self . _handle_request ( \"DELETE\" , url )","title":"Note"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.bulk_create","text":"Create multiple transfer recipients in batches. A duplicate account number will lead to the retrieval of the existing record.","title":"bulk_create()"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.bulk_create--parameters","text":"list A list of dictionaries of transfer recipients. Each dictionary should contain type , name , and bank_code . Any Create Transfer Recipient param can also be passed.","title":"Parameters"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.bulk_create--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfer_recipients.py 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def bulk_create ( self , batch : list ) -> Response : # TODO: create a pydantic model # for batch using the fields below. # type: TRType, # name: str, # account_number: str, # bank_code: Optional[str] = None, # description: Optional[str] = None, # currency: Optional[utils.Currency] = None, # auth_code: Optional[str] = None, # metadata: Optional[Mapping] = None, \"\"\" Create multiple transfer recipients in batches. A duplicate account number will lead to the retrieval of the existing record. Parameters ---------- batch: list A list of dictionaries of transfer recipients. Each dictionary should contain ``type``, ``name``, and ``bank_code``. Any Create Transfer Recipient param can also be passed. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" # FIXME: type is a keyword arg, might replace # if it raises issues. for tr in batch : if tr . type == TRType . NUBAN or tr . type == TRType . BASA : if tr . bank_code is None : raise InvalidDataError ( \"`bank_code` is required if type is `TRType.NUBAN` or `TRType.BASA`\" ) url = self . _url ( \"/transferrecipient/bulk\" ) payload = { \"batch\" : batch , } return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.create","text":"Creates a new recipient. A duplicate account number will lead to the retrieval of the existing record.","title":"create()"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.create--parameters","text":"TRType Recipient Type. any value from the TRType enum str A name for the recipient str Required if type is TRType.NUBAN or TRType.BASA Optional[str] Required if type is TRType.NUBAN or TRType.BASA . You can get the list of Bank Codes by calling the .get_banks method from the Miscellaneous API wrapper. description: Optional[str] currency: Optional[Currency] auth_code: Optional[str] metadata: Optional[Mapping]","title":"Parameters"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.create--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfer_recipients.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 def create ( self , type : TRType , name : str , account_number : str , bank_code : Optional [ str ] = None , description : Optional [ str ] = None , currency : Optional [ Currency ] = None , auth_code : Optional [ str ] = None , metadata : Optional [ Mapping ] = None , ) -> Response : \"\"\" Creates a new recipient. A duplicate account number will lead to the retrieval of the existing record. Parameters ---------- type: TRType Recipient Type. any value from the ``TRType`` enum name: str A name for the recipient account_number: str Required if ``type`` is ``TRType.NUBAN`` or ``TRType.BASA`` bank_code: Optional[str] Required if ``type`` is ``TRType.NUBAN`` or ``TRType.BASA``. You can get the list of Bank Codes by calling the ``.get_banks`` method from the Miscellaneous API wrapper. description: Optional[str] currency: Optional[Currency] auth_code: Optional[str] metadata: Optional[Mapping] Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" # FIXME: type is a keyword arg, might replace # if it raises issues. if type == TRType . NUBAN or type == TRType . BASA : if bank_code is None : raise InvalidDataError ( \"`bank_code` is required if type is `TRType.NUBAN` or `TRType.BASA`\" ) url = self . _url ( \"/transferrecipient\" ) payload = { \"type\" : type , \"name\" : name , \"account_number\" : account_number , } optional_params = [ ( \"bank_code\" , bank_code ), ( \"description\" , description ), ( \"currency\" , currency ), ( \"authorization_code\" , auth_code ), ( \"metadata\" , metadata ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.delete","text":"Deletes a transfer recipient (sets the transfer recipient to inactive)","title":"delete()"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.delete--parameters","text":"str An ID or code for the recipient who you want to delete.","title":"Parameters"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.delete--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfer_recipients.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 def delete ( self , id_or_code : str ) -> Response : \"\"\"Deletes a transfer recipient (sets the transfer recipient to inactive) Parameters ---------- id_or_code: str An ID or code for the recipient who you want to delete. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transferrecipient/ { id_or_code } \" ) return self . _handle_request ( \"DELETE\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.get_transfer_receipt","text":"Fetch the details of a transfer recipient","title":"get_transfer_receipt()"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.get_transfer_receipt--parameters","text":"str An ID or code for the recipient whose details you want to receive.","title":"Parameters"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.get_transfer_receipt--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfer_recipients.py 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 def get_transfer_receipt ( self , id_or_code : str ) -> Response : \"\"\"Fetch the details of a transfer recipient Parameters ---------- id_or_code: str An ID or code for the recipient whose details you want to receive. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transferrecipient/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.get_transfer_receipts","text":"Fetch transfer recipients available on your integration","title":"get_transfer_receipts()"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.get_transfer_receipts--parameters","text":"int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. int Specify how many records you want to retrieve per page. If not specified we use a default value of 50. Optional[str] A timestamp from which to start listing transfer recipients e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Optional[str] A timestamp at which to stop listing transfer recipients e.g. 2016-09-24T00:00:05.000Z, 2016-09-21","title":"Parameters"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.get_transfer_receipts--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfer_recipients.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 def get_transfer_receipts ( self , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\"Fetch transfer recipients available on your integration Parameters ---------- page: int Specify exactly what page you want to retrieve. If not specify we use a default value of 1. pagination: int Specify how many records you want to retrieve per page. If not specified we use a default value of 50. start_date: Optional[str] A timestamp from which to start listing transfer recipients e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 end_date: Optional[str] A timestamp at which to stop listing transfer recipients e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transferrecipient?perPage= { pagination } \" ) query_params = [ ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.update","text":"Update an existing recipient. An duplicate account number will lead to the retrieval of the existing record.","title":"update()"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.update--parameters","text":"str Transfer Recipient's ID or code str A name for the recipient Optional[str] Email address of the recipient","title":"Parameters"},{"location":"reference/#pypaystack2.api.transfer_recipients.TransferRecipient.update--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfer_recipients.py 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 def update ( self , id_or_code : str , name : str , email : Optional [ str ] = None ) -> Response : \"\"\" Update an existing recipient. An duplicate account number will lead to the retrieval of the existing record. Parameters ---------- id_or_code: str Transfer Recipient's ID or code name: str A name for the recipient email: Optional[str] Email address of the recipient Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transferrecipient/ { id_or_code } \" ) payload = { \"name\" : name } optional_params = { \"email\" : email } payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"PUT\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.transfers.Transfer","text":"Bases: BaseAPI Provides a wrapper for paystack Transfers API The Transfers API allows you to automate sending money on your integration https://paystack.com/docs/api/#transfer","title":"Transfer"},{"location":"reference/#pypaystack2.api.transfers.Transfer--note","text":"This feature is only available to businesses in Nigeria and Ghana. Source code in pypaystack2/api/transfers.pyclass Transfer ( BaseAPI ): \"\"\"Provides a wrapper for paystack Transfers API The Transfers API allows you to automate sending money on your integration https://paystack.com/docs/api/#transfer Note ---- This feature is only available to businesses in Nigeria and Ghana. \"\"\" def initiate ( self , amount : int , recipient : str , reason : Optional [ str ] = None , currency : Optional [ Currency ] = None , reference : Optional [ str ] = None , source = \"balance\" , ) -> Response : \"\"\" amount: int recipient: str reason: Optional[str] currency: Optional[Currency] reference: Optional[str] source: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" amount = validate_amount ( amount ) url = self . _url ( \"/transfer\" ) payload = { \"amount\" : amount , \"recipient\" : recipient , \"source\" : source , } optional_params = [ ( \"reason\" , reason ), ( \"reference\" , reference ), ( \"currency\" , currency ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload ) def finalize ( self , transfer_code : str , otp : str , ) -> Response : \"\"\" Parameters ---------- transfer_code: str otp: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/transfer/finalize_transfer\" ) payload = { \"transfer_code\" : transfer_code , \"otp\" : otp , } return self . _handle_request ( \"POST\" , url , payload ) def bulk_transfer ( self , transfers : list , source = \"balance\" ) -> Response : \"\"\" Parameters ---------- transfers: list source: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/transfer/bulk\" ) payload = { \"transfers\" : transfers , \"source\" : source , } return self . _handle_request ( \"POST\" , url , payload ) def get_transfers ( self , customer : str , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\" Parameters ---------- customer: str page: int pagination: int start_date: Optional[str] end_date: Optional[str] Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transfer?perPage= { pagination } \" ) query_params = [ ( \"customer\" , customer ), ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url ) def get_transfer ( self , id_or_code : str , ) -> Response : \"\"\" Parameters ---------- id_or_code: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transfer/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url ) def verify ( self , reference : str , ) -> Response : \"\"\" Parameters ---------- reference: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transfer/verify/ { reference } \" ) return self . _handle_request ( \"GET\" , url )","title":"Note"},{"location":"reference/#pypaystack2.api.transfers.Transfer.bulk_transfer","text":"","title":"bulk_transfer()"},{"location":"reference/#pypaystack2.api.transfers.Transfer.bulk_transfer--parameters","text":"transfers: list source: str","title":"Parameters"},{"location":"reference/#pypaystack2.api.transfers.Transfer.bulk_transfer--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfers.py 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 def bulk_transfer ( self , transfers : list , source = \"balance\" ) -> Response : \"\"\" Parameters ---------- transfers: list source: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/transfer/bulk\" ) payload = { \"transfers\" : transfers , \"source\" : source , } return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.transfers.Transfer.finalize","text":"","title":"finalize()"},{"location":"reference/#pypaystack2.api.transfers.Transfer.finalize--parameters","text":"transfer_code: str otp: str","title":"Parameters"},{"location":"reference/#pypaystack2.api.transfers.Transfer.finalize--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfers.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 def finalize ( self , transfer_code : str , otp : str , ) -> Response : \"\"\" Parameters ---------- transfer_code: str otp: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/transfer/finalize_transfer\" ) payload = { \"transfer_code\" : transfer_code , \"otp\" : otp , } return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.transfers.Transfer.get_transfer","text":"","title":"get_transfer()"},{"location":"reference/#pypaystack2.api.transfers.Transfer.get_transfer--parameters","text":"id_or_code: str","title":"Parameters"},{"location":"reference/#pypaystack2.api.transfers.Transfer.get_transfer--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfers.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 def get_transfer ( self , id_or_code : str , ) -> Response : \"\"\" Parameters ---------- id_or_code: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transfer/ { id_or_code } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.transfers.Transfer.get_transfers","text":"","title":"get_transfers()"},{"location":"reference/#pypaystack2.api.transfers.Transfer.get_transfers--parameters","text":"customer: str page: int pagination: int start_date: Optional[str] end_date: Optional[str]","title":"Parameters"},{"location":"reference/#pypaystack2.api.transfers.Transfer.get_transfers--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfers.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 def get_transfers ( self , customer : str , page = 1 , pagination = 50 , start_date : Optional [ str ] = None , end_date : Optional [ str ] = None , ) -> Response : \"\"\" Parameters ---------- customer: str page: int pagination: int start_date: Optional[str] end_date: Optional[str] Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transfer?perPage= { pagination } \" ) query_params = [ ( \"customer\" , customer ), ( \"page\" , page ), ( \"from\" , start_date ), ( \"to\" , end_date ), ] url = append_query_params ( query_params , url ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.transfers.Transfer.initiate","text":"amount: int recipient: str reason: Optional[str] currency: Optional[Currency] reference: Optional[str] source: str","title":"initiate()"},{"location":"reference/#pypaystack2.api.transfers.Transfer.initiate--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfers.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def initiate ( self , amount : int , recipient : str , reason : Optional [ str ] = None , currency : Optional [ Currency ] = None , reference : Optional [ str ] = None , source = \"balance\" , ) -> Response : \"\"\" amount: int recipient: str reason: Optional[str] currency: Optional[Currency] reference: Optional[str] source: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" amount = validate_amount ( amount ) url = self . _url ( \"/transfer\" ) payload = { \"amount\" : amount , \"recipient\" : recipient , \"source\" : source , } optional_params = [ ( \"reason\" , reason ), ( \"reference\" , reference ), ( \"currency\" , currency ), ] payload = add_to_payload ( optional_params , payload ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.api.transfers.Transfer.verify","text":"","title":"verify()"},{"location":"reference/#pypaystack2.api.transfers.Transfer.verify--parameters","text":"reference: str","title":"Parameters"},{"location":"reference/#pypaystack2.api.transfers.Transfer.verify--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfers.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 def verify ( self , reference : str , ) -> Response : \"\"\" Parameters ---------- reference: str Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/transfer/verify/ { reference } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl","text":"Bases: BaseAPI Provides a wrapper for paystack Transfers Control API The Transfers Control API allows you manage settings of your transfers. https://paystack.com/docs/api/#transfer-control Source code in pypaystack2/api/transfers_control.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 class TransferControl ( BaseAPI ): \"\"\"Provides a wrapper for paystack Transfers Control API The Transfers Control API allows you manage settings of your transfers. https://paystack.com/docs/api/#transfer-control \"\"\" def check_balance ( self ) -> Response : \"\"\"Fetch the available balance on your integration Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/balance\" ) return self . _handle_request ( \"GET\" , url ) def get_balance_ledger ( self ) -> Response : \"\"\"Fetch all pay-ins and pay-outs that occured on your integration Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"balance/ledger\" ) return self . _handle_request ( \"GET\" , url ) def resend_OTP ( self , transfer_code : str , reason : Reason ) -> Response : \"\"\" Generates a new OTP and sends to customer in the event they are having trouble receiving one. Parameters ---------- transfer_code: str Transfer code reason: Reason Any value from the ``Reason`` enum Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" payload = { \"transfer_code\" : transfer_code , \"reason\" : reason } url = self . _url ( \"/transfer/resend_otp\" ) return self . _handle_request ( \"POST\" , url , payload ) def disable_OTP ( self ) -> Response : \"\"\" This is used in the event that you want to be able to complete transfers programmatically without use of OTPs. No arguments required. You will get an OTP to complete the request Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" url = self . _url ( \"/transfer/disable_otp\" ) return self . _handle_request ( \"POST\" , url ) def finalize_disable_OTP ( self , otp : str ) -> Response : \"\"\"Finalize the request to disable OTP on your transfers. Parameters ---------- otp: str Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" payload = { \"otp\" : otp } url = self . _url ( \"/transfer/disable_otp_finalize\" ) return self . _handle_request ( \"POST\" , url , payload ) def enable_OTP ( self ) -> Response : \"\"\" In the event that a customer wants to stop being able to complete transfers programmatically, this endpoint helps turn OTP requirement back on. No arguments required. Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" url = self . _url ( \"/transfer/enable_otp\" ) return self . _handle_request ( \"POST\" , url )","title":"TransferControl"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.check_balance","text":"Fetch the available balance on your integration","title":"check_balance()"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.check_balance--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfers_control.py 12 13 14 15 16 17 18 19 20 21 def check_balance ( self ) -> Response : \"\"\"Fetch the available balance on your integration Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"/balance\" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.disable_OTP","text":"This is used in the event that you want to be able to complete transfers programmatically without use of OTPs. No arguments required. You will get an OTP to complete the request","title":"disable_OTP()"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.disable_OTP--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.disable_OTP--note","text":"Feature Availability This feature is only available to businesses in Nigeria and Ghana. Source code in pypaystack2/api/transfers_control.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def disable_OTP ( self ) -> Response : \"\"\" This is used in the event that you want to be able to complete transfers programmatically without use of OTPs. No arguments required. You will get an OTP to complete the request Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" url = self . _url ( \"/transfer/disable_otp\" ) return self . _handle_request ( \"POST\" , url )","title":"Note"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.enable_OTP","text":"In the event that a customer wants to stop being able to complete transfers programmatically, this endpoint helps turn OTP requirement back on. No arguments required.","title":"enable_OTP()"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.enable_OTP--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.enable_OTP--note","text":"Feature Availability This feature is only available to businesses in Nigeria and Ghana. Source code in pypaystack2/api/transfers_control.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def enable_OTP ( self ) -> Response : \"\"\" In the event that a customer wants to stop being able to complete transfers programmatically, this endpoint helps turn OTP requirement back on. No arguments required. Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" url = self . _url ( \"/transfer/enable_otp\" ) return self . _handle_request ( \"POST\" , url )","title":"Note"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.finalize_disable_OTP","text":"Finalize the request to disable OTP on your transfers.","title":"finalize_disable_OTP()"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.finalize_disable_OTP--parameters","text":"otp: str","title":"Parameters"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.finalize_disable_OTP--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.finalize_disable_OTP--note","text":"Feature Availability This feature is only available to businesses in Nigeria and Ghana. Source code in pypaystack2/api/transfers_control.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def finalize_disable_OTP ( self , otp : str ) -> Response : \"\"\"Finalize the request to disable OTP on your transfers. Parameters ---------- otp: str Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" payload = { \"otp\" : otp } url = self . _url ( \"/transfer/disable_otp_finalize\" ) return self . _handle_request ( \"POST\" , url , payload )","title":"Note"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.get_balance_ledger","text":"Fetch all pay-ins and pay-outs that occured on your integration","title":"get_balance_ledger()"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.get_balance_ledger--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/transfers_control.py 23 24 25 26 27 28 29 30 31 32 def get_balance_ledger ( self ) -> Response : \"\"\"Fetch all pay-ins and pay-outs that occured on your integration Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( \"balance/ledger\" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.resend_OTP","text":"Generates a new OTP and sends to customer in the event they are having trouble receiving one.","title":"resend_OTP()"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.resend_OTP--parameters","text":"str Transfer code Reason Any value from the Reason enum","title":"Parameters"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.resend_OTP--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.transfers_control.TransferControl.resend_OTP--note","text":"Feature Availability This feature is only available to businesses in Nigeria and Ghana. Source code in pypaystack2/api/transfers_control.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def resend_OTP ( self , transfer_code : str , reason : Reason ) -> Response : \"\"\" Generates a new OTP and sends to customer in the event they are having trouble receiving one. Parameters ---------- transfer_code: str Transfer code reason: Reason Any value from the ``Reason`` enum Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria and Ghana. \"\"\" payload = { \"transfer_code\" : transfer_code , \"reason\" : reason } url = self . _url ( \"/transfer/resend_otp\" ) return self . _handle_request ( \"POST\" , url , payload )","title":"Note"},{"location":"reference/#pypaystack2.api.verification.Verification","text":"Bases: BaseAPI Provides a wrapper for paystack Verification API The Verification API allows you to perform KYC processes. https://paystack.com/docs/api/#verification","title":"Verification"},{"location":"reference/#pypaystack2.api.verification.Verification--note","text":"This feature is only available to businesses in Nigeria. Source code in pypaystack2/api/verification.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 class Verification ( BaseAPI ): \"\"\"Provides a wrapper for paystack Verification API The Verification API allows you to perform KYC processes. https://paystack.com/docs/api/#verification Note ---- This feature is only available to businesses in Nigeria. \"\"\" def resolve_account_number ( self , account_number : str , bank_code : str , ) -> Response : \"\"\"Confirm an account belongs to the right customer Parameters ---------- account_number: str Account Number bank_code: str You can get the list of bank codes by calling the Miscellaneous API wrapper ``.get_banks`` method. Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria. \"\"\" url = self . _url ( f \"/bank/resolve?account_number= { account_number } &bank_code= { bank_code } \" ) return self . _handle_request ( \"GET\" , url ) def validate_account ( self , account_name : str , account_number : str , account_type : AccountType , bank_code : str , country_code : Country , document_type : DocumentType , ) -> Response : \"\"\"Confirm the authenticity of a customer's account number before sending money Parameters ---------- account_name: str Customer's first and last name registered with their bank account_number: str Customer's account number account_type: AccountType bank_code: str The bank code of the customer\u2019s bank. You can fetch the bank codes by using Miscellaneous API wrapper ``.get_banks`` method. country_code: Country Any value from the ``Country`` enum document_type: DocumentType Customer\u2019s mode of identity. any value from the ``DocumentType`` enum. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"account_name\" : account_name , \"account_number\" : account_number , \"account_type\" : account_type , \"bank_code\" : bank_code , \"country_code\" : country_code , \"document_type\" : document_type , } url = self . _url ( f \"/bank/validate\" ) return self . _handle_request ( \"POST\" , url , payload ) def resolve_card_BIN ( self , bin : str ) -> Response : \"\"\"Get more information about a customer's card Parameters ---------- bin: str First 6 characters of card Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/decision/bin/ { bin } \" ) return self . _handle_request ( \"GET\" , url )","title":"Note"},{"location":"reference/#pypaystack2.api.verification.Verification.resolve_account_number","text":"Confirm an account belongs to the right customer","title":"resolve_account_number()"},{"location":"reference/#pypaystack2.api.verification.Verification.resolve_account_number--parameters","text":"str Account Number str You can get the list of bank codes by calling the Miscellaneous API wrapper .get_banks method.","title":"Parameters"},{"location":"reference/#pypaystack2.api.verification.Verification.resolve_account_number--returns","text":"Response A named tuple containing the response gotten from paystack's server.","title":"Returns"},{"location":"reference/#pypaystack2.api.verification.Verification.resolve_account_number--note","text":"Feature Availability This feature is only available to businesses in Nigeria. Source code in pypaystack2/api/verification.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def resolve_account_number ( self , account_number : str , bank_code : str , ) -> Response : \"\"\"Confirm an account belongs to the right customer Parameters ---------- account_number: str Account Number bank_code: str You can get the list of bank codes by calling the Miscellaneous API wrapper ``.get_banks`` method. Returns ------- Response A named tuple containing the response gotten from paystack's server. Note ---- Feature Availability This feature is only available to businesses in Nigeria. \"\"\" url = self . _url ( f \"/bank/resolve?account_number= { account_number } &bank_code= { bank_code } \" ) return self . _handle_request ( \"GET\" , url )","title":"Note"},{"location":"reference/#pypaystack2.api.verification.Verification.resolve_card_BIN","text":"Get more information about a customer's card","title":"resolve_card_BIN()"},{"location":"reference/#pypaystack2.api.verification.Verification.resolve_card_BIN--parameters","text":"str First 6 characters of card","title":"Parameters"},{"location":"reference/#pypaystack2.api.verification.Verification.resolve_card_BIN--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/verification.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 def resolve_card_BIN ( self , bin : str ) -> Response : \"\"\"Get more information about a customer's card Parameters ---------- bin: str First 6 characters of card Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" url = self . _url ( f \"/decision/bin/ { bin } \" ) return self . _handle_request ( \"GET\" , url )","title":"Returns"},{"location":"reference/#pypaystack2.api.verification.Verification.validate_account","text":"Confirm the authenticity of a customer's account number before sending money","title":"validate_account()"},{"location":"reference/#pypaystack2.api.verification.Verification.validate_account--parameters","text":"str Customer's first and last name registered with their bank str Customer's account number account_type: AccountType str The bank code of the customer\u2019s bank. You can fetch the bank codes by using Miscellaneous API wrapper .get_banks method. Country Any value from the Country enum DocumentType Customer\u2019s mode of identity. any value from the DocumentType enum.","title":"Parameters"},{"location":"reference/#pypaystack2.api.verification.Verification.validate_account--returns","text":"Response A named tuple containing the response gotten from paystack's server. Source code in pypaystack2/api/verification.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def validate_account ( self , account_name : str , account_number : str , account_type : AccountType , bank_code : str , country_code : Country , document_type : DocumentType , ) -> Response : \"\"\"Confirm the authenticity of a customer's account number before sending money Parameters ---------- account_name: str Customer's first and last name registered with their bank account_number: str Customer's account number account_type: AccountType bank_code: str The bank code of the customer\u2019s bank. You can fetch the bank codes by using Miscellaneous API wrapper ``.get_banks`` method. country_code: Country Any value from the ``Country`` enum document_type: DocumentType Customer\u2019s mode of identity. any value from the ``DocumentType`` enum. Returns ------- Response A named tuple containing the response gotten from paystack's server. \"\"\" payload = { \"account_name\" : account_name , \"account_number\" : account_number , \"account_type\" : account_type , \"bank_code\" : bank_code , \"country_code\" : country_code , \"document_type\" : document_type , } url = self . _url ( f \"/bank/validate\" ) return self . _handle_request ( \"POST\" , url , payload )","title":"Returns"},{"location":"reference/#pypaystack2.utils.AccountType","text":"Bases: str , Enum Enum of Account types supported by paystack Source code in pypaystack2/utils.py 186 187 188 189 190 class AccountType ( str , Enum ): \"\"\"Enum of Account types supported by paystack\"\"\" PERSONAL = \"personal\" BUSINESS = \"business\"","title":"AccountType"},{"location":"reference/#pypaystack2.utils.BankType","text":"Bases: str , Enum Enum of bank types Source code in pypaystack2/utils.py 200 201 202 203 204 class BankType ( str , Enum ): \"\"\"Enum of bank types\"\"\" GHIPPS = \"ghipps\" MOBILE_MONEY = \"mobile_money\"","title":"BankType"},{"location":"reference/#pypaystack2.utils.Bearer","text":"Bases: str , Enum Enum for who bears paystack charges Source code in pypaystack2/utils.py 52 53 54 55 56 57 58 class Bearer ( str , Enum ): \"\"\"Enum for who bears paystack charges\"\"\" ACCOUNT = \"account\" SUBACCOUNT = \"subaccount\" ALL_PROPOTIONAL = \"all-proportional\" ALL = \"all\"","title":"Bearer"},{"location":"reference/#pypaystack2.utils.Channel","text":"Bases: str , Enum Enum of payment channels supported by paystack Source code in pypaystack2/utils.py 41 42 43 44 45 46 47 48 49 class Channel ( str , Enum ): \"\"\"Enum of payment channels supported by paystack\"\"\" CARD = \"card\" BANK = \"bank\" USSD = \"ussd\" QR = \"qr\" MOBILE_MONEY = \"mobile_money\" BANK_TRANSFER = \"bank_transfer\"","title":"Channel"},{"location":"reference/#pypaystack2.utils.ChargeStatus","text":"Bases: str , Enum Enum of charge status supported by paystack Source code in pypaystack2/utils.py 147 148 149 150 151 152 class ChargeStatus ( str , Enum ): \"\"\"Enum of charge status supported by paystack\"\"\" PENDING = \"pending\" SUCCESS = \"success\" FAILED = \"failed\"","title":"ChargeStatus"},{"location":"reference/#pypaystack2.utils.Country","text":"Bases: str , Enum Enum of countries supported by paystack Source code in pypaystack2/utils.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 class Country ( str , Enum ): \"\"\"Enum of countries supported by paystack\"\"\" NIGERIA = \"ng\" GHANA = \"gh\" @staticmethod def get_full ( val : str ) -> Optional [ str ]: \"\"\"Returns paystack supported country name in full lowercase Parameters ---------- val : str The two digit iso name of the country. Returns ------- str,optinal The name of the country in lowercase if it is supported by paystack or none. \"\"\" val = val . lower () if val == \"ng\" : return \"nigeria\" elif val == \"gh\" : return \"ghana\" return None","title":"Country"},{"location":"reference/#pypaystack2.utils.Country.get_full","text":"Returns paystack supported country name in full lowercase","title":"get_full()"},{"location":"reference/#pypaystack2.utils.Country.get_full--parameters","text":"str The two digit iso name of the country.","title":"Parameters"},{"location":"reference/#pypaystack2.utils.Country.get_full--returns","text":"str,optinal The name of the country in lowercase if it is supported by paystack or none. Source code in pypaystack2/utils.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 @staticmethod def get_full ( val : str ) -> Optional [ str ]: \"\"\"Returns paystack supported country name in full lowercase Parameters ---------- val : str The two digit iso name of the country. Returns ------- str,optinal The name of the country in lowercase if it is supported by paystack or none. \"\"\" val = val . lower () if val == \"ng\" : return \"nigeria\" elif val == \"gh\" : return \"ghana\" return None","title":"Returns"},{"location":"reference/#pypaystack2.utils.Currency","text":"Bases: str , Enum Enum of currencies supported by paystack. Source code in pypaystack2/utils.py 22 23 24 25 26 27 28 class Currency ( str , Enum ): \"\"\"Enum of currencies supported by paystack.\"\"\" NGN = \"NGN\" GHS = \"GHS\" ZAR = \"ZAR\" USD = \"USD\"","title":"Currency"},{"location":"reference/#pypaystack2.utils.DisputeStatus","text":"Bases: str , Enum Enum of dispute status supported by paystack Source code in pypaystack2/utils.py 207 208 209 210 211 212 213 class DisputeStatus ( str , Enum ): \"\"\"Enum of dispute status supported by paystack\"\"\" PENDING = \"pending\" RESOLVED = \"resolved\" AWAITING_BANK_FEEDBACK = \"awaiting-bank-feedback\" AWAITING_MERCHANT_FEEDBACK = \"awaiting-merchant-feedback\"","title":"DisputeStatus"},{"location":"reference/#pypaystack2.utils.DocumentType","text":"Bases: str , Enum Enum of Document types supported by paystack Source code in pypaystack2/utils.py 129 130 131 132 133 134 class DocumentType ( str , Enum ): \"\"\"Enum of Document types supported by paystack\"\"\" IDENTITY_NUMBER = \"identityNumber\" PASSPORT_NUMBER = \"passportNumber\" BUSINESS_REGISTRATION_NUMBER = \"businessRegistrationNumber\"","title":"DocumentType"},{"location":"reference/#pypaystack2.utils.Gateway","text":"Bases: str , Enum Enum of bank gateways supported by paystack Source code in pypaystack2/utils.py 179 180 181 182 183 class Gateway ( str , Enum ): \"\"\"Enum of bank gateways supported by paystack\"\"\" EMANDATE = \"emandate\" DIGITALBANKMANDATE = \"digitalbankmandate\"","title":"Gateway"},{"location":"reference/#pypaystack2.utils.Identification","text":"Bases: str , Enum Enum of Identification methods supported by paystack Source code in pypaystack2/utils.py 112 113 114 115 116 class Identification ( str , Enum ): \"\"\"Enum of Identification methods supported by paystack\"\"\" BVN = \"bvn\" BANK_ACCOUNT = \"bank_account\"","title":"Identification"},{"location":"reference/#pypaystack2.utils.Interval","text":"Bases: str , Enum Enum of intervals supported by paystack. Source code in pypaystack2/utils.py 31 32 33 34 35 36 37 38 class Interval ( str , Enum ): \"\"\"Enum of intervals supported by paystack.\"\"\" HOURLY = \"hourly\" DAILY = \"daily\" WEEKLY = \"weekly\" MONTHLY = \"monthly\" ANNUALLY = \"annually\"","title":"Interval"},{"location":"reference/#pypaystack2.utils.InvoiceStatus","text":"Bases: str , Enum Enum of invoice status supported by paystack Source code in pypaystack2/utils.py 139 140 141 142 143 144 class InvoiceStatus ( str , Enum ): \"\"\"Enum of invoice status supported by paystack\"\"\" PENDING = \"pending\" SUCCESS = \"success\" FAILED = \"failed\"","title":"InvoiceStatus"},{"location":"reference/#pypaystack2.utils.PlanStatus","text":"Bases: str , Enum Enum of plan status supported by paystack Source code in pypaystack2/utils.py 155 156 157 158 159 160 class PlanStatus ( str , Enum ): \"\"\"Enum of plan status supported by paystack\"\"\" PENDING = \"pending\" SUCCESS = \"success\" FAILED = \"failed\"","title":"PlanStatus"},{"location":"reference/#pypaystack2.utils.Reason","text":"Bases: str , Enum Enum of Reset OTP options Source code in pypaystack2/utils.py 172 173 174 175 176 class Reason ( str , Enum ): \"\"\"Enum of Reset OTP options\"\"\" RESEND_OTP = \"resend_otp\" TRANSFER = \"transfer\"","title":"Reason"},{"location":"reference/#pypaystack2.utils.Resolution","text":"Bases: str , Enum Enum of Resolutions supported by paystack Source code in pypaystack2/utils.py 193 194 195 196 197 class Resolution ( str , Enum ): \"\"\"Enum of Resolutions supported by paystack\"\"\" MERCHANT_ACCEPTED = \"merchant-accepted\" DECLINED = \"declined\"","title":"Resolution"},{"location":"reference/#pypaystack2.utils.RiskAction","text":"Bases: str , Enum Enum of RiskActions supported by paystack Source code in pypaystack2/utils.py 104 105 106 107 108 109 class RiskAction ( str , Enum ): \"\"\"Enum of RiskActions supported by paystack\"\"\" DEFAULT = \"default\" WHITELIST = \"allow\" BLACKLIST = \"deny\"","title":"RiskAction"},{"location":"reference/#pypaystack2.utils.Schedule","text":"Bases: str , Enum Enum of settlement schedules supported by paystack Source code in pypaystack2/utils.py 163 164 165 166 167 168 169 class Schedule ( str , Enum ): \"\"\"Enum of settlement schedules supported by paystack\"\"\" AUTO = \"auto\" WEEKLY = \"weekly\" MONTHLY = \"monthly\" MANUAL = \"manual\"","title":"Schedule"},{"location":"reference/#pypaystack2.utils.SplitType","text":"Bases: str , Enum Enum of split types Source code in pypaystack2/utils.py 69 70 71 72 73 class SplitType ( str , Enum ): \"\"\"Enum of split types\"\"\" PERCENTAGE = \"percentage\" FLAT = \"flat\"","title":"SplitType"},{"location":"reference/#pypaystack2.utils.TRType","text":"Bases: str , Enum Enum of Transfer Recipient types Source code in pypaystack2/utils.py 119 120 121 122 123 124 125 126 class TRType ( str , Enum ): \"\"\"Enum of Transfer Recipient types\"\"\" # FIXME: Find a better name for this class to reduce confusion. NUBAN = \"nuban\" MOBILE_MONEY = \"mobile_money\" BASA = \"basa\"","title":"TRType"},{"location":"reference/#pypaystack2.utils.TerminalEventType","text":"Bases: str , Enum Enum of the types of events supported by Terminal API Source code in pypaystack2/utils.py 9 10 11 12 13 class TerminalEventType ( str , Enum ): \"\"\"Enum of the types of events supported by Terminal API\"\"\" TRANSACTION = \"transaction\" INVOICE = \"invoice\"","title":"TerminalEventType"},{"location":"reference/#pypaystack2.utils.TransactionStatus","text":"Bases: str , Enum Enum of transaction status Source code in pypaystack2/utils.py 61 62 63 64 65 66 class TransactionStatus ( str , Enum ): \"\"\"Enum of transaction status\"\"\" FAILED = \"failed\" SUCCESS = \"success\" ABANDONED = \"abandoned\"","title":"TransactionStatus"},{"location":"reference/#pypaystack2.utils.add_to_payload","text":"Adds more parameters to an existing payload. This is a utility is used in the generation of payloads for a request body. It helps to add more parameters to a payload if it is not None. e.g. say you want to send a payload which is currently {\"amount\": 20000} and you want to include an additional data such as currency if provided in the optional_params to send this {\"amount\": 20000,\"currency\":\"ngn\"} if only the currency is available otherwise send the intial payload. This functions takes a list of optional parameters which is added to the payload is they are available and returns the payload.","title":"add_to_payload()"},{"location":"reference/#pypaystack2.utils.add_to_payload--parameters","text":"list[tuple[str,Any]] A list of additional data to be added to the payload if it is available. It follows the format [(\"name-on-payload\",\"value\")]. e.g [(\"currency\",\"ngn\"),(\"amount\",2000)] dict[str,Any] A dictionary containing the data to be sent in the request body.","title":"Parameters"},{"location":"reference/#pypaystack2.utils.add_to_payload--returns","text":"dict[str,Any] A dictionary of the payload updated with addtional data in the optional_params that are not None . Source code in pypaystack2/utils.py 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 def add_to_payload ( optional_params : list [ tuple [ str , Any ]], payload : dict [ str , Any ] ) -> dict [ str , Any ]: \"\"\"Adds more parameters to an existing payload. This is a utility is used in the generation of payloads for a request body. It helps to add more parameters to a payload if it is not None. e.g. say you want to send a payload which is currently ``{\"amount\": 20000}`` and you want to include an additional data such as ``currency`` if provided in the ``optional_params`` to send this ``{\"amount\": 20000,\"currency\":\"ngn\"}`` if only the currency is available otherwise send the intial payload. This functions takes a list of optional parameters which is added to the payload is they are available and returns the payload. Parameters ---------- optional_params: list[tuple[str,Any]] A list of additional data to be added to the payload if it is available. It follows the format ``[(\"name-on-payload\",\"value\")].`` e.g ``[(\"currency\",\"ngn\"),(\"amount\",2000)]`` payload: dict[str,Any] A dictionary containing the data to be sent in the request body. Returns ------- dict[str,Any] A dictionary of the payload updated with addtional data in the optional_params that are not ``None``. \"\"\" [ payload . update ({ item [ 0 ]: item [ 1 ]}) for item in optional_params if item [ 1 ] is not None ] return payload","title":"Returns"},{"location":"reference/#pypaystack2.utils.append_query_params","text":"Adds more queries to url that already has query parameters in its suffix This function should only be used with urls that already have a query parameter suffixed to it because it makes that assumption that the url supplied is of the state http://example-url.com?firstQuery=1 and it adds more query parameters delimited by & to the end of the provided url http://example-url.com?firstQuery=1&otherQuery=2&...","title":"append_query_params()"},{"location":"reference/#pypaystack2.utils.append_query_params--parameters","text":"list[tuple[str,Any]] A list of other query parameters that should be appended to the url if it is not None. e.g [(\"page\",2),(\"pagination\",50),(\"currency\",None)] -> url&page=2&pagination=50 str The url to which additional query parameters is added.","title":"Parameters"},{"location":"reference/#pypaystack2.utils.append_query_params--returns","text":"str The new url with padded query parameters. Source code in pypaystack2/utils.py 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 def append_query_params ( query_params : list [ tuple [ str , Any ]], url : str ) -> str : \"\"\"Adds more queries to url that already has query parameters in its suffix This function should only be used with urls that already have a query parameter suffixed to it because it makes that assumption that the url supplied is of the state ``http://example-url.com?firstQuery=1`` and it adds more query parameters delimited by & to the end of the provided url ``http://example-url.com?firstQuery=1&otherQuery=2&...`` Parameters ---------- query_params: list[tuple[str,Any]] A list of other query parameters that should be appended to the url if it is not None. e.g ``[(\"page\",2),(\"pagination\",50),(\"currency\",None)]`` -> ``url&page=2&pagination=50`` url: str The url to which additional query parameters is added. Returns ------- str The new url with padded query parameters. \"\"\" params = [ f \"& { param [ 0 ] } = { param [ 1 ] } \" for param in query_params if param [ 1 ] is not None ] if len ( params ) == 0 : return url return url + reduce ( add , params )","title":"Returns"},{"location":"reference/#pypaystack2.utils.validate_amount","text":"Helps to validate money amount. Helps to ensure that a valid amount of money is supplied as an input, to prevent cases where negative or zero value is provided as an amount.","title":"validate_amount()"},{"location":"reference/#pypaystack2.utils.validate_amount--parameters","text":"int,float The money to be validated.","title":"Parameters"},{"location":"reference/#pypaystack2.utils.validate_amount--returns","text":"int,float The money supplied if it is valid.","title":"Returns"},{"location":"reference/#pypaystack2.utils.validate_amount--raises","text":"InvalidDataError With the cause of the validation error Source code in pypaystack2/utils.py 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 def validate_amount ( amount : Union [ int , float ]) -> Union [ int , float ]: \"\"\"Helps to validate money amount. Helps to ensure that a valid amount of money is supplied as an input, to prevent cases where negative or zero value is provided as an amount. Parameters ---------- amount: int,float The money to be validated. Returns ------- int,float The money supplied if it is valid. Raises ------ InvalidDataError With the cause of the validation error \"\"\" if not amount : raise InvalidDataError ( \"Amount to be charged is required\" ) if isinstance ( amount , int ) or isinstance ( amount , float ): # Save the sever some headaches if amount < 0 : raise InvalidDataError ( \"Negative amount is not allowed\" ) return amount else : raise InvalidDataError ( \"Amount should be a number\" )","title":"Raises"},{"location":"reference/#pypaystack2.utils.validate_interval","text":"Validates that the interval supplied is supported by paystack","title":"validate_interval()"},{"location":"reference/#pypaystack2.utils.validate_interval--parameters","text":"interval:str any of the intervals supported by paystack i.e. hourly,daily weekly,monthly,annually","title":"Parameters"},{"location":"reference/#pypaystack2.utils.validate_interval--returns","text":"str returns the interval if it is a valid paystack interval","title":"Returns"},{"location":"reference/#pypaystack2.utils.validate_interval--raises","text":"InvalidDataError to provide feedback that an invalid interval was provided. Source code in pypaystack2/utils.py 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 def validate_interval ( interval : str ) -> str : \"\"\"Validates that the interval supplied is supported by paystack Parameters ---------- interval:str any of the intervals supported by paystack i.e. hourly,daily weekly,monthly,annually Returns ------- str returns the interval if it is a valid paystack interval Raises ------ InvalidDataError to provide feedback that an invalid interval was provided. \"\"\" interval = ( interval if interval . lower () in [ \"hourly\" , \"daily\" , \"weekly\" , \"monthly\" , \"annually\" ] else None ) if not interval : raise InvalidDataError ( \"Please provide a valid plan interval\" ) return interval","title":"Raises"},{"location":"reference/#pypaystack2.errors.InvalidDataError","text":"Bases: PyPaystackError Invalid input recognised. Saves unnecessary request to the server Source code in pypaystack2/errors.py 25 26 27 28 29 30 class InvalidDataError ( PyPaystackError ): \"\"\" Invalid input recognised. Saves unnecessary request to the server \"\"\" pass","title":"InvalidDataError"},{"location":"reference/#pypaystack2.errors.InvalidMethodError","text":"Bases: PyPaystackError Invalid or unrecognized/unimplemented HTTP request method Source code in pypaystack2/errors.py 17 18 19 20 21 22 class InvalidMethodError ( PyPaystackError ): \"\"\" Invalid or unrecognized/unimplemented HTTP request method \"\"\" pass","title":"InvalidMethodError"},{"location":"reference/#pypaystack2.errors.MissingAuthKeyError","text":"Bases: PyPaystackError We can't find the authentication key Source code in pypaystack2/errors.py 9 10 11 12 13 14 class MissingAuthKeyError ( PyPaystackError ): \"\"\" We can't find the authentication key \"\"\" pass","title":"MissingAuthKeyError"},{"location":"reference/#pypaystack2.errors.PyPaystackError","text":"Bases: Exception Python Paystack Error Source code in pypaystack2/errors.py 1 2 3 4 5 6 class PyPaystackError ( Exception ): \"\"\" Python Paystack Error \"\"\" pass","title":"PyPaystackError"},{"location":"tutorials/","text":"Tutorials Paystack Command line Client","title":"Table of contents"},{"location":"tutorials/#tutorials","text":"Paystack Command line Client","title":"Tutorials"},{"location":"tutorials/tutorial1/","text":"Paystack Command line Client This tutorial aims to expose you to how to use pypaystack2 in your python projects for paystack integrations. We'll be building a simple command line application that integrates with paystack's services. Project Setup We'll start by setting up our project. We'll be using pipenv for managing this project's dependencies and environment. you're free to use your preferred choice like virtualenv . if you don't have pipenv installed yet, you can install it with pip install pipenv . it's important to note that pipenv should be installed globally and not within a virtual environment. You're good to proceed if this prerequisite is met. Create a directory to house our project. mkdir paystack_cli_client && cd paystack_cli_client Initialize a virtual environment for the project. pipenv shell Install the projects dependencies. We'll be needing pypaystack2 , python-dotenv , and typer . pypaystack2 package is an API wrapper for paystack's services. python-dotenv helps us manage our environmental variables and typer makes building command line apps in python super simple. pipenv install pypaystack2 python-dotenv typer If all work's fine, you're good to proceed. Environmental Variables pypaystack2 depends on your paystack authorization key that you get from signing up to paystack. Paystack provides you with two pairs. A pair of public and secret key for live mode and another set for test mode. You can find them in your account settings. Since this is just a tutorial we'll be using only the test secret key. create a new file named .env within your project's root directory. Now put in your test secret key in the .env file like so. PAYSTACK_AUTHORIZATION_KEY = \"<your test secret key>\" Warning Because this is just a tutorial, no extra measure is made to protect this environmental. In a more serious project or production code, extra care should be taken to protect it and also avoid pushing it to a remote source control. Let the games begin It's time to start building! create a new file named main.py in your root directory. # root-dir/main.py from dotenv import load_dotenv load_dotenv () What we have just done is loaded our secret test key within the .env file. You may be wondering why do we need that, here's why pypaystack2 needs this key to communicate with paystack's api. alternatively, you can pass your authorization key into any of the api wrappers provided by pypaystack2 via their auth_key parameter. Here's a list of all the API wrappers currently available as at the time of writing of this tutorial. ApplePay BulkCharge Charge ControlPanel Customer DedicatedAccount Dispute Invoice Miscellaneous Page Plan Product Refund Settlement Split SubAccount Subscription Transaction TransferReceipt TransferControl Transfer Verification So in a situation where you don't have your PAYSTACK_AUTHORIZATION_KEY as an environmental variable, you can pass it into any of the API wrappers. e.g. # When you don't have PAYSTACK_AUTHORIZATION_KEY in your environmental variables from pypaystack2.api import Transaction , Plan txn_wrapper = Transaction ( auth_key = \"<your test secret key>\" ) plan_wrapper = Plan ( auth_key = \"<your test secret key>\" ) # When you have PAYSTACK_AUTHORIZATION_KEY set in your environmental variables txn_wrapper = Transaction () plan_wrapper = Plan () Note You don't have to provide your authorization key on the instantiation of any of the API wrappers as long as you have it set in your environmental variables like this tutorial does. On your marks! The first feature we'll be implementing for our Paystack Command line Client is the ability to create new customers on our paystack integration. so now update your main.py file with the code below. # root-dir/main.py from dotenv import load_dotenv from typer import Typer load_dotenv () app = Typer () @app . command () def new_customer (): print ( \"new customer successfully created!\" ) if __name__ == \"__main__\" : app () This is a minimum setup to building cli apps with Typer . Now try this in your project's root directory. python main.py --help You should see. Usage: main.py [ OPTIONS ] Options: --install-completion [ bash | zsh | fish | powershell | pwsh ] Install completion for the specified shell. --show-completion [ bash | zsh | fish | powershell | pwsh ] Show completion for the specified shell, to copy it or customize the installation. --help Show this message and exit. You can see that we now have a command line app that's responding to our command in this case --help . Let's try out the custom command we just added. python main.py You should see new customer successfully created! At the moment, no new customer is actually getting created on your paystack integration. let's bring in pypaystack2 to help us get the job done. For this to work, pypaystack2 provides wrappers for the restful APIs provided by Paystack. These wrappers are named to closely match the API they wrap and methods on these wrappers correspond to endpoints on the Paystack services you're interested in so in this case, for us to create a customer on our integration, we need to use the Customer API wrapper which connects to Paystack's Customer Services API. More info at Paystack's Customer Services API # root-dir/main.py from typing import Optional from dotenv import load_dotenv from pypaystack2.api import Customer from typer import Typer load_dotenv () app = Typer () customer_wrapper = Customer () @app . command () def new_customer ( email : str , first_name : Optional [ str ] = None , last_name : Optional [ str ] = None , phone : Optional [ str ] = None , ): response = customer_wrapper . create ( email = email , first_name = first_name , last_name = last_name , phone = phone ) print ( response . status_code ) print ( response . status ) print ( response . message ) print ( response . data ) if __name__ == \"__main__\" : app () Note All API wrappers are available in pypaystack2.api . e.g. from pypaystack2.api import Split, Transaction Now if you run the script again. python main.py You get error saying you have a missing argument 'EMAIL' Usage: main.py [ OPTIONS ] EMAIL Try 'main.py --help' for help. Error: Missing argument 'EMAIL' . Now let's try out our script with the email of the customer we want to create. python main.py email@example.com Now if all goes fine. \"An Internet connection is required\", you should get something similar to this 200 True Customer created { 'transactions' : [] , 'subscriptions' : [] , 'authorizations' : [] , 'first_name' : '' , 'last_name' : '' , 'email' : 'email@example.com' , 'phone' : '' , 'metadata' : None, 'domain' : 'test' , 'customer_code' : 'CUS_kd197ej30zxr34v' , 'risk_action' : 'default' , 'id' : 47748473 , 'integration' : 630606 , 'createdAt' : '2021-06-20T05:16:20.000Z' , 'updatedAt' : '2021-06-20T05:16:20.000Z' , 'identified' : False, 'identifications' : None } Yay! You've just created a new customer on your integration You can check out the customer's tab in your Paystack account to confirm this. Tip You can also create new customers with a first name and last name like so. python main.py email@example.com --first-name John --last-name Doe What just happened? You have just created a new customer on your integration with the CLI app you just built. But how? If you've followed this tutorial to this point you already know what wrappers are, or you can quickly skim through the chapters before to get a refresher. The right question should be what is the create method on the Customer wrapper for. You guess right if what's on your mind is that it creates the new customer on your integration. So as it was said earlier, all wrappers have methods on them that correspond to an endpoint on paystack and all of this methods will return a Response object based on the response it gets from Paystack. This Response is just a NamedTuple that holds the status,status_code,message and data . So this call response = customer_wrapper . create ( email = email , first_name = first_name , last_name = last_name , phone = phone ) in our script returns the Response object just described, and you can access each of these attributes with response.status , response.status_code , response.message , response.data More Commands! Let's add a few more commands to our Paystack Command line Client # root-dir/main.py from typing import Optional from dotenv import load_dotenv from pypaystack2.api import Customer from typer import Typer load_dotenv () app = Typer () customer_wrapper = Customer () @app . command () def new_customer ( email : str , first_name : Optional [ str ] = None , last_name : Optional [ str ] = None , phone : Optional [ str ] = None , ): response = customer_wrapper . create ( email = email , first_name = first_name , last_name = last_name , phone = phone ) print ( response . status_code ) print ( response . status ) print ( response . message ) print ( response . data ) @app . command () def list_customers (): response = customer_wrapper . get_customers () print ( response . status_code ) print ( response . status ) print ( response . message ) print ( response . data ) @app . command () def get_customer ( ec : str ): response = customer_wrapper . get_customer ( email_or_code = ec ) print ( response . status_code ) print ( response . status ) print ( response . message ) print ( response . data ) @app . command () def update_customer ( code : str , last_name : str , first_name : str ): response = customer_wrapper . update ( code = code , last_name = last_name , first_name = first_name ) print ( response . status_code ) print ( response . status ) print ( response . message ) print ( response . data ) if __name__ == \"__main__\" : app () We now have 3 new commands for our cli app. you can check them out with python main.py --help Now under the available command you should see get-customer, list-customers, new-customer, update-customer Usage: main.py [ OPTIONS ] COMMAND [ ARGS ] ... Options: --install-completion [ bash | zsh | fish | powershell | pwsh ] Install completion for the specified shell. --show-completion [ bash | zsh | fish | powershell | pwsh ] Show completion for the specified shell, to copy it or customize the installation. --help Show this message and exit. Commands: get-customer list-customers new-customer update-customer You can try out the new command with the following commands Where to go from here It's all in your hands now . We now have a working cli app, but it does not have all the features to make it a fully fledged Paystack command line client you can bring in more wrappers and implement new commands. It also does not handle all the likely exception that can occur, but then, the purpose of the tutorial is to expose you to pypaystack2 . Not sure how something works, you can always search the documentation. Good luck on your next project!","title":"Paystack Command line Client"},{"location":"tutorials/tutorial1/#paystack-command-line-client","text":"This tutorial aims to expose you to how to use pypaystack2 in your python projects for paystack integrations. We'll be building a simple command line application that integrates with paystack's services.","title":"Paystack Command line Client"},{"location":"tutorials/tutorial1/#project-setup","text":"We'll start by setting up our project. We'll be using pipenv for managing this project's dependencies and environment. you're free to use your preferred choice like virtualenv . if you don't have pipenv installed yet, you can install it with pip install pipenv . it's important to note that pipenv should be installed globally and not within a virtual environment. You're good to proceed if this prerequisite is met. Create a directory to house our project. mkdir paystack_cli_client && cd paystack_cli_client Initialize a virtual environment for the project. pipenv shell Install the projects dependencies. We'll be needing pypaystack2 , python-dotenv , and typer . pypaystack2 package is an API wrapper for paystack's services. python-dotenv helps us manage our environmental variables and typer makes building command line apps in python super simple. pipenv install pypaystack2 python-dotenv typer If all work's fine, you're good to proceed.","title":"Project Setup"},{"location":"tutorials/tutorial1/#environmental-variables","text":"pypaystack2 depends on your paystack authorization key that you get from signing up to paystack. Paystack provides you with two pairs. A pair of public and secret key for live mode and another set for test mode. You can find them in your account settings. Since this is just a tutorial we'll be using only the test secret key. create a new file named .env within your project's root directory. Now put in your test secret key in the .env file like so. PAYSTACK_AUTHORIZATION_KEY = \"<your test secret key>\" Warning Because this is just a tutorial, no extra measure is made to protect this environmental. In a more serious project or production code, extra care should be taken to protect it and also avoid pushing it to a remote source control.","title":"Environmental Variables"},{"location":"tutorials/tutorial1/#let-the-games-begin","text":"It's time to start building! create a new file named main.py in your root directory. # root-dir/main.py from dotenv import load_dotenv load_dotenv () What we have just done is loaded our secret test key within the .env file. You may be wondering why do we need that, here's why pypaystack2 needs this key to communicate with paystack's api. alternatively, you can pass your authorization key into any of the api wrappers provided by pypaystack2 via their auth_key parameter. Here's a list of all the API wrappers currently available as at the time of writing of this tutorial. ApplePay BulkCharge Charge ControlPanel Customer DedicatedAccount Dispute Invoice Miscellaneous Page Plan Product Refund Settlement Split SubAccount Subscription Transaction TransferReceipt TransferControl Transfer Verification So in a situation where you don't have your PAYSTACK_AUTHORIZATION_KEY as an environmental variable, you can pass it into any of the API wrappers. e.g. # When you don't have PAYSTACK_AUTHORIZATION_KEY in your environmental variables from pypaystack2.api import Transaction , Plan txn_wrapper = Transaction ( auth_key = \"<your test secret key>\" ) plan_wrapper = Plan ( auth_key = \"<your test secret key>\" ) # When you have PAYSTACK_AUTHORIZATION_KEY set in your environmental variables txn_wrapper = Transaction () plan_wrapper = Plan () Note You don't have to provide your authorization key on the instantiation of any of the API wrappers as long as you have it set in your environmental variables like this tutorial does.","title":"Let the games begin"},{"location":"tutorials/tutorial1/#on-your-marks","text":"The first feature we'll be implementing for our Paystack Command line Client is the ability to create new customers on our paystack integration. so now update your main.py file with the code below. # root-dir/main.py from dotenv import load_dotenv from typer import Typer load_dotenv () app = Typer () @app . command () def new_customer (): print ( \"new customer successfully created!\" ) if __name__ == \"__main__\" : app () This is a minimum setup to building cli apps with Typer . Now try this in your project's root directory. python main.py --help You should see. Usage: main.py [ OPTIONS ] Options: --install-completion [ bash | zsh | fish | powershell | pwsh ] Install completion for the specified shell. --show-completion [ bash | zsh | fish | powershell | pwsh ] Show completion for the specified shell, to copy it or customize the installation. --help Show this message and exit. You can see that we now have a command line app that's responding to our command in this case --help . Let's try out the custom command we just added. python main.py You should see new customer successfully created! At the moment, no new customer is actually getting created on your paystack integration. let's bring in pypaystack2 to help us get the job done. For this to work, pypaystack2 provides wrappers for the restful APIs provided by Paystack. These wrappers are named to closely match the API they wrap and methods on these wrappers correspond to endpoints on the Paystack services you're interested in so in this case, for us to create a customer on our integration, we need to use the Customer API wrapper which connects to Paystack's Customer Services API. More info at Paystack's Customer Services API # root-dir/main.py from typing import Optional from dotenv import load_dotenv from pypaystack2.api import Customer from typer import Typer load_dotenv () app = Typer () customer_wrapper = Customer () @app . command () def new_customer ( email : str , first_name : Optional [ str ] = None , last_name : Optional [ str ] = None , phone : Optional [ str ] = None , ): response = customer_wrapper . create ( email = email , first_name = first_name , last_name = last_name , phone = phone ) print ( response . status_code ) print ( response . status ) print ( response . message ) print ( response . data ) if __name__ == \"__main__\" : app () Note All API wrappers are available in pypaystack2.api . e.g. from pypaystack2.api import Split, Transaction Now if you run the script again. python main.py You get error saying you have a missing argument 'EMAIL' Usage: main.py [ OPTIONS ] EMAIL Try 'main.py --help' for help. Error: Missing argument 'EMAIL' . Now let's try out our script with the email of the customer we want to create. python main.py email@example.com Now if all goes fine. \"An Internet connection is required\", you should get something similar to this 200 True Customer created { 'transactions' : [] , 'subscriptions' : [] , 'authorizations' : [] , 'first_name' : '' , 'last_name' : '' , 'email' : 'email@example.com' , 'phone' : '' , 'metadata' : None, 'domain' : 'test' , 'customer_code' : 'CUS_kd197ej30zxr34v' , 'risk_action' : 'default' , 'id' : 47748473 , 'integration' : 630606 , 'createdAt' : '2021-06-20T05:16:20.000Z' , 'updatedAt' : '2021-06-20T05:16:20.000Z' , 'identified' : False, 'identifications' : None } Yay! You've just created a new customer on your integration You can check out the customer's tab in your Paystack account to confirm this. Tip You can also create new customers with a first name and last name like so. python main.py email@example.com --first-name John --last-name Doe","title":"On your marks!"},{"location":"tutorials/tutorial1/#what-just-happened","text":"You have just created a new customer on your integration with the CLI app you just built. But how? If you've followed this tutorial to this point you already know what wrappers are, or you can quickly skim through the chapters before to get a refresher. The right question should be what is the create method on the Customer wrapper for. You guess right if what's on your mind is that it creates the new customer on your integration. So as it was said earlier, all wrappers have methods on them that correspond to an endpoint on paystack and all of this methods will return a Response object based on the response it gets from Paystack. This Response is just a NamedTuple that holds the status,status_code,message and data . So this call response = customer_wrapper . create ( email = email , first_name = first_name , last_name = last_name , phone = phone ) in our script returns the Response object just described, and you can access each of these attributes with response.status , response.status_code , response.message , response.data","title":"What just happened?"},{"location":"tutorials/tutorial1/#more-commands","text":"Let's add a few more commands to our Paystack Command line Client # root-dir/main.py from typing import Optional from dotenv import load_dotenv from pypaystack2.api import Customer from typer import Typer load_dotenv () app = Typer () customer_wrapper = Customer () @app . command () def new_customer ( email : str , first_name : Optional [ str ] = None , last_name : Optional [ str ] = None , phone : Optional [ str ] = None , ): response = customer_wrapper . create ( email = email , first_name = first_name , last_name = last_name , phone = phone ) print ( response . status_code ) print ( response . status ) print ( response . message ) print ( response . data ) @app . command () def list_customers (): response = customer_wrapper . get_customers () print ( response . status_code ) print ( response . status ) print ( response . message ) print ( response . data ) @app . command () def get_customer ( ec : str ): response = customer_wrapper . get_customer ( email_or_code = ec ) print ( response . status_code ) print ( response . status ) print ( response . message ) print ( response . data ) @app . command () def update_customer ( code : str , last_name : str , first_name : str ): response = customer_wrapper . update ( code = code , last_name = last_name , first_name = first_name ) print ( response . status_code ) print ( response . status ) print ( response . message ) print ( response . data ) if __name__ == \"__main__\" : app () We now have 3 new commands for our cli app. you can check them out with python main.py --help Now under the available command you should see get-customer, list-customers, new-customer, update-customer Usage: main.py [ OPTIONS ] COMMAND [ ARGS ] ... Options: --install-completion [ bash | zsh | fish | powershell | pwsh ] Install completion for the specified shell. --show-completion [ bash | zsh | fish | powershell | pwsh ] Show completion for the specified shell, to copy it or customize the installation. --help Show this message and exit. Commands: get-customer list-customers new-customer update-customer You can try out the new command with the following commands","title":"More Commands!"},{"location":"tutorials/tutorial1/#where-to-go-from-here","text":"It's all in your hands now . We now have a working cli app, but it does not have all the features to make it a fully fledged Paystack command line client you can bring in more wrappers and implement new commands. It also does not handle all the likely exception that can occur, but then, the purpose of the tutorial is to expose you to pypaystack2 . Not sure how something works, you can always search the documentation. Good luck on your next project!","title":"Where to go from here"}]}